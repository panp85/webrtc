// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_tester_packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network_tester_packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace webrtc {
namespace network_tester {
namespace packet {
class NetworkTesterPacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkTesterPacket> {
} _NetworkTesterPacket_default_instance_;

namespace protobuf_network_5ftester_5fpacket_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _NetworkTesterPacket_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NetworkTesterPacket_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_network_5ftester_5fpacket_2eproto

bool NetworkTesterPacket_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetworkTesterPacket_Type NetworkTesterPacket::HAND_SHAKING;
const NetworkTesterPacket_Type NetworkTesterPacket::TEST_START;
const NetworkTesterPacket_Type NetworkTesterPacket::TEST_DATA;
const NetworkTesterPacket_Type NetworkTesterPacket::TEST_DONE;
const NetworkTesterPacket_Type NetworkTesterPacket::Type_MIN;
const NetworkTesterPacket_Type NetworkTesterPacket::Type_MAX;
const int NetworkTesterPacket::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkTesterPacket::kTypeFieldNumber;
const int NetworkTesterPacket::kSendTimestampFieldNumber;
const int NetworkTesterPacket::kArrivalTimestampFieldNumber;
const int NetworkTesterPacket::kSequenceNumberFieldNumber;
const int NetworkTesterPacket::kPacketSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkTesterPacket::NetworkTesterPacket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_network_5ftester_5fpacket_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.network_tester.packet.NetworkTesterPacket)
}
NetworkTesterPacket::NetworkTesterPacket(const NetworkTesterPacket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&send_timestamp_, &from.send_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&send_timestamp_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:webrtc.network_tester.packet.NetworkTesterPacket)
}

void NetworkTesterPacket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&send_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&send_timestamp_)) + sizeof(sequence_number_));
}

NetworkTesterPacket::~NetworkTesterPacket() {
  // @@protoc_insertion_point(destructor:webrtc.network_tester.packet.NetworkTesterPacket)
  SharedDtor();
}

void NetworkTesterPacket::SharedDtor() {
}

void NetworkTesterPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkTesterPacket& NetworkTesterPacket::default_instance() {
  protobuf_network_5ftester_5fpacket_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkTesterPacket* NetworkTesterPacket::New(::google::protobuf::Arena* arena) const {
  NetworkTesterPacket* n = new NetworkTesterPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkTesterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.network_tester.packet.NetworkTesterPacket)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&send_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&send_timestamp_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkTesterPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.network_tester.packet.NetworkTesterPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .webrtc.network_tester.packet.NetworkTesterPacket.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::network_tester::packet::NetworkTesterPacket_Type_IsValid(value)) {
            set_type(static_cast< ::webrtc::network_tester::packet::NetworkTesterPacket_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 send_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_send_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 arrival_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_arrival_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &arrival_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sequence_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 packet_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_packet_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.network_tester.packet.NetworkTesterPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.network_tester.packet.NetworkTesterPacket)
  return false;
#undef DO_
}

void NetworkTesterPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.network_tester.packet.NetworkTesterPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .webrtc.network_tester.packet.NetworkTesterPacket.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 send_timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->send_timestamp(), output);
  }

  // optional int64 arrival_timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->arrival_timestamp(), output);
  }

  // optional int64 sequence_number = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sequence_number(), output);
  }

  // optional int32 packet_size = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->packet_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.network_tester.packet.NetworkTesterPacket)
}

size_t NetworkTesterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.network_tester.packet.NetworkTesterPacket)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 send_timestamp = 2;
    if (has_send_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->send_timestamp());
    }

    // optional int64 arrival_timestamp = 3;
    if (has_arrival_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->arrival_timestamp());
    }

    // optional .webrtc.network_tester.packet.NetworkTesterPacket.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 packet_size = 5;
    if (has_packet_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_size());
    }

    // optional int64 sequence_number = 4;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkTesterPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkTesterPacket*>(&from));
}

void NetworkTesterPacket::MergeFrom(const NetworkTesterPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.network_tester.packet.NetworkTesterPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      send_timestamp_ = from.send_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      arrival_timestamp_ = from.arrival_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      packet_size_ = from.packet_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkTesterPacket::CopyFrom(const NetworkTesterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.network_tester.packet.NetworkTesterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkTesterPacket::IsInitialized() const {
  return true;
}

void NetworkTesterPacket::Swap(NetworkTesterPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkTesterPacket::InternalSwap(NetworkTesterPacket* other) {
  std::swap(send_timestamp_, other->send_timestamp_);
  std::swap(arrival_timestamp_, other->arrival_timestamp_);
  std::swap(type_, other->type_);
  std::swap(packet_size_, other->packet_size_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkTesterPacket::GetTypeName() const {
  return "webrtc.network_tester.packet.NetworkTesterPacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkTesterPacket

// optional .webrtc.network_tester.packet.NetworkTesterPacket.Type type = 1;
bool NetworkTesterPacket::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkTesterPacket::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkTesterPacket::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkTesterPacket::clear_type() {
  type_ = 0;
  clear_has_type();
}
::webrtc::network_tester::packet::NetworkTesterPacket_Type NetworkTesterPacket::type() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.packet.NetworkTesterPacket.type)
  return static_cast< ::webrtc::network_tester::packet::NetworkTesterPacket_Type >(type_);
}
void NetworkTesterPacket::set_type(::webrtc::network_tester::packet::NetworkTesterPacket_Type value) {
  assert(::webrtc::network_tester::packet::NetworkTesterPacket_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.packet.NetworkTesterPacket.type)
}

// optional int64 send_timestamp = 2;
bool NetworkTesterPacket::has_send_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkTesterPacket::set_has_send_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkTesterPacket::clear_has_send_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkTesterPacket::clear_send_timestamp() {
  send_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_send_timestamp();
}
::google::protobuf::int64 NetworkTesterPacket::send_timestamp() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.packet.NetworkTesterPacket.send_timestamp)
  return send_timestamp_;
}
void NetworkTesterPacket::set_send_timestamp(::google::protobuf::int64 value) {
  set_has_send_timestamp();
  send_timestamp_ = value;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.packet.NetworkTesterPacket.send_timestamp)
}

// optional int64 arrival_timestamp = 3;
bool NetworkTesterPacket::has_arrival_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkTesterPacket::set_has_arrival_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkTesterPacket::clear_has_arrival_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkTesterPacket::clear_arrival_timestamp() {
  arrival_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_arrival_timestamp();
}
::google::protobuf::int64 NetworkTesterPacket::arrival_timestamp() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.packet.NetworkTesterPacket.arrival_timestamp)
  return arrival_timestamp_;
}
void NetworkTesterPacket::set_arrival_timestamp(::google::protobuf::int64 value) {
  set_has_arrival_timestamp();
  arrival_timestamp_ = value;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.packet.NetworkTesterPacket.arrival_timestamp)
}

// optional int64 sequence_number = 4;
bool NetworkTesterPacket::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetworkTesterPacket::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000010u;
}
void NetworkTesterPacket::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetworkTesterPacket::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_number();
}
::google::protobuf::int64 NetworkTesterPacket::sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.packet.NetworkTesterPacket.sequence_number)
  return sequence_number_;
}
void NetworkTesterPacket::set_sequence_number(::google::protobuf::int64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.packet.NetworkTesterPacket.sequence_number)
}

// optional int32 packet_size = 5;
bool NetworkTesterPacket::has_packet_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetworkTesterPacket::set_has_packet_size() {
  _has_bits_[0] |= 0x00000008u;
}
void NetworkTesterPacket::clear_has_packet_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetworkTesterPacket::clear_packet_size() {
  packet_size_ = 0;
  clear_has_packet_size();
}
::google::protobuf::int32 NetworkTesterPacket::packet_size() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.packet.NetworkTesterPacket.packet_size)
  return packet_size_;
}
void NetworkTesterPacket::set_packet_size(::google::protobuf::int32 value) {
  set_has_packet_size();
  packet_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.packet.NetworkTesterPacket.packet_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace packet
}  // namespace network_tester
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)
