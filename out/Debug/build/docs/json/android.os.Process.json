{
  "methods": {
    "getRandomApplicationUid()": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getRandomApplicationUid()"
    },
    "myPid()": {
      "isImplementation": true,
      "modifiers": [
        "public",
        "static",
        "final"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "myPid()"
    },
    "myUid()": {
      "isImplementation": true,
      "modifiers": [
        "public",
        "static",
        "final"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "myUid()",
      "documentation": "Returns the identifier of this process\u0027s uid. Unlike Android UIDs are randomly initialized to prevent\ntests from depending on any given value. Tests should access the current process UID via\n{@link android.os.Process#myUid()}.\n"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setPid(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "pid"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPid(int)",
      "documentation": "Sets the identifier of this process.\n"
    }
  },
  "imports": [
    "java.util.concurrent.ThreadLocalRandom",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.Resetter"
  ],
  "name": "org.robolectric.shadows.ShadowProcess"
}