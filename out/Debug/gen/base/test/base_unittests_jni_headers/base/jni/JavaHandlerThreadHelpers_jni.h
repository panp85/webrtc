// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/JavaHandlerThreadHelpers

#ifndef org_chromium_base_JavaHandlerThreadHelpers_JNI
#define org_chromium_base_JavaHandlerThreadHelpers_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_JavaHandlerThreadHelpers[];
const char kClassPath_org_chromium_base_JavaHandlerThreadHelpers[] =
    "org/chromium/base/JavaHandlerThreadHelpers";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_base_JavaHandlerThreadHelpers_clazz
    = 0;
#ifndef org_chromium_base_JavaHandlerThreadHelpers_clazz_defined
#define org_chromium_base_JavaHandlerThreadHelpers_clazz_defined
inline jclass org_chromium_base_JavaHandlerThreadHelpers_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_JavaHandlerThreadHelpers,
      &g_org_chromium_base_JavaHandlerThreadHelpers_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {


static base::subtle::AtomicWord
    g_org_chromium_base_JavaHandlerThreadHelpers_testAndGetJavaHandlerThread = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_JavaHandlerThreadHelpers_testAndGetJavaHandlerThread(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_base_JavaHandlerThreadHelpers_clazz(env),
      org_chromium_base_JavaHandlerThreadHelpers_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_base_JavaHandlerThreadHelpers_clazz(env),
          "testAndGetJavaHandlerThread",
          "()Lorg/chromium/base/JavaHandlerThread;",
          &g_org_chromium_base_JavaHandlerThreadHelpers_testAndGetJavaHandlerThread);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_base_JavaHandlerThreadHelpers_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_base_JavaHandlerThreadHelpers_throwException = 0;
static void Java_JavaHandlerThreadHelpers_throwException(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_base_JavaHandlerThreadHelpers_clazz(env),
      org_chromium_base_JavaHandlerThreadHelpers_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_base_JavaHandlerThreadHelpers_clazz(env),
          "throwException",
          "()V",
          &g_org_chromium_base_JavaHandlerThreadHelpers_throwException);

     env->CallStaticVoidMethod(org_chromium_base_JavaHandlerThreadHelpers_clazz(env),
          method_id);
}

static base::subtle::AtomicWord
    g_org_chromium_base_JavaHandlerThreadHelpers_isExceptionTestException = 0;
static jboolean Java_JavaHandlerThreadHelpers_isExceptionTestException(JNIEnv* env, const
    base::android::JavaRef<jthrowable>& exception) {
  CHECK_CLAZZ(env, org_chromium_base_JavaHandlerThreadHelpers_clazz(env),
      org_chromium_base_JavaHandlerThreadHelpers_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_base_JavaHandlerThreadHelpers_clazz(env),
          "isExceptionTestException",
          "(Ljava/lang/Throwable;)Z",
          &g_org_chromium_base_JavaHandlerThreadHelpers_isExceptionTestException);

  jboolean ret =
      env->CallStaticBooleanMethod(org_chromium_base_JavaHandlerThreadHelpers_clazz(env),
          method_id, exception.obj());
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace android
}  // namespace base

#endif  // org_chromium_base_JavaHandlerThreadHelpers_JNI
