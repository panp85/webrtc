// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtc_event_log2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rtc_event_log2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace webrtc {
namespace rtclog2 {
class EventStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EventStream> {
} _EventStream_default_instance_;
class EventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Event> {
} _Event_default_instance_;
class IncomingRtpPacketsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IncomingRtpPackets> {
} _IncomingRtpPackets_default_instance_;
class OutgoingRtpPacketsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OutgoingRtpPackets> {
} _OutgoingRtpPackets_default_instance_;
class IncomingRtcpPacketsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IncomingRtcpPackets> {
} _IncomingRtcpPackets_default_instance_;
class OutgoingRtcpPacketsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OutgoingRtcpPackets> {
} _OutgoingRtcpPackets_default_instance_;
class AudioPlayoutEventsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioPlayoutEvents> {
} _AudioPlayoutEvents_default_instance_;
class BeginLogEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BeginLogEvent> {
} _BeginLogEvent_default_instance_;
class EndLogEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EndLogEvent> {
} _EndLogEvent_default_instance_;
class LossBasedBweUpdatesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LossBasedBweUpdates> {
} _LossBasedBweUpdates_default_instance_;
class DelayBasedBweUpdatesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelayBasedBweUpdates> {
} _DelayBasedBweUpdates_default_instance_;
class RtpHeaderExtensionConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RtpHeaderExtensionConfig> {
} _RtpHeaderExtensionConfig_default_instance_;
class VideoRecvStreamConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoRecvStreamConfig> {
} _VideoRecvStreamConfig_default_instance_;
class VideoSendStreamConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoSendStreamConfig> {
} _VideoSendStreamConfig_default_instance_;
class AudioRecvStreamConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioRecvStreamConfig> {
} _AudioRecvStreamConfig_default_instance_;
class AudioSendStreamConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioSendStreamConfig> {
} _AudioSendStreamConfig_default_instance_;
class AudioNetworkAdaptationsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioNetworkAdaptations> {
} _AudioNetworkAdaptations_default_instance_;
class BweProbeClusterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BweProbeCluster> {
} _BweProbeCluster_default_instance_;
class BweProbeResultSuccessDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BweProbeResultSuccess> {
} _BweProbeResultSuccess_default_instance_;
class BweProbeResultFailureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BweProbeResultFailure> {
} _BweProbeResultFailure_default_instance_;

namespace protobuf_rtc_5fevent_5flog2_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _EventStream_default_instance_.Shutdown();
  _Event_default_instance_.Shutdown();
  _IncomingRtpPackets_default_instance_.Shutdown();
  _OutgoingRtpPackets_default_instance_.Shutdown();
  _IncomingRtcpPackets_default_instance_.Shutdown();
  _OutgoingRtcpPackets_default_instance_.Shutdown();
  _AudioPlayoutEvents_default_instance_.Shutdown();
  _BeginLogEvent_default_instance_.Shutdown();
  _EndLogEvent_default_instance_.Shutdown();
  _LossBasedBweUpdates_default_instance_.Shutdown();
  _DelayBasedBweUpdates_default_instance_.Shutdown();
  _RtpHeaderExtensionConfig_default_instance_.Shutdown();
  _VideoRecvStreamConfig_default_instance_.Shutdown();
  _VideoSendStreamConfig_default_instance_.Shutdown();
  _AudioRecvStreamConfig_default_instance_.Shutdown();
  _AudioSendStreamConfig_default_instance_.Shutdown();
  _AudioNetworkAdaptations_default_instance_.Shutdown();
  _BweProbeCluster_default_instance_.Shutdown();
  _BweProbeResultSuccess_default_instance_.Shutdown();
  _BweProbeResultFailure_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _EventStream_default_instance_.DefaultConstruct();
  _Event_default_instance_.DefaultConstruct();
  _IncomingRtpPackets_default_instance_.DefaultConstruct();
  _OutgoingRtpPackets_default_instance_.DefaultConstruct();
  _IncomingRtcpPackets_default_instance_.DefaultConstruct();
  _OutgoingRtcpPackets_default_instance_.DefaultConstruct();
  _AudioPlayoutEvents_default_instance_.DefaultConstruct();
  _BeginLogEvent_default_instance_.DefaultConstruct();
  _EndLogEvent_default_instance_.DefaultConstruct();
  _LossBasedBweUpdates_default_instance_.DefaultConstruct();
  _DelayBasedBweUpdates_default_instance_.DefaultConstruct();
  _RtpHeaderExtensionConfig_default_instance_.DefaultConstruct();
  _VideoRecvStreamConfig_default_instance_.DefaultConstruct();
  _VideoSendStreamConfig_default_instance_.DefaultConstruct();
  _AudioRecvStreamConfig_default_instance_.DefaultConstruct();
  _AudioSendStreamConfig_default_instance_.DefaultConstruct();
  _AudioNetworkAdaptations_default_instance_.DefaultConstruct();
  _BweProbeCluster_default_instance_.DefaultConstruct();
  _BweProbeResultSuccess_default_instance_.DefaultConstruct();
  _BweProbeResultFailure_default_instance_.DefaultConstruct();
  _VideoRecvStreamConfig_default_instance_.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
  _VideoSendStreamConfig_default_instance_.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
  _AudioRecvStreamConfig_default_instance_.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
  _AudioSendStreamConfig_default_instance_.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_rtc_5fevent_5flog2_2eproto

bool DelayBasedBweUpdates_DetectorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_NORMAL;
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_UNDERUSING;
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_OVERUSING;
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::DetectorState_MIN;
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::DetectorState_MAX;
const int DelayBasedBweUpdates::DetectorState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool BweProbeResultFailure_FailureReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BweProbeResultFailure_FailureReason BweProbeResultFailure::UNKNOWN;
const BweProbeResultFailure_FailureReason BweProbeResultFailure::INVALID_SEND_RECEIVE_INTERVAL;
const BweProbeResultFailure_FailureReason BweProbeResultFailure::INVALID_SEND_RECEIVE_RATIO;
const BweProbeResultFailure_FailureReason BweProbeResultFailure::TIMEOUT;
const BweProbeResultFailure_FailureReason BweProbeResultFailure::FailureReason_MIN;
const BweProbeResultFailure_FailureReason BweProbeResultFailure::FailureReason_MAX;
const int BweProbeResultFailure::FailureReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventStream::kStreamFieldNumber;
const int EventStream::kVersionFieldNumber;
const int EventStream::kIncomingRtpPacketsFieldNumber;
const int EventStream::kOutgoingRtpPacketsFieldNumber;
const int EventStream::kIncomingRtcpPacketsFieldNumber;
const int EventStream::kOutgoingRtcpPacketsFieldNumber;
const int EventStream::kAudioPlayoutEventsFieldNumber;
const int EventStream::kBeginLogEventsFieldNumber;
const int EventStream::kEndLogEventsFieldNumber;
const int EventStream::kLossBasedBweUpdatesFieldNumber;
const int EventStream::kDelayBasedBweUpdatesFieldNumber;
const int EventStream::kAudioNetworkAdaptationsFieldNumber;
const int EventStream::kProbeClustersFieldNumber;
const int EventStream::kProbeSuccessFieldNumber;
const int EventStream::kProbeFailureFieldNumber;
const int EventStream::kAudioRecvStreamConfigsFieldNumber;
const int EventStream::kAudioSendStreamConfigsFieldNumber;
const int EventStream::kVideoRecvStreamConfigsFieldNumber;
const int EventStream::kVideoSendStreamConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventStream::EventStream()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.EventStream)
}
EventStream::EventStream(const EventStream& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stream_(from.stream_),
      incoming_rtp_packets_(from.incoming_rtp_packets_),
      outgoing_rtp_packets_(from.outgoing_rtp_packets_),
      incoming_rtcp_packets_(from.incoming_rtcp_packets_),
      outgoing_rtcp_packets_(from.outgoing_rtcp_packets_),
      audio_playout_events_(from.audio_playout_events_),
      begin_log_events_(from.begin_log_events_),
      end_log_events_(from.end_log_events_),
      loss_based_bwe_updates_(from.loss_based_bwe_updates_),
      delay_based_bwe_updates_(from.delay_based_bwe_updates_),
      audio_network_adaptations_(from.audio_network_adaptations_),
      probe_clusters_(from.probe_clusters_),
      probe_success_(from.probe_success_),
      probe_failure_(from.probe_failure_),
      audio_recv_stream_configs_(from.audio_recv_stream_configs_),
      audio_send_stream_configs_(from.audio_send_stream_configs_),
      video_recv_stream_configs_(from.video_recv_stream_configs_),
      video_send_stream_configs_(from.video_send_stream_configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.EventStream)
}

void EventStream::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

EventStream::~EventStream() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.EventStream)
  SharedDtor();
}

void EventStream::SharedDtor() {
}

void EventStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EventStream& EventStream::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventStream* EventStream::New(::google::protobuf::Arena* arena) const {
  EventStream* n = new EventStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventStream::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.EventStream)
  stream_.Clear();
  incoming_rtp_packets_.Clear();
  outgoing_rtp_packets_.Clear();
  incoming_rtcp_packets_.Clear();
  outgoing_rtcp_packets_.Clear();
  audio_playout_events_.Clear();
  begin_log_events_.Clear();
  end_log_events_.Clear();
  loss_based_bwe_updates_.Clear();
  delay_based_bwe_updates_.Clear();
  audio_network_adaptations_.Clear();
  probe_clusters_.Clear();
  probe_success_.Clear();
  probe_failure_.Clear();
  audio_recv_stream_configs_.Clear();
  audio_send_stream_configs_.Clear();
  video_recv_stream_configs_.Clear();
  video_send_stream_configs_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EventStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.EventStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_incoming_rtp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outgoing_rtp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_incoming_rtcp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outgoing_rtcp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audio_playout_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_begin_log_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_end_log_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loss_based_bwe_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delay_based_bwe_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audio_network_adaptations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_probe_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_probe_success()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_probe_failure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audio_recv_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audio_send_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_video_recv_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_video_send_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.EventStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.EventStream)
  return false;
#undef DO_
}

void EventStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.EventStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stream_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->stream(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incoming_rtp_packets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->incoming_rtp_packets(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outgoing_rtp_packets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->outgoing_rtp_packets(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incoming_rtcp_packets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->incoming_rtcp_packets(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outgoing_rtcp_packets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->outgoing_rtcp_packets(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_playout_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->audio_playout_events(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->begin_log_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->begin_log_events(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_log_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->end_log_events(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->loss_based_bwe_updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->loss_based_bwe_updates(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->delay_based_bwe_updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->delay_based_bwe_updates(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_network_adaptations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->audio_network_adaptations(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->probe_clusters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->probe_clusters(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->probe_success_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->probe_success(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->probe_failure_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->probe_failure(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_recv_stream_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      101, this->audio_recv_stream_configs(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_send_stream_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      102, this->audio_send_stream_configs(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->video_recv_stream_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      103, this->video_recv_stream_configs(static_cast<int>(i)), output);
  }

  // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->video_send_stream_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      104, this->video_send_stream_configs(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.EventStream)
}

size_t EventStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.EventStream)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->stream_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->incoming_rtp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->incoming_rtp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->outgoing_rtp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outgoing_rtp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->incoming_rtcp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->incoming_rtcp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->outgoing_rtcp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outgoing_rtcp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_playout_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio_playout_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->begin_log_events_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->begin_log_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->end_log_events_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_log_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->loss_based_bwe_updates_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loss_based_bwe_updates(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->delay_based_bwe_updates_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delay_based_bwe_updates(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_network_adaptations_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio_network_adaptations(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->probe_clusters_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->probe_clusters(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->probe_success_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->probe_success(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->probe_failure_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->probe_failure(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_recv_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio_recv_stream_configs(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_send_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio_send_stream_configs(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
  {
    unsigned int count = static_cast<unsigned int>(this->video_recv_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video_recv_stream_configs(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
  {
    unsigned int count = static_cast<unsigned int>(this->video_send_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video_send_stream_configs(static_cast<int>(i)));
    }
  }

  // optional uint32 version = 2;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventStream::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EventStream*>(&from));
}

void EventStream::MergeFrom(const EventStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.EventStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_.MergeFrom(from.stream_);
  incoming_rtp_packets_.MergeFrom(from.incoming_rtp_packets_);
  outgoing_rtp_packets_.MergeFrom(from.outgoing_rtp_packets_);
  incoming_rtcp_packets_.MergeFrom(from.incoming_rtcp_packets_);
  outgoing_rtcp_packets_.MergeFrom(from.outgoing_rtcp_packets_);
  audio_playout_events_.MergeFrom(from.audio_playout_events_);
  begin_log_events_.MergeFrom(from.begin_log_events_);
  end_log_events_.MergeFrom(from.end_log_events_);
  loss_based_bwe_updates_.MergeFrom(from.loss_based_bwe_updates_);
  delay_based_bwe_updates_.MergeFrom(from.delay_based_bwe_updates_);
  audio_network_adaptations_.MergeFrom(from.audio_network_adaptations_);
  probe_clusters_.MergeFrom(from.probe_clusters_);
  probe_success_.MergeFrom(from.probe_success_);
  probe_failure_.MergeFrom(from.probe_failure_);
  audio_recv_stream_configs_.MergeFrom(from.audio_recv_stream_configs_);
  audio_send_stream_configs_.MergeFrom(from.audio_send_stream_configs_);
  video_recv_stream_configs_.MergeFrom(from.video_recv_stream_configs_);
  video_send_stream_configs_.MergeFrom(from.video_send_stream_configs_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void EventStream::CopyFrom(const EventStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.EventStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventStream::IsInitialized() const {
  return true;
}

void EventStream::Swap(EventStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventStream::InternalSwap(EventStream* other) {
  stream_.InternalSwap(&other->stream_);
  incoming_rtp_packets_.InternalSwap(&other->incoming_rtp_packets_);
  outgoing_rtp_packets_.InternalSwap(&other->outgoing_rtp_packets_);
  incoming_rtcp_packets_.InternalSwap(&other->incoming_rtcp_packets_);
  outgoing_rtcp_packets_.InternalSwap(&other->outgoing_rtcp_packets_);
  audio_playout_events_.InternalSwap(&other->audio_playout_events_);
  begin_log_events_.InternalSwap(&other->begin_log_events_);
  end_log_events_.InternalSwap(&other->end_log_events_);
  loss_based_bwe_updates_.InternalSwap(&other->loss_based_bwe_updates_);
  delay_based_bwe_updates_.InternalSwap(&other->delay_based_bwe_updates_);
  audio_network_adaptations_.InternalSwap(&other->audio_network_adaptations_);
  probe_clusters_.InternalSwap(&other->probe_clusters_);
  probe_success_.InternalSwap(&other->probe_success_);
  probe_failure_.InternalSwap(&other->probe_failure_);
  audio_recv_stream_configs_.InternalSwap(&other->audio_recv_stream_configs_);
  audio_send_stream_configs_.InternalSwap(&other->audio_send_stream_configs_);
  video_recv_stream_configs_.InternalSwap(&other->video_recv_stream_configs_);
  video_send_stream_configs_.InternalSwap(&other->video_send_stream_configs_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EventStream::GetTypeName() const {
  return "webrtc.rtclog2.EventStream";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventStream

// repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
int EventStream::stream_size() const {
  return stream_.size();
}
void EventStream::clear_stream() {
  stream_.Clear();
}
const ::webrtc::rtclog2::Event& EventStream::stream(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.stream)
  return stream_.Get(index);
}
::webrtc::rtclog2::Event* EventStream::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.stream)
  return stream_.Mutable(index);
}
::webrtc::rtclog2::Event* EventStream::add_stream() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.stream)
  return stream_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::Event >*
EventStream::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.stream)
  return &stream_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::Event >&
EventStream::stream() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.stream)
  return stream_;
}

// optional uint32 version = 2;
bool EventStream::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EventStream::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void EventStream::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void EventStream::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 EventStream::version() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.version)
  return version_;
}
void EventStream::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.EventStream.version)
}

// repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 3;
int EventStream::incoming_rtp_packets_size() const {
  return incoming_rtp_packets_.size();
}
void EventStream::clear_incoming_rtp_packets() {
  incoming_rtp_packets_.Clear();
}
const ::webrtc::rtclog2::IncomingRtpPackets& EventStream::incoming_rtp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_.Get(index);
}
::webrtc::rtclog2::IncomingRtpPackets* EventStream::mutable_incoming_rtp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_.Mutable(index);
}
::webrtc::rtclog2::IncomingRtpPackets* EventStream::add_incoming_rtp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets >*
EventStream::mutable_incoming_rtp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return &incoming_rtp_packets_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets >&
EventStream::incoming_rtp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_;
}

// repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 4;
int EventStream::outgoing_rtp_packets_size() const {
  return outgoing_rtp_packets_.size();
}
void EventStream::clear_outgoing_rtp_packets() {
  outgoing_rtp_packets_.Clear();
}
const ::webrtc::rtclog2::OutgoingRtpPackets& EventStream::outgoing_rtp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_.Get(index);
}
::webrtc::rtclog2::OutgoingRtpPackets* EventStream::mutable_outgoing_rtp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_.Mutable(index);
}
::webrtc::rtclog2::OutgoingRtpPackets* EventStream::add_outgoing_rtp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets >*
EventStream::mutable_outgoing_rtp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return &outgoing_rtp_packets_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets >&
EventStream::outgoing_rtp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_;
}

// repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 5;
int EventStream::incoming_rtcp_packets_size() const {
  return incoming_rtcp_packets_.size();
}
void EventStream::clear_incoming_rtcp_packets() {
  incoming_rtcp_packets_.Clear();
}
const ::webrtc::rtclog2::IncomingRtcpPackets& EventStream::incoming_rtcp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_.Get(index);
}
::webrtc::rtclog2::IncomingRtcpPackets* EventStream::mutable_incoming_rtcp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_.Mutable(index);
}
::webrtc::rtclog2::IncomingRtcpPackets* EventStream::add_incoming_rtcp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets >*
EventStream::mutable_incoming_rtcp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return &incoming_rtcp_packets_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets >&
EventStream::incoming_rtcp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_;
}

// repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 6;
int EventStream::outgoing_rtcp_packets_size() const {
  return outgoing_rtcp_packets_.size();
}
void EventStream::clear_outgoing_rtcp_packets() {
  outgoing_rtcp_packets_.Clear();
}
const ::webrtc::rtclog2::OutgoingRtcpPackets& EventStream::outgoing_rtcp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_.Get(index);
}
::webrtc::rtclog2::OutgoingRtcpPackets* EventStream::mutable_outgoing_rtcp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_.Mutable(index);
}
::webrtc::rtclog2::OutgoingRtcpPackets* EventStream::add_outgoing_rtcp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets >*
EventStream::mutable_outgoing_rtcp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return &outgoing_rtcp_packets_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets >&
EventStream::outgoing_rtcp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_;
}

// repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 7;
int EventStream::audio_playout_events_size() const {
  return audio_playout_events_.size();
}
void EventStream::clear_audio_playout_events() {
  audio_playout_events_.Clear();
}
const ::webrtc::rtclog2::AudioPlayoutEvents& EventStream::audio_playout_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_.Get(index);
}
::webrtc::rtclog2::AudioPlayoutEvents* EventStream::mutable_audio_playout_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_.Mutable(index);
}
::webrtc::rtclog2::AudioPlayoutEvents* EventStream::add_audio_playout_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents >*
EventStream::mutable_audio_playout_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_playout_events)
  return &audio_playout_events_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents >&
EventStream::audio_playout_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_;
}

// repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
int EventStream::begin_log_events_size() const {
  return begin_log_events_.size();
}
void EventStream::clear_begin_log_events() {
  begin_log_events_.Clear();
}
const ::webrtc::rtclog2::BeginLogEvent& EventStream::begin_log_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_.Get(index);
}
::webrtc::rtclog2::BeginLogEvent* EventStream::mutable_begin_log_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_.Mutable(index);
}
::webrtc::rtclog2::BeginLogEvent* EventStream::add_begin_log_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent >*
EventStream::mutable_begin_log_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.begin_log_events)
  return &begin_log_events_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent >&
EventStream::begin_log_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_;
}

// repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
int EventStream::end_log_events_size() const {
  return end_log_events_.size();
}
void EventStream::clear_end_log_events() {
  end_log_events_.Clear();
}
const ::webrtc::rtclog2::EndLogEvent& EventStream::end_log_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_.Get(index);
}
::webrtc::rtclog2::EndLogEvent* EventStream::mutable_end_log_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_.Mutable(index);
}
::webrtc::rtclog2::EndLogEvent* EventStream::add_end_log_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent >*
EventStream::mutable_end_log_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.end_log_events)
  return &end_log_events_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent >&
EventStream::end_log_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_;
}

// repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
int EventStream::loss_based_bwe_updates_size() const {
  return loss_based_bwe_updates_.size();
}
void EventStream::clear_loss_based_bwe_updates() {
  loss_based_bwe_updates_.Clear();
}
const ::webrtc::rtclog2::LossBasedBweUpdates& EventStream::loss_based_bwe_updates(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_.Get(index);
}
::webrtc::rtclog2::LossBasedBweUpdates* EventStream::mutable_loss_based_bwe_updates(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_.Mutable(index);
}
::webrtc::rtclog2::LossBasedBweUpdates* EventStream::add_loss_based_bwe_updates() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates >*
EventStream::mutable_loss_based_bwe_updates() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return &loss_based_bwe_updates_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates >&
EventStream::loss_based_bwe_updates() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_;
}

// repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
int EventStream::delay_based_bwe_updates_size() const {
  return delay_based_bwe_updates_.size();
}
void EventStream::clear_delay_based_bwe_updates() {
  delay_based_bwe_updates_.Clear();
}
const ::webrtc::rtclog2::DelayBasedBweUpdates& EventStream::delay_based_bwe_updates(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_.Get(index);
}
::webrtc::rtclog2::DelayBasedBweUpdates* EventStream::mutable_delay_based_bwe_updates(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_.Mutable(index);
}
::webrtc::rtclog2::DelayBasedBweUpdates* EventStream::add_delay_based_bwe_updates() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates >*
EventStream::mutable_delay_based_bwe_updates() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return &delay_based_bwe_updates_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates >&
EventStream::delay_based_bwe_updates() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_;
}

// repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
int EventStream::audio_network_adaptations_size() const {
  return audio_network_adaptations_.size();
}
void EventStream::clear_audio_network_adaptations() {
  audio_network_adaptations_.Clear();
}
const ::webrtc::rtclog2::AudioNetworkAdaptations& EventStream::audio_network_adaptations(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_.Get(index);
}
::webrtc::rtclog2::AudioNetworkAdaptations* EventStream::mutable_audio_network_adaptations(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_.Mutable(index);
}
::webrtc::rtclog2::AudioNetworkAdaptations* EventStream::add_audio_network_adaptations() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations >*
EventStream::mutable_audio_network_adaptations() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return &audio_network_adaptations_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations >&
EventStream::audio_network_adaptations() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_;
}

// repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
int EventStream::probe_clusters_size() const {
  return probe_clusters_.size();
}
void EventStream::clear_probe_clusters() {
  probe_clusters_.Clear();
}
const ::webrtc::rtclog2::BweProbeCluster& EventStream::probe_clusters(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_.Get(index);
}
::webrtc::rtclog2::BweProbeCluster* EventStream::mutable_probe_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_.Mutable(index);
}
::webrtc::rtclog2::BweProbeCluster* EventStream::add_probe_clusters() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster >*
EventStream::mutable_probe_clusters() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.probe_clusters)
  return &probe_clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster >&
EventStream::probe_clusters() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_;
}

// repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
int EventStream::probe_success_size() const {
  return probe_success_.size();
}
void EventStream::clear_probe_success() {
  probe_success_.Clear();
}
const ::webrtc::rtclog2::BweProbeResultSuccess& EventStream::probe_success(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_.Get(index);
}
::webrtc::rtclog2::BweProbeResultSuccess* EventStream::mutable_probe_success(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_.Mutable(index);
}
::webrtc::rtclog2::BweProbeResultSuccess* EventStream::add_probe_success() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess >*
EventStream::mutable_probe_success() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.probe_success)
  return &probe_success_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess >&
EventStream::probe_success() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_;
}

// repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
int EventStream::probe_failure_size() const {
  return probe_failure_.size();
}
void EventStream::clear_probe_failure() {
  probe_failure_.Clear();
}
const ::webrtc::rtclog2::BweProbeResultFailure& EventStream::probe_failure(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_.Get(index);
}
::webrtc::rtclog2::BweProbeResultFailure* EventStream::mutable_probe_failure(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_.Mutable(index);
}
::webrtc::rtclog2::BweProbeResultFailure* EventStream::add_probe_failure() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure >*
EventStream::mutable_probe_failure() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.probe_failure)
  return &probe_failure_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure >&
EventStream::probe_failure() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_;
}

// repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
int EventStream::audio_recv_stream_configs_size() const {
  return audio_recv_stream_configs_.size();
}
void EventStream::clear_audio_recv_stream_configs() {
  audio_recv_stream_configs_.Clear();
}
const ::webrtc::rtclog2::AudioRecvStreamConfig& EventStream::audio_recv_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_.Get(index);
}
::webrtc::rtclog2::AudioRecvStreamConfig* EventStream::mutable_audio_recv_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_.Mutable(index);
}
::webrtc::rtclog2::AudioRecvStreamConfig* EventStream::add_audio_recv_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig >*
EventStream::mutable_audio_recv_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return &audio_recv_stream_configs_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig >&
EventStream::audio_recv_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_;
}

// repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
int EventStream::audio_send_stream_configs_size() const {
  return audio_send_stream_configs_.size();
}
void EventStream::clear_audio_send_stream_configs() {
  audio_send_stream_configs_.Clear();
}
const ::webrtc::rtclog2::AudioSendStreamConfig& EventStream::audio_send_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_.Get(index);
}
::webrtc::rtclog2::AudioSendStreamConfig* EventStream::mutable_audio_send_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_.Mutable(index);
}
::webrtc::rtclog2::AudioSendStreamConfig* EventStream::add_audio_send_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig >*
EventStream::mutable_audio_send_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return &audio_send_stream_configs_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig >&
EventStream::audio_send_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_;
}

// repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
int EventStream::video_recv_stream_configs_size() const {
  return video_recv_stream_configs_.size();
}
void EventStream::clear_video_recv_stream_configs() {
  video_recv_stream_configs_.Clear();
}
const ::webrtc::rtclog2::VideoRecvStreamConfig& EventStream::video_recv_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_.Get(index);
}
::webrtc::rtclog2::VideoRecvStreamConfig* EventStream::mutable_video_recv_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_.Mutable(index);
}
::webrtc::rtclog2::VideoRecvStreamConfig* EventStream::add_video_recv_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig >*
EventStream::mutable_video_recv_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return &video_recv_stream_configs_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig >&
EventStream::video_recv_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_;
}

// repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
int EventStream::video_send_stream_configs_size() const {
  return video_send_stream_configs_.size();
}
void EventStream::clear_video_send_stream_configs() {
  video_send_stream_configs_.Clear();
}
const ::webrtc::rtclog2::VideoSendStreamConfig& EventStream::video_send_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_.Get(index);
}
::webrtc::rtclog2::VideoSendStreamConfig* EventStream::mutable_video_send_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_.Mutable(index);
}
::webrtc::rtclog2::VideoSendStreamConfig* EventStream::add_video_send_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig >*
EventStream::mutable_video_send_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return &video_send_stream_configs_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig >&
EventStream::video_send_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.Event)
}

void Event::SharedCtor() {
  _cached_size_ = 0;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.Event)
  SharedDtor();
}

void Event::SharedDtor() {
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Event& Event::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.Event)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.Event)
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.Event)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Event*>(&from));
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Event::GetTypeName() const {
  return "webrtc.rtclog2.Event";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncomingRtpPackets::kTimestampMsFieldNumber;
const int IncomingRtpPackets::kMarkerFieldNumber;
const int IncomingRtpPackets::kPayloadTypeFieldNumber;
const int IncomingRtpPackets::kSequenceNumberFieldNumber;
const int IncomingRtpPackets::kRtpTimestampFieldNumber;
const int IncomingRtpPackets::kSsrcFieldNumber;
const int IncomingRtpPackets::kPacketSizeFieldNumber;
const int IncomingRtpPackets::kTransmissionTimeOffsetFieldNumber;
const int IncomingRtpPackets::kAbsoluteSendTimeFieldNumber;
const int IncomingRtpPackets::kTransportSequenceNumberFieldNumber;
const int IncomingRtpPackets::kAudioLevelFieldNumber;
const int IncomingRtpPackets::kTimestampDeltasMsFieldNumber;
const int IncomingRtpPackets::kMarkerDeltasFieldNumber;
const int IncomingRtpPackets::kPayloadTypeDeltasFieldNumber;
const int IncomingRtpPackets::kSequenceNumberDeltasFieldNumber;
const int IncomingRtpPackets::kRtpTimestampDeltasFieldNumber;
const int IncomingRtpPackets::kSsrcDeltasFieldNumber;
const int IncomingRtpPackets::kPacketSizeDeltasFieldNumber;
const int IncomingRtpPackets::kTransmissionTimeOffsetDeltasFieldNumber;
const int IncomingRtpPackets::kAbsoluteSendTimeDeltasFieldNumber;
const int IncomingRtpPackets::kTransportSequenceNumberDeltasFieldNumber;
const int IncomingRtpPackets::kAudioLevelDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncomingRtpPackets::IncomingRtpPackets()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.IncomingRtpPackets)
}
IncomingRtpPackets::IncomingRtpPackets(const IncomingRtpPackets& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_deltas_ms()) {
    timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
  }
  marker_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_marker_deltas()) {
    marker_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
  }
  payload_type_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_type_deltas()) {
    payload_type_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
  }
  sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_number_deltas()) {
    sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
  }
  rtp_timestamp_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rtp_timestamp_deltas()) {
    rtp_timestamp_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
  }
  ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ssrc_deltas()) {
    ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
  }
  packet_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packet_size_deltas()) {
    packet_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_size_deltas_);
  }
  transmission_time_offset_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transmission_time_offset_deltas()) {
    transmission_time_offset_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
  }
  absolute_send_time_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_absolute_send_time_deltas()) {
    absolute_send_time_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
  }
  transport_sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transport_sequence_number_deltas()) {
    transport_sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
  }
  audio_level_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_level_deltas()) {
    audio_level_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_level_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_level_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IncomingRtpPackets)
}

void IncomingRtpPackets::SharedCtor() {
  _cached_size_ = 0;
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_level_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_level_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
}

IncomingRtpPackets::~IncomingRtpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IncomingRtpPackets)
  SharedDtor();
}

void IncomingRtpPackets::SharedDtor() {
  timestamp_deltas_ms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_size_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_level_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IncomingRtpPackets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IncomingRtpPackets& IncomingRtpPackets::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

IncomingRtpPackets* IncomingRtpPackets::New(::google::protobuf::Arena* arena) const {
  IncomingRtpPackets* n = new IncomingRtpPackets;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IncomingRtpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IncomingRtpPackets)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_timestamp_deltas_ms()) {
      GOOGLE_DCHECK(!timestamp_deltas_ms_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timestamp_deltas_ms_.UnsafeRawStringPointer())->clear();
    }
    if (has_marker_deltas()) {
      GOOGLE_DCHECK(!marker_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*marker_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_payload_type_deltas()) {
      GOOGLE_DCHECK(!payload_type_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*payload_type_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_sequence_number_deltas()) {
      GOOGLE_DCHECK(!sequence_number_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sequence_number_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_rtp_timestamp_deltas()) {
      GOOGLE_DCHECK(!rtp_timestamp_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rtp_timestamp_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_ssrc_deltas()) {
      GOOGLE_DCHECK(!ssrc_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ssrc_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_packet_size_deltas()) {
      GOOGLE_DCHECK(!packet_size_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packet_size_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_transmission_time_offset_deltas()) {
      GOOGLE_DCHECK(!transmission_time_offset_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transmission_time_offset_deltas_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_absolute_send_time_deltas()) {
      GOOGLE_DCHECK(!absolute_send_time_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*absolute_send_time_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_transport_sequence_number_deltas()) {
      GOOGLE_DCHECK(!transport_sequence_number_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transport_sequence_number_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_audio_level_deltas()) {
      GOOGLE_DCHECK(!audio_level_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*audio_level_deltas_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 63488u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtp_timestamp_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtp_timestamp_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&ssrc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_level_) -
        reinterpret_cast<char*>(&ssrc_)) + sizeof(audio_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IncomingRtpPackets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.IncomingRtpPackets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool marker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_marker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &marker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_payload_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtp_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_rtp_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ssrc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packet_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_packet_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transmission_time_offset = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_transmission_time_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmission_time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 absolute_send_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_absolute_send_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absolute_send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transport_sequence_number = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_transport_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transport_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 audio_level = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_audio_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_deltas_ms = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_deltas_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes marker_deltas = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marker_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_type_deltas = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_type_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sequence_number_deltas = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rtp_timestamp_deltas = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rtp_timestamp_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ssrc_deltas = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ssrc_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packet_size_deltas = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transmission_time_offset_deltas = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmission_time_offset_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes absolute_send_time_deltas = 109;
      case 109: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_absolute_send_time_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transport_sequence_number_deltas = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transport_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes audio_level_deltas = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_level_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.IncomingRtpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.IncomingRtpPackets)
  return false;
#undef DO_
}

void IncomingRtpPackets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.IncomingRtpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool marker = 2;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->marker(), output);
  }

  // optional uint32 payload_type = 3;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->payload_type(), output);
  }

  // optional uint32 sequence_number = 4;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sequence_number(), output);
  }

  // optional fixed32 rtp_timestamp = 5;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtp_timestamp(), output);
  }

  // optional fixed32 ssrc = 6;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->ssrc(), output);
  }

  // optional uint32 packet_size = 8;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->packet_size(), output);
  }

  // optional int32 transmission_time_offset = 9;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->transmission_time_offset(), output);
  }

  // optional uint32 absolute_send_time = 10;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->absolute_send_time(), output);
  }

  // optional uint32 transport_sequence_number = 11;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->transport_sequence_number(), output);
  }

  // optional uint32 audio_level = 12;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->audio_level(), output);
  }

  // optional bytes timestamp_deltas_ms = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_deltas_ms(), output);
  }

  // optional bytes marker_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->marker_deltas(), output);
  }

  // optional bytes payload_type_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->payload_type_deltas(), output);
  }

  // optional bytes sequence_number_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->sequence_number_deltas(), output);
  }

  // optional bytes rtp_timestamp_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      105, this->rtp_timestamp_deltas(), output);
  }

  // optional bytes ssrc_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      106, this->ssrc_deltas(), output);
  }

  // optional bytes packet_size_deltas = 107;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      107, this->packet_size_deltas(), output);
  }

  // optional bytes transmission_time_offset_deltas = 108;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      108, this->transmission_time_offset_deltas(), output);
  }

  // optional bytes absolute_send_time_deltas = 109;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      109, this->absolute_send_time_deltas(), output);
  }

  // optional bytes transport_sequence_number_deltas = 110;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      110, this->transport_sequence_number_deltas(), output);
  }

  // optional bytes audio_level_deltas = 111;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      111, this->audio_level_deltas(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.IncomingRtpPackets)
}

size_t IncomingRtpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IncomingRtpPackets)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes timestamp_deltas_ms = 101;
    if (has_timestamp_deltas_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_deltas_ms());
    }

    // optional bytes marker_deltas = 102;
    if (has_marker_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marker_deltas());
    }

    // optional bytes payload_type_deltas = 103;
    if (has_payload_type_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_type_deltas());
    }

    // optional bytes sequence_number_deltas = 104;
    if (has_sequence_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sequence_number_deltas());
    }

    // optional bytes rtp_timestamp_deltas = 105;
    if (has_rtp_timestamp_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rtp_timestamp_deltas());
    }

    // optional bytes ssrc_deltas = 106;
    if (has_ssrc_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ssrc_deltas());
    }

    // optional bytes packet_size_deltas = 107;
    if (has_packet_size_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packet_size_deltas());
    }

    // optional bytes transmission_time_offset_deltas = 108;
    if (has_transmission_time_offset_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmission_time_offset_deltas());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bytes absolute_send_time_deltas = 109;
    if (has_absolute_send_time_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->absolute_send_time_deltas());
    }

    // optional bytes transport_sequence_number_deltas = 110;
    if (has_transport_sequence_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transport_sequence_number_deltas());
    }

    // optional bytes audio_level_deltas = 111;
    if (has_audio_level_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audio_level_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional bool marker = 2;
    if (has_marker()) {
      total_size += 1 + 1;
    }

    // optional uint32 payload_type = 3;
    if (has_payload_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload_type());
    }

    // optional uint32 sequence_number = 4;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_number());
    }

    // optional fixed32 rtp_timestamp = 5;
    if (has_rtp_timestamp()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional fixed32 ssrc = 6;
    if (has_ssrc()) {
      total_size += 1 + 4;
    }

    // optional uint32 packet_size = 8;
    if (has_packet_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_size());
    }

    // optional int32 transmission_time_offset = 9;
    if (has_transmission_time_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmission_time_offset());
    }

    // optional uint32 absolute_send_time = 10;
    if (has_absolute_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->absolute_send_time());
    }

    // optional uint32 transport_sequence_number = 11;
    if (has_transport_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transport_sequence_number());
    }

    // optional uint32 audio_level = 12;
    if (has_audio_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncomingRtpPackets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IncomingRtpPackets*>(&from));
}

void IncomingRtpPackets::MergeFrom(const IncomingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IncomingRtpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_deltas_ms();
      timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_marker_deltas();
      marker_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_payload_type_deltas();
      payload_type_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sequence_number_deltas();
      sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_rtp_timestamp_deltas();
      rtp_timestamp_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_ssrc_deltas();
      ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_packet_size_deltas();
      packet_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_size_deltas_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_transmission_time_offset_deltas();
      transmission_time_offset_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_absolute_send_time_deltas();
      absolute_send_time_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_transport_sequence_number_deltas();
      transport_sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_audio_level_deltas();
      audio_level_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_level_deltas_);
    }
    if (cached_has_bits & 0x00000800u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00001000u) {
      marker_ = from.marker_;
    }
    if (cached_has_bits & 0x00002000u) {
      payload_type_ = from.payload_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00008000u) {
      rtp_timestamp_ = from.rtp_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      ssrc_ = from.ssrc_;
    }
    if (cached_has_bits & 0x00020000u) {
      packet_size_ = from.packet_size_;
    }
    if (cached_has_bits & 0x00040000u) {
      transmission_time_offset_ = from.transmission_time_offset_;
    }
    if (cached_has_bits & 0x00080000u) {
      absolute_send_time_ = from.absolute_send_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      transport_sequence_number_ = from.transport_sequence_number_;
    }
    if (cached_has_bits & 0x00200000u) {
      audio_level_ = from.audio_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IncomingRtpPackets::CopyFrom(const IncomingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IncomingRtpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingRtpPackets::IsInitialized() const {
  return true;
}

void IncomingRtpPackets::Swap(IncomingRtpPackets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncomingRtpPackets::InternalSwap(IncomingRtpPackets* other) {
  timestamp_deltas_ms_.Swap(&other->timestamp_deltas_ms_);
  marker_deltas_.Swap(&other->marker_deltas_);
  payload_type_deltas_.Swap(&other->payload_type_deltas_);
  sequence_number_deltas_.Swap(&other->sequence_number_deltas_);
  rtp_timestamp_deltas_.Swap(&other->rtp_timestamp_deltas_);
  ssrc_deltas_.Swap(&other->ssrc_deltas_);
  packet_size_deltas_.Swap(&other->packet_size_deltas_);
  transmission_time_offset_deltas_.Swap(&other->transmission_time_offset_deltas_);
  absolute_send_time_deltas_.Swap(&other->absolute_send_time_deltas_);
  transport_sequence_number_deltas_.Swap(&other->transport_sequence_number_deltas_);
  audio_level_deltas_.Swap(&other->audio_level_deltas_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(marker_, other->marker_);
  std::swap(payload_type_, other->payload_type_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(rtp_timestamp_, other->rtp_timestamp_);
  std::swap(ssrc_, other->ssrc_);
  std::swap(packet_size_, other->packet_size_);
  std::swap(transmission_time_offset_, other->transmission_time_offset_);
  std::swap(absolute_send_time_, other->absolute_send_time_);
  std::swap(transport_sequence_number_, other->transport_sequence_number_);
  std::swap(audio_level_, other->audio_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IncomingRtpPackets::GetTypeName() const {
  return "webrtc.rtclog2.IncomingRtpPackets";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IncomingRtpPackets

// optional int64 timestamp_ms = 1;
bool IncomingRtpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void IncomingRtpPackets::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000800u;
}
void IncomingRtpPackets::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000800u;
}
void IncomingRtpPackets::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 IncomingRtpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms)
  return timestamp_ms_;
}
void IncomingRtpPackets::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms)
}

// optional bool marker = 2;
bool IncomingRtpPackets::has_marker() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void IncomingRtpPackets::set_has_marker() {
  _has_bits_[0] |= 0x00001000u;
}
void IncomingRtpPackets::clear_has_marker() {
  _has_bits_[0] &= ~0x00001000u;
}
void IncomingRtpPackets::clear_marker() {
  marker_ = false;
  clear_has_marker();
}
bool IncomingRtpPackets::marker() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.marker)
  return marker_;
}
void IncomingRtpPackets::set_marker(bool value) {
  set_has_marker();
  marker_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.marker)
}

// optional uint32 payload_type = 3;
bool IncomingRtpPackets::has_payload_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void IncomingRtpPackets::set_has_payload_type() {
  _has_bits_[0] |= 0x00002000u;
}
void IncomingRtpPackets::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00002000u;
}
void IncomingRtpPackets::clear_payload_type() {
  payload_type_ = 0u;
  clear_has_payload_type();
}
::google::protobuf::uint32 IncomingRtpPackets::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.payload_type)
  return payload_type_;
}
void IncomingRtpPackets::set_payload_type(::google::protobuf::uint32 value) {
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.payload_type)
}

// optional uint32 sequence_number = 4;
bool IncomingRtpPackets::has_sequence_number() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void IncomingRtpPackets::set_has_sequence_number() {
  _has_bits_[0] |= 0x00004000u;
}
void IncomingRtpPackets::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00004000u;
}
void IncomingRtpPackets::clear_sequence_number() {
  sequence_number_ = 0u;
  clear_has_sequence_number();
}
::google::protobuf::uint32 IncomingRtpPackets::sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.sequence_number)
  return sequence_number_;
}
void IncomingRtpPackets::set_sequence_number(::google::protobuf::uint32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.sequence_number)
}

// optional fixed32 rtp_timestamp = 5;
bool IncomingRtpPackets::has_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void IncomingRtpPackets::set_has_rtp_timestamp() {
  _has_bits_[0] |= 0x00008000u;
}
void IncomingRtpPackets::clear_has_rtp_timestamp() {
  _has_bits_[0] &= ~0x00008000u;
}
void IncomingRtpPackets::clear_rtp_timestamp() {
  rtp_timestamp_ = 0u;
  clear_has_rtp_timestamp();
}
::google::protobuf::uint32 IncomingRtpPackets::rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp)
  return rtp_timestamp_;
}
void IncomingRtpPackets::set_rtp_timestamp(::google::protobuf::uint32 value) {
  set_has_rtp_timestamp();
  rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp)
}

// optional fixed32 ssrc = 6;
bool IncomingRtpPackets::has_ssrc() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void IncomingRtpPackets::set_has_ssrc() {
  _has_bits_[0] |= 0x00010000u;
}
void IncomingRtpPackets::clear_has_ssrc() {
  _has_bits_[0] &= ~0x00010000u;
}
void IncomingRtpPackets::clear_ssrc() {
  ssrc_ = 0u;
  clear_has_ssrc();
}
::google::protobuf::uint32 IncomingRtpPackets::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.ssrc)
  return ssrc_;
}
void IncomingRtpPackets::set_ssrc(::google::protobuf::uint32 value) {
  set_has_ssrc();
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.ssrc)
}

// optional uint32 packet_size = 8;
bool IncomingRtpPackets::has_packet_size() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void IncomingRtpPackets::set_has_packet_size() {
  _has_bits_[0] |= 0x00020000u;
}
void IncomingRtpPackets::clear_has_packet_size() {
  _has_bits_[0] &= ~0x00020000u;
}
void IncomingRtpPackets::clear_packet_size() {
  packet_size_ = 0u;
  clear_has_packet_size();
}
::google::protobuf::uint32 IncomingRtpPackets::packet_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.packet_size)
  return packet_size_;
}
void IncomingRtpPackets::set_packet_size(::google::protobuf::uint32 value) {
  set_has_packet_size();
  packet_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.packet_size)
}

// optional int32 transmission_time_offset = 9;
bool IncomingRtpPackets::has_transmission_time_offset() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void IncomingRtpPackets::set_has_transmission_time_offset() {
  _has_bits_[0] |= 0x00040000u;
}
void IncomingRtpPackets::clear_has_transmission_time_offset() {
  _has_bits_[0] &= ~0x00040000u;
}
void IncomingRtpPackets::clear_transmission_time_offset() {
  transmission_time_offset_ = 0;
  clear_has_transmission_time_offset();
}
::google::protobuf::int32 IncomingRtpPackets::transmission_time_offset() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset)
  return transmission_time_offset_;
}
void IncomingRtpPackets::set_transmission_time_offset(::google::protobuf::int32 value) {
  set_has_transmission_time_offset();
  transmission_time_offset_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset)
}

// optional uint32 absolute_send_time = 10;
bool IncomingRtpPackets::has_absolute_send_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void IncomingRtpPackets::set_has_absolute_send_time() {
  _has_bits_[0] |= 0x00080000u;
}
void IncomingRtpPackets::clear_has_absolute_send_time() {
  _has_bits_[0] &= ~0x00080000u;
}
void IncomingRtpPackets::clear_absolute_send_time() {
  absolute_send_time_ = 0u;
  clear_has_absolute_send_time();
}
::google::protobuf::uint32 IncomingRtpPackets::absolute_send_time() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time)
  return absolute_send_time_;
}
void IncomingRtpPackets::set_absolute_send_time(::google::protobuf::uint32 value) {
  set_has_absolute_send_time();
  absolute_send_time_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time)
}

// optional uint32 transport_sequence_number = 11;
bool IncomingRtpPackets::has_transport_sequence_number() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void IncomingRtpPackets::set_has_transport_sequence_number() {
  _has_bits_[0] |= 0x00100000u;
}
void IncomingRtpPackets::clear_has_transport_sequence_number() {
  _has_bits_[0] &= ~0x00100000u;
}
void IncomingRtpPackets::clear_transport_sequence_number() {
  transport_sequence_number_ = 0u;
  clear_has_transport_sequence_number();
}
::google::protobuf::uint32 IncomingRtpPackets::transport_sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number)
  return transport_sequence_number_;
}
void IncomingRtpPackets::set_transport_sequence_number(::google::protobuf::uint32 value) {
  set_has_transport_sequence_number();
  transport_sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number)
}

// optional uint32 audio_level = 12;
bool IncomingRtpPackets::has_audio_level() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void IncomingRtpPackets::set_has_audio_level() {
  _has_bits_[0] |= 0x00200000u;
}
void IncomingRtpPackets::clear_has_audio_level() {
  _has_bits_[0] &= ~0x00200000u;
}
void IncomingRtpPackets::clear_audio_level() {
  audio_level_ = 0u;
  clear_has_audio_level();
}
::google::protobuf::uint32 IncomingRtpPackets::audio_level() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.audio_level)
  return audio_level_;
}
void IncomingRtpPackets::set_audio_level(::google::protobuf::uint32 value) {
  set_has_audio_level();
  audio_level_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.audio_level)
}

// optional bytes timestamp_deltas_ms = 101;
bool IncomingRtpPackets::has_timestamp_deltas_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IncomingRtpPackets::set_has_timestamp_deltas_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void IncomingRtpPackets::clear_has_timestamp_deltas_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void IncomingRtpPackets::clear_timestamp_deltas_ms() {
  timestamp_deltas_ms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_deltas_ms();
}
const ::std::string& IncomingRtpPackets::timestamp_deltas_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.timestamp_deltas_ms)
  return timestamp_deltas_ms_.GetNoArena();
}
void IncomingRtpPackets::set_timestamp_deltas_ms(const ::std::string& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.timestamp_deltas_ms)
}
#if LANG_CXX11
void IncomingRtpPackets::set_timestamp_deltas_ms(::std::string&& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.timestamp_deltas_ms)
}
#endif
void IncomingRtpPackets::set_timestamp_deltas_ms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.timestamp_deltas_ms)
}
void IncomingRtpPackets::set_timestamp_deltas_ms(const void* value, size_t size) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.timestamp_deltas_ms)
}
::std::string* IncomingRtpPackets::mutable_timestamp_deltas_ms() {
  set_has_timestamp_deltas_ms();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.timestamp_deltas_ms)
  return timestamp_deltas_ms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtpPackets::release_timestamp_deltas_ms() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.timestamp_deltas_ms)
  clear_has_timestamp_deltas_ms();
  return timestamp_deltas_ms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtpPackets::set_allocated_timestamp_deltas_ms(::std::string* timestamp_deltas_ms) {
  if (timestamp_deltas_ms != NULL) {
    set_has_timestamp_deltas_ms();
  } else {
    clear_has_timestamp_deltas_ms();
  }
  timestamp_deltas_ms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_deltas_ms);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.timestamp_deltas_ms)
}

// optional bytes marker_deltas = 102;
bool IncomingRtpPackets::has_marker_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IncomingRtpPackets::set_has_marker_deltas() {
  _has_bits_[0] |= 0x00000002u;
}
void IncomingRtpPackets::clear_has_marker_deltas() {
  _has_bits_[0] &= ~0x00000002u;
}
void IncomingRtpPackets::clear_marker_deltas() {
  marker_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_marker_deltas();
}
const ::std::string& IncomingRtpPackets::marker_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
  return marker_deltas_.GetNoArena();
}
void IncomingRtpPackets::set_marker_deltas(const ::std::string& value) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
#if LANG_CXX11
void IncomingRtpPackets::set_marker_deltas(::std::string&& value) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
#endif
void IncomingRtpPackets::set_marker_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
void IncomingRtpPackets::set_marker_deltas(const void* value, size_t size) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
::std::string* IncomingRtpPackets::mutable_marker_deltas() {
  set_has_marker_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
  return marker_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtpPackets::release_marker_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
  clear_has_marker_deltas();
  return marker_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtpPackets::set_allocated_marker_deltas(::std::string* marker_deltas) {
  if (marker_deltas != NULL) {
    set_has_marker_deltas();
  } else {
    clear_has_marker_deltas();
  }
  marker_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marker_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}

// optional bytes payload_type_deltas = 103;
bool IncomingRtpPackets::has_payload_type_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IncomingRtpPackets::set_has_payload_type_deltas() {
  _has_bits_[0] |= 0x00000004u;
}
void IncomingRtpPackets::clear_has_payload_type_deltas() {
  _has_bits_[0] &= ~0x00000004u;
}
void IncomingRtpPackets::clear_payload_type_deltas() {
  payload_type_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_type_deltas();
}
const ::std::string& IncomingRtpPackets::payload_type_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.GetNoArena();
}
void IncomingRtpPackets::set_payload_type_deltas(const ::std::string& value) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
#if LANG_CXX11
void IncomingRtpPackets::set_payload_type_deltas(::std::string&& value) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
#endif
void IncomingRtpPackets::set_payload_type_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
void IncomingRtpPackets::set_payload_type_deltas(const void* value, size_t size) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
::std::string* IncomingRtpPackets::mutable_payload_type_deltas() {
  set_has_payload_type_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtpPackets::release_payload_type_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
  clear_has_payload_type_deltas();
  return payload_type_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtpPackets::set_allocated_payload_type_deltas(::std::string* payload_type_deltas) {
  if (payload_type_deltas != NULL) {
    set_has_payload_type_deltas();
  } else {
    clear_has_payload_type_deltas();
  }
  payload_type_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_type_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}

// optional bytes sequence_number_deltas = 104;
bool IncomingRtpPackets::has_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IncomingRtpPackets::set_has_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000008u;
}
void IncomingRtpPackets::clear_has_sequence_number_deltas() {
  _has_bits_[0] &= ~0x00000008u;
}
void IncomingRtpPackets::clear_sequence_number_deltas() {
  sequence_number_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sequence_number_deltas();
}
const ::std::string& IncomingRtpPackets::sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.GetNoArena();
}
void IncomingRtpPackets::set_sequence_number_deltas(const ::std::string& value) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
#if LANG_CXX11
void IncomingRtpPackets::set_sequence_number_deltas(::std::string&& value) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
#endif
void IncomingRtpPackets::set_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
void IncomingRtpPackets::set_sequence_number_deltas(const void* value, size_t size) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
::std::string* IncomingRtpPackets::mutable_sequence_number_deltas() {
  set_has_sequence_number_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtpPackets::release_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
  clear_has_sequence_number_deltas();
  return sequence_number_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtpPackets::set_allocated_sequence_number_deltas(::std::string* sequence_number_deltas) {
  if (sequence_number_deltas != NULL) {
    set_has_sequence_number_deltas();
  } else {
    clear_has_sequence_number_deltas();
  }
  sequence_number_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}

// optional bytes rtp_timestamp_deltas = 105;
bool IncomingRtpPackets::has_rtp_timestamp_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IncomingRtpPackets::set_has_rtp_timestamp_deltas() {
  _has_bits_[0] |= 0x00000010u;
}
void IncomingRtpPackets::clear_has_rtp_timestamp_deltas() {
  _has_bits_[0] &= ~0x00000010u;
}
void IncomingRtpPackets::clear_rtp_timestamp_deltas() {
  rtp_timestamp_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rtp_timestamp_deltas();
}
const ::std::string& IncomingRtpPackets::rtp_timestamp_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.GetNoArena();
}
void IncomingRtpPackets::set_rtp_timestamp_deltas(const ::std::string& value) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
#if LANG_CXX11
void IncomingRtpPackets::set_rtp_timestamp_deltas(::std::string&& value) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
#endif
void IncomingRtpPackets::set_rtp_timestamp_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
void IncomingRtpPackets::set_rtp_timestamp_deltas(const void* value, size_t size) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
::std::string* IncomingRtpPackets::mutable_rtp_timestamp_deltas() {
  set_has_rtp_timestamp_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtpPackets::release_rtp_timestamp_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
  clear_has_rtp_timestamp_deltas();
  return rtp_timestamp_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtpPackets::set_allocated_rtp_timestamp_deltas(::std::string* rtp_timestamp_deltas) {
  if (rtp_timestamp_deltas != NULL) {
    set_has_rtp_timestamp_deltas();
  } else {
    clear_has_rtp_timestamp_deltas();
  }
  rtp_timestamp_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtp_timestamp_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}

// optional bytes ssrc_deltas = 106;
bool IncomingRtpPackets::has_ssrc_deltas() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IncomingRtpPackets::set_has_ssrc_deltas() {
  _has_bits_[0] |= 0x00000020u;
}
void IncomingRtpPackets::clear_has_ssrc_deltas() {
  _has_bits_[0] &= ~0x00000020u;
}
void IncomingRtpPackets::clear_ssrc_deltas() {
  ssrc_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ssrc_deltas();
}
const ::std::string& IncomingRtpPackets::ssrc_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.GetNoArena();
}
void IncomingRtpPackets::set_ssrc_deltas(const ::std::string& value) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
#if LANG_CXX11
void IncomingRtpPackets::set_ssrc_deltas(::std::string&& value) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
#endif
void IncomingRtpPackets::set_ssrc_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
void IncomingRtpPackets::set_ssrc_deltas(const void* value, size_t size) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
::std::string* IncomingRtpPackets::mutable_ssrc_deltas() {
  set_has_ssrc_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtpPackets::release_ssrc_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
  clear_has_ssrc_deltas();
  return ssrc_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtpPackets::set_allocated_ssrc_deltas(::std::string* ssrc_deltas) {
  if (ssrc_deltas != NULL) {
    set_has_ssrc_deltas();
  } else {
    clear_has_ssrc_deltas();
  }
  ssrc_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssrc_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}

// optional bytes packet_size_deltas = 107;
bool IncomingRtpPackets::has_packet_size_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IncomingRtpPackets::set_has_packet_size_deltas() {
  _has_bits_[0] |= 0x00000040u;
}
void IncomingRtpPackets::clear_has_packet_size_deltas() {
  _has_bits_[0] &= ~0x00000040u;
}
void IncomingRtpPackets::clear_packet_size_deltas() {
  packet_size_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packet_size_deltas();
}
const ::std::string& IncomingRtpPackets::packet_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.packet_size_deltas)
  return packet_size_deltas_.GetNoArena();
}
void IncomingRtpPackets::set_packet_size_deltas(const ::std::string& value) {
  set_has_packet_size_deltas();
  packet_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.packet_size_deltas)
}
#if LANG_CXX11
void IncomingRtpPackets::set_packet_size_deltas(::std::string&& value) {
  set_has_packet_size_deltas();
  packet_size_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.packet_size_deltas)
}
#endif
void IncomingRtpPackets::set_packet_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packet_size_deltas();
  packet_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.packet_size_deltas)
}
void IncomingRtpPackets::set_packet_size_deltas(const void* value, size_t size) {
  set_has_packet_size_deltas();
  packet_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.packet_size_deltas)
}
::std::string* IncomingRtpPackets::mutable_packet_size_deltas() {
  set_has_packet_size_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.packet_size_deltas)
  return packet_size_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtpPackets::release_packet_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.packet_size_deltas)
  clear_has_packet_size_deltas();
  return packet_size_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtpPackets::set_allocated_packet_size_deltas(::std::string* packet_size_deltas) {
  if (packet_size_deltas != NULL) {
    set_has_packet_size_deltas();
  } else {
    clear_has_packet_size_deltas();
  }
  packet_size_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packet_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.packet_size_deltas)
}

// optional bytes transmission_time_offset_deltas = 108;
bool IncomingRtpPackets::has_transmission_time_offset_deltas() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IncomingRtpPackets::set_has_transmission_time_offset_deltas() {
  _has_bits_[0] |= 0x00000080u;
}
void IncomingRtpPackets::clear_has_transmission_time_offset_deltas() {
  _has_bits_[0] &= ~0x00000080u;
}
void IncomingRtpPackets::clear_transmission_time_offset_deltas() {
  transmission_time_offset_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transmission_time_offset_deltas();
}
const ::std::string& IncomingRtpPackets::transmission_time_offset_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.GetNoArena();
}
void IncomingRtpPackets::set_transmission_time_offset_deltas(const ::std::string& value) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
#if LANG_CXX11
void IncomingRtpPackets::set_transmission_time_offset_deltas(::std::string&& value) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
#endif
void IncomingRtpPackets::set_transmission_time_offset_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
void IncomingRtpPackets::set_transmission_time_offset_deltas(const void* value, size_t size) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
::std::string* IncomingRtpPackets::mutable_transmission_time_offset_deltas() {
  set_has_transmission_time_offset_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtpPackets::release_transmission_time_offset_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
  clear_has_transmission_time_offset_deltas();
  return transmission_time_offset_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtpPackets::set_allocated_transmission_time_offset_deltas(::std::string* transmission_time_offset_deltas) {
  if (transmission_time_offset_deltas != NULL) {
    set_has_transmission_time_offset_deltas();
  } else {
    clear_has_transmission_time_offset_deltas();
  }
  transmission_time_offset_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transmission_time_offset_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}

// optional bytes absolute_send_time_deltas = 109;
bool IncomingRtpPackets::has_absolute_send_time_deltas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void IncomingRtpPackets::set_has_absolute_send_time_deltas() {
  _has_bits_[0] |= 0x00000100u;
}
void IncomingRtpPackets::clear_has_absolute_send_time_deltas() {
  _has_bits_[0] &= ~0x00000100u;
}
void IncomingRtpPackets::clear_absolute_send_time_deltas() {
  absolute_send_time_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_absolute_send_time_deltas();
}
const ::std::string& IncomingRtpPackets::absolute_send_time_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.GetNoArena();
}
void IncomingRtpPackets::set_absolute_send_time_deltas(const ::std::string& value) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
#if LANG_CXX11
void IncomingRtpPackets::set_absolute_send_time_deltas(::std::string&& value) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
#endif
void IncomingRtpPackets::set_absolute_send_time_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
void IncomingRtpPackets::set_absolute_send_time_deltas(const void* value, size_t size) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
::std::string* IncomingRtpPackets::mutable_absolute_send_time_deltas() {
  set_has_absolute_send_time_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtpPackets::release_absolute_send_time_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
  clear_has_absolute_send_time_deltas();
  return absolute_send_time_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtpPackets::set_allocated_absolute_send_time_deltas(::std::string* absolute_send_time_deltas) {
  if (absolute_send_time_deltas != NULL) {
    set_has_absolute_send_time_deltas();
  } else {
    clear_has_absolute_send_time_deltas();
  }
  absolute_send_time_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), absolute_send_time_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}

// optional bytes transport_sequence_number_deltas = 110;
bool IncomingRtpPackets::has_transport_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void IncomingRtpPackets::set_has_transport_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000200u;
}
void IncomingRtpPackets::clear_has_transport_sequence_number_deltas() {
  _has_bits_[0] &= ~0x00000200u;
}
void IncomingRtpPackets::clear_transport_sequence_number_deltas() {
  transport_sequence_number_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transport_sequence_number_deltas();
}
const ::std::string& IncomingRtpPackets::transport_sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.GetNoArena();
}
void IncomingRtpPackets::set_transport_sequence_number_deltas(const ::std::string& value) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
#if LANG_CXX11
void IncomingRtpPackets::set_transport_sequence_number_deltas(::std::string&& value) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
#endif
void IncomingRtpPackets::set_transport_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
void IncomingRtpPackets::set_transport_sequence_number_deltas(const void* value, size_t size) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
::std::string* IncomingRtpPackets::mutable_transport_sequence_number_deltas() {
  set_has_transport_sequence_number_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtpPackets::release_transport_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
  clear_has_transport_sequence_number_deltas();
  return transport_sequence_number_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtpPackets::set_allocated_transport_sequence_number_deltas(::std::string* transport_sequence_number_deltas) {
  if (transport_sequence_number_deltas != NULL) {
    set_has_transport_sequence_number_deltas();
  } else {
    clear_has_transport_sequence_number_deltas();
  }
  transport_sequence_number_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transport_sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}

// optional bytes audio_level_deltas = 111;
bool IncomingRtpPackets::has_audio_level_deltas() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void IncomingRtpPackets::set_has_audio_level_deltas() {
  _has_bits_[0] |= 0x00000400u;
}
void IncomingRtpPackets::clear_has_audio_level_deltas() {
  _has_bits_[0] &= ~0x00000400u;
}
void IncomingRtpPackets::clear_audio_level_deltas() {
  audio_level_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_level_deltas();
}
const ::std::string& IncomingRtpPackets::audio_level_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
  return audio_level_deltas_.GetNoArena();
}
void IncomingRtpPackets::set_audio_level_deltas(const ::std::string& value) {
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
#if LANG_CXX11
void IncomingRtpPackets::set_audio_level_deltas(::std::string&& value) {
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
#endif
void IncomingRtpPackets::set_audio_level_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
void IncomingRtpPackets::set_audio_level_deltas(const void* value, size_t size) {
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
::std::string* IncomingRtpPackets::mutable_audio_level_deltas() {
  set_has_audio_level_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
  return audio_level_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtpPackets::release_audio_level_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
  clear_has_audio_level_deltas();
  return audio_level_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtpPackets::set_allocated_audio_level_deltas(::std::string* audio_level_deltas) {
  if (audio_level_deltas != NULL) {
    set_has_audio_level_deltas();
  } else {
    clear_has_audio_level_deltas();
  }
  audio_level_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_level_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutgoingRtpPackets::kTimestampMsFieldNumber;
const int OutgoingRtpPackets::kMarkerFieldNumber;
const int OutgoingRtpPackets::kPayloadTypeFieldNumber;
const int OutgoingRtpPackets::kSequenceNumberFieldNumber;
const int OutgoingRtpPackets::kRtpTimestampFieldNumber;
const int OutgoingRtpPackets::kSsrcFieldNumber;
const int OutgoingRtpPackets::kPacketSizeFieldNumber;
const int OutgoingRtpPackets::kTransmissionTimeOffsetFieldNumber;
const int OutgoingRtpPackets::kAbsoluteSendTimeFieldNumber;
const int OutgoingRtpPackets::kTransportSequenceNumberFieldNumber;
const int OutgoingRtpPackets::kAudioLevelFieldNumber;
const int OutgoingRtpPackets::kTimestampDeltasMsFieldNumber;
const int OutgoingRtpPackets::kMarkerDeltasFieldNumber;
const int OutgoingRtpPackets::kPayloadTypeDeltasFieldNumber;
const int OutgoingRtpPackets::kSequenceNumberDeltasFieldNumber;
const int OutgoingRtpPackets::kRtpTimestampDeltasFieldNumber;
const int OutgoingRtpPackets::kSsrcDeltasFieldNumber;
const int OutgoingRtpPackets::kPacketSizeDeltasFieldNumber;
const int OutgoingRtpPackets::kProbeClusterIdDeltasFieldNumber;
const int OutgoingRtpPackets::kTransmissionTimeOffsetDeltasFieldNumber;
const int OutgoingRtpPackets::kAbsoluteSendTimeDeltasFieldNumber;
const int OutgoingRtpPackets::kTransportSequenceNumberDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutgoingRtpPackets::OutgoingRtpPackets()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.OutgoingRtpPackets)
}
OutgoingRtpPackets::OutgoingRtpPackets(const OutgoingRtpPackets& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_deltas_ms()) {
    timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
  }
  marker_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_marker_deltas()) {
    marker_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
  }
  payload_type_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_type_deltas()) {
    payload_type_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
  }
  sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_number_deltas()) {
    sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
  }
  rtp_timestamp_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rtp_timestamp_deltas()) {
    rtp_timestamp_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
  }
  ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ssrc_deltas()) {
    ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
  }
  packet_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packet_size_deltas()) {
    packet_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_size_deltas_);
  }
  probe_cluster_id_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_probe_cluster_id_deltas()) {
    probe_cluster_id_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.probe_cluster_id_deltas_);
  }
  transmission_time_offset_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transmission_time_offset_deltas()) {
    transmission_time_offset_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
  }
  absolute_send_time_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_absolute_send_time_deltas()) {
    absolute_send_time_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
  }
  transport_sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transport_sequence_number_deltas()) {
    transport_sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_level_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.OutgoingRtpPackets)
}

void OutgoingRtpPackets::SharedCtor() {
  _cached_size_ = 0;
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  probe_cluster_id_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_level_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
}

OutgoingRtpPackets::~OutgoingRtpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.OutgoingRtpPackets)
  SharedDtor();
}

void OutgoingRtpPackets::SharedDtor() {
  timestamp_deltas_ms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_size_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  probe_cluster_id_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OutgoingRtpPackets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OutgoingRtpPackets& OutgoingRtpPackets::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

OutgoingRtpPackets* OutgoingRtpPackets::New(::google::protobuf::Arena* arena) const {
  OutgoingRtpPackets* n = new OutgoingRtpPackets;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutgoingRtpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.OutgoingRtpPackets)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_timestamp_deltas_ms()) {
      GOOGLE_DCHECK(!timestamp_deltas_ms_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timestamp_deltas_ms_.UnsafeRawStringPointer())->clear();
    }
    if (has_marker_deltas()) {
      GOOGLE_DCHECK(!marker_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*marker_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_payload_type_deltas()) {
      GOOGLE_DCHECK(!payload_type_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*payload_type_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_sequence_number_deltas()) {
      GOOGLE_DCHECK(!sequence_number_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sequence_number_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_rtp_timestamp_deltas()) {
      GOOGLE_DCHECK(!rtp_timestamp_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rtp_timestamp_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_ssrc_deltas()) {
      GOOGLE_DCHECK(!ssrc_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ssrc_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_packet_size_deltas()) {
      GOOGLE_DCHECK(!packet_size_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*packet_size_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_probe_cluster_id_deltas()) {
      GOOGLE_DCHECK(!probe_cluster_id_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*probe_cluster_id_deltas_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_transmission_time_offset_deltas()) {
      GOOGLE_DCHECK(!transmission_time_offset_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transmission_time_offset_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_absolute_send_time_deltas()) {
      GOOGLE_DCHECK(!absolute_send_time_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*absolute_send_time_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_transport_sequence_number_deltas()) {
      GOOGLE_DCHECK(!transport_sequence_number_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transport_sequence_number_deltas_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 63488u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtp_timestamp_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtp_timestamp_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&ssrc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_level_) -
        reinterpret_cast<char*>(&ssrc_)) + sizeof(audio_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OutgoingRtpPackets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.OutgoingRtpPackets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool marker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_marker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &marker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_payload_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtp_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_rtp_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ssrc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packet_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_packet_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transmission_time_offset = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_transmission_time_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmission_time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 absolute_send_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_absolute_send_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absolute_send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transport_sequence_number = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_transport_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transport_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 audio_level = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_audio_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_deltas_ms = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_deltas_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes marker_deltas = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marker_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_type_deltas = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_type_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sequence_number_deltas = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rtp_timestamp_deltas = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rtp_timestamp_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ssrc_deltas = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ssrc_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packet_size_deltas = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes probe_cluster_id_deltas = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_probe_cluster_id_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transmission_time_offset_deltas = 109;
      case 109: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmission_time_offset_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes absolute_send_time_deltas = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_absolute_send_time_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transport_sequence_number_deltas = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transport_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.OutgoingRtpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.OutgoingRtpPackets)
  return false;
#undef DO_
}

void OutgoingRtpPackets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.OutgoingRtpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool marker = 2;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->marker(), output);
  }

  // optional uint32 payload_type = 3;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->payload_type(), output);
  }

  // optional uint32 sequence_number = 4;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sequence_number(), output);
  }

  // optional fixed32 rtp_timestamp = 5;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtp_timestamp(), output);
  }

  // optional fixed32 ssrc = 6;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->ssrc(), output);
  }

  // optional uint32 packet_size = 8;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->packet_size(), output);
  }

  // optional int32 transmission_time_offset = 9;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->transmission_time_offset(), output);
  }

  // optional uint32 absolute_send_time = 10;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->absolute_send_time(), output);
  }

  // optional uint32 transport_sequence_number = 11;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->transport_sequence_number(), output);
  }

  // optional uint32 audio_level = 12;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->audio_level(), output);
  }

  // optional bytes timestamp_deltas_ms = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_deltas_ms(), output);
  }

  // optional bytes marker_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->marker_deltas(), output);
  }

  // optional bytes payload_type_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->payload_type_deltas(), output);
  }

  // optional bytes sequence_number_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->sequence_number_deltas(), output);
  }

  // optional bytes rtp_timestamp_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      105, this->rtp_timestamp_deltas(), output);
  }

  // optional bytes ssrc_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      106, this->ssrc_deltas(), output);
  }

  // optional bytes packet_size_deltas = 107;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      107, this->packet_size_deltas(), output);
  }

  // optional bytes probe_cluster_id_deltas = 108;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      108, this->probe_cluster_id_deltas(), output);
  }

  // optional bytes transmission_time_offset_deltas = 109;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      109, this->transmission_time_offset_deltas(), output);
  }

  // optional bytes absolute_send_time_deltas = 110;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      110, this->absolute_send_time_deltas(), output);
  }

  // optional bytes transport_sequence_number_deltas = 111;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      111, this->transport_sequence_number_deltas(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.OutgoingRtpPackets)
}

size_t OutgoingRtpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.OutgoingRtpPackets)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes timestamp_deltas_ms = 101;
    if (has_timestamp_deltas_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_deltas_ms());
    }

    // optional bytes marker_deltas = 102;
    if (has_marker_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marker_deltas());
    }

    // optional bytes payload_type_deltas = 103;
    if (has_payload_type_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_type_deltas());
    }

    // optional bytes sequence_number_deltas = 104;
    if (has_sequence_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sequence_number_deltas());
    }

    // optional bytes rtp_timestamp_deltas = 105;
    if (has_rtp_timestamp_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rtp_timestamp_deltas());
    }

    // optional bytes ssrc_deltas = 106;
    if (has_ssrc_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ssrc_deltas());
    }

    // optional bytes packet_size_deltas = 107;
    if (has_packet_size_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packet_size_deltas());
    }

    // optional bytes probe_cluster_id_deltas = 108;
    if (has_probe_cluster_id_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->probe_cluster_id_deltas());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bytes transmission_time_offset_deltas = 109;
    if (has_transmission_time_offset_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmission_time_offset_deltas());
    }

    // optional bytes absolute_send_time_deltas = 110;
    if (has_absolute_send_time_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->absolute_send_time_deltas());
    }

    // optional bytes transport_sequence_number_deltas = 111;
    if (has_transport_sequence_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transport_sequence_number_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional bool marker = 2;
    if (has_marker()) {
      total_size += 1 + 1;
    }

    // optional uint32 payload_type = 3;
    if (has_payload_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload_type());
    }

    // optional uint32 sequence_number = 4;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_number());
    }

    // optional fixed32 rtp_timestamp = 5;
    if (has_rtp_timestamp()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional fixed32 ssrc = 6;
    if (has_ssrc()) {
      total_size += 1 + 4;
    }

    // optional uint32 packet_size = 8;
    if (has_packet_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_size());
    }

    // optional int32 transmission_time_offset = 9;
    if (has_transmission_time_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmission_time_offset());
    }

    // optional uint32 absolute_send_time = 10;
    if (has_absolute_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->absolute_send_time());
    }

    // optional uint32 transport_sequence_number = 11;
    if (has_transport_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transport_sequence_number());
    }

    // optional uint32 audio_level = 12;
    if (has_audio_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutgoingRtpPackets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OutgoingRtpPackets*>(&from));
}

void OutgoingRtpPackets::MergeFrom(const OutgoingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.OutgoingRtpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_deltas_ms();
      timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_marker_deltas();
      marker_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_payload_type_deltas();
      payload_type_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sequence_number_deltas();
      sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_rtp_timestamp_deltas();
      rtp_timestamp_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_ssrc_deltas();
      ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_packet_size_deltas();
      packet_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_size_deltas_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_probe_cluster_id_deltas();
      probe_cluster_id_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.probe_cluster_id_deltas_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_transmission_time_offset_deltas();
      transmission_time_offset_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_absolute_send_time_deltas();
      absolute_send_time_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_transport_sequence_number_deltas();
      transport_sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000800u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00001000u) {
      marker_ = from.marker_;
    }
    if (cached_has_bits & 0x00002000u) {
      payload_type_ = from.payload_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00008000u) {
      rtp_timestamp_ = from.rtp_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      ssrc_ = from.ssrc_;
    }
    if (cached_has_bits & 0x00020000u) {
      packet_size_ = from.packet_size_;
    }
    if (cached_has_bits & 0x00040000u) {
      transmission_time_offset_ = from.transmission_time_offset_;
    }
    if (cached_has_bits & 0x00080000u) {
      absolute_send_time_ = from.absolute_send_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      transport_sequence_number_ = from.transport_sequence_number_;
    }
    if (cached_has_bits & 0x00200000u) {
      audio_level_ = from.audio_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OutgoingRtpPackets::CopyFrom(const OutgoingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.OutgoingRtpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingRtpPackets::IsInitialized() const {
  return true;
}

void OutgoingRtpPackets::Swap(OutgoingRtpPackets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutgoingRtpPackets::InternalSwap(OutgoingRtpPackets* other) {
  timestamp_deltas_ms_.Swap(&other->timestamp_deltas_ms_);
  marker_deltas_.Swap(&other->marker_deltas_);
  payload_type_deltas_.Swap(&other->payload_type_deltas_);
  sequence_number_deltas_.Swap(&other->sequence_number_deltas_);
  rtp_timestamp_deltas_.Swap(&other->rtp_timestamp_deltas_);
  ssrc_deltas_.Swap(&other->ssrc_deltas_);
  packet_size_deltas_.Swap(&other->packet_size_deltas_);
  probe_cluster_id_deltas_.Swap(&other->probe_cluster_id_deltas_);
  transmission_time_offset_deltas_.Swap(&other->transmission_time_offset_deltas_);
  absolute_send_time_deltas_.Swap(&other->absolute_send_time_deltas_);
  transport_sequence_number_deltas_.Swap(&other->transport_sequence_number_deltas_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(marker_, other->marker_);
  std::swap(payload_type_, other->payload_type_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(rtp_timestamp_, other->rtp_timestamp_);
  std::swap(ssrc_, other->ssrc_);
  std::swap(packet_size_, other->packet_size_);
  std::swap(transmission_time_offset_, other->transmission_time_offset_);
  std::swap(absolute_send_time_, other->absolute_send_time_);
  std::swap(transport_sequence_number_, other->transport_sequence_number_);
  std::swap(audio_level_, other->audio_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OutgoingRtpPackets::GetTypeName() const {
  return "webrtc.rtclog2.OutgoingRtpPackets";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OutgoingRtpPackets

// optional int64 timestamp_ms = 1;
bool OutgoingRtpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OutgoingRtpPackets::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000800u;
}
void OutgoingRtpPackets::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000800u;
}
void OutgoingRtpPackets::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 OutgoingRtpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms)
  return timestamp_ms_;
}
void OutgoingRtpPackets::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms)
}

// optional bool marker = 2;
bool OutgoingRtpPackets::has_marker() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OutgoingRtpPackets::set_has_marker() {
  _has_bits_[0] |= 0x00001000u;
}
void OutgoingRtpPackets::clear_has_marker() {
  _has_bits_[0] &= ~0x00001000u;
}
void OutgoingRtpPackets::clear_marker() {
  marker_ = false;
  clear_has_marker();
}
bool OutgoingRtpPackets::marker() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.marker)
  return marker_;
}
void OutgoingRtpPackets::set_marker(bool value) {
  set_has_marker();
  marker_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.marker)
}

// optional uint32 payload_type = 3;
bool OutgoingRtpPackets::has_payload_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void OutgoingRtpPackets::set_has_payload_type() {
  _has_bits_[0] |= 0x00002000u;
}
void OutgoingRtpPackets::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00002000u;
}
void OutgoingRtpPackets::clear_payload_type() {
  payload_type_ = 0u;
  clear_has_payload_type();
}
::google::protobuf::uint32 OutgoingRtpPackets::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.payload_type)
  return payload_type_;
}
void OutgoingRtpPackets::set_payload_type(::google::protobuf::uint32 value) {
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.payload_type)
}

// optional uint32 sequence_number = 4;
bool OutgoingRtpPackets::has_sequence_number() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void OutgoingRtpPackets::set_has_sequence_number() {
  _has_bits_[0] |= 0x00004000u;
}
void OutgoingRtpPackets::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00004000u;
}
void OutgoingRtpPackets::clear_sequence_number() {
  sequence_number_ = 0u;
  clear_has_sequence_number();
}
::google::protobuf::uint32 OutgoingRtpPackets::sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.sequence_number)
  return sequence_number_;
}
void OutgoingRtpPackets::set_sequence_number(::google::protobuf::uint32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.sequence_number)
}

// optional fixed32 rtp_timestamp = 5;
bool OutgoingRtpPackets::has_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void OutgoingRtpPackets::set_has_rtp_timestamp() {
  _has_bits_[0] |= 0x00008000u;
}
void OutgoingRtpPackets::clear_has_rtp_timestamp() {
  _has_bits_[0] &= ~0x00008000u;
}
void OutgoingRtpPackets::clear_rtp_timestamp() {
  rtp_timestamp_ = 0u;
  clear_has_rtp_timestamp();
}
::google::protobuf::uint32 OutgoingRtpPackets::rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp)
  return rtp_timestamp_;
}
void OutgoingRtpPackets::set_rtp_timestamp(::google::protobuf::uint32 value) {
  set_has_rtp_timestamp();
  rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp)
}

// optional fixed32 ssrc = 6;
bool OutgoingRtpPackets::has_ssrc() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void OutgoingRtpPackets::set_has_ssrc() {
  _has_bits_[0] |= 0x00010000u;
}
void OutgoingRtpPackets::clear_has_ssrc() {
  _has_bits_[0] &= ~0x00010000u;
}
void OutgoingRtpPackets::clear_ssrc() {
  ssrc_ = 0u;
  clear_has_ssrc();
}
::google::protobuf::uint32 OutgoingRtpPackets::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.ssrc)
  return ssrc_;
}
void OutgoingRtpPackets::set_ssrc(::google::protobuf::uint32 value) {
  set_has_ssrc();
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.ssrc)
}

// optional uint32 packet_size = 8;
bool OutgoingRtpPackets::has_packet_size() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void OutgoingRtpPackets::set_has_packet_size() {
  _has_bits_[0] |= 0x00020000u;
}
void OutgoingRtpPackets::clear_has_packet_size() {
  _has_bits_[0] &= ~0x00020000u;
}
void OutgoingRtpPackets::clear_packet_size() {
  packet_size_ = 0u;
  clear_has_packet_size();
}
::google::protobuf::uint32 OutgoingRtpPackets::packet_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.packet_size)
  return packet_size_;
}
void OutgoingRtpPackets::set_packet_size(::google::protobuf::uint32 value) {
  set_has_packet_size();
  packet_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.packet_size)
}

// optional int32 transmission_time_offset = 9;
bool OutgoingRtpPackets::has_transmission_time_offset() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void OutgoingRtpPackets::set_has_transmission_time_offset() {
  _has_bits_[0] |= 0x00040000u;
}
void OutgoingRtpPackets::clear_has_transmission_time_offset() {
  _has_bits_[0] &= ~0x00040000u;
}
void OutgoingRtpPackets::clear_transmission_time_offset() {
  transmission_time_offset_ = 0;
  clear_has_transmission_time_offset();
}
::google::protobuf::int32 OutgoingRtpPackets::transmission_time_offset() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset)
  return transmission_time_offset_;
}
void OutgoingRtpPackets::set_transmission_time_offset(::google::protobuf::int32 value) {
  set_has_transmission_time_offset();
  transmission_time_offset_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset)
}

// optional uint32 absolute_send_time = 10;
bool OutgoingRtpPackets::has_absolute_send_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void OutgoingRtpPackets::set_has_absolute_send_time() {
  _has_bits_[0] |= 0x00080000u;
}
void OutgoingRtpPackets::clear_has_absolute_send_time() {
  _has_bits_[0] &= ~0x00080000u;
}
void OutgoingRtpPackets::clear_absolute_send_time() {
  absolute_send_time_ = 0u;
  clear_has_absolute_send_time();
}
::google::protobuf::uint32 OutgoingRtpPackets::absolute_send_time() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time)
  return absolute_send_time_;
}
void OutgoingRtpPackets::set_absolute_send_time(::google::protobuf::uint32 value) {
  set_has_absolute_send_time();
  absolute_send_time_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time)
}

// optional uint32 transport_sequence_number = 11;
bool OutgoingRtpPackets::has_transport_sequence_number() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void OutgoingRtpPackets::set_has_transport_sequence_number() {
  _has_bits_[0] |= 0x00100000u;
}
void OutgoingRtpPackets::clear_has_transport_sequence_number() {
  _has_bits_[0] &= ~0x00100000u;
}
void OutgoingRtpPackets::clear_transport_sequence_number() {
  transport_sequence_number_ = 0u;
  clear_has_transport_sequence_number();
}
::google::protobuf::uint32 OutgoingRtpPackets::transport_sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number)
  return transport_sequence_number_;
}
void OutgoingRtpPackets::set_transport_sequence_number(::google::protobuf::uint32 value) {
  set_has_transport_sequence_number();
  transport_sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number)
}

// optional uint32 audio_level = 12;
bool OutgoingRtpPackets::has_audio_level() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void OutgoingRtpPackets::set_has_audio_level() {
  _has_bits_[0] |= 0x00200000u;
}
void OutgoingRtpPackets::clear_has_audio_level() {
  _has_bits_[0] &= ~0x00200000u;
}
void OutgoingRtpPackets::clear_audio_level() {
  audio_level_ = 0u;
  clear_has_audio_level();
}
::google::protobuf::uint32 OutgoingRtpPackets::audio_level() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.audio_level)
  return audio_level_;
}
void OutgoingRtpPackets::set_audio_level(::google::protobuf::uint32 value) {
  set_has_audio_level();
  audio_level_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.audio_level)
}

// optional bytes timestamp_deltas_ms = 101;
bool OutgoingRtpPackets::has_timestamp_deltas_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OutgoingRtpPackets::set_has_timestamp_deltas_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void OutgoingRtpPackets::clear_has_timestamp_deltas_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void OutgoingRtpPackets::clear_timestamp_deltas_ms() {
  timestamp_deltas_ms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_deltas_ms();
}
const ::std::string& OutgoingRtpPackets::timestamp_deltas_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.timestamp_deltas_ms)
  return timestamp_deltas_ms_.GetNoArena();
}
void OutgoingRtpPackets::set_timestamp_deltas_ms(const ::std::string& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.timestamp_deltas_ms)
}
#if LANG_CXX11
void OutgoingRtpPackets::set_timestamp_deltas_ms(::std::string&& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.timestamp_deltas_ms)
}
#endif
void OutgoingRtpPackets::set_timestamp_deltas_ms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.timestamp_deltas_ms)
}
void OutgoingRtpPackets::set_timestamp_deltas_ms(const void* value, size_t size) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.timestamp_deltas_ms)
}
::std::string* OutgoingRtpPackets::mutable_timestamp_deltas_ms() {
  set_has_timestamp_deltas_ms();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.timestamp_deltas_ms)
  return timestamp_deltas_ms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtpPackets::release_timestamp_deltas_ms() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.timestamp_deltas_ms)
  clear_has_timestamp_deltas_ms();
  return timestamp_deltas_ms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtpPackets::set_allocated_timestamp_deltas_ms(::std::string* timestamp_deltas_ms) {
  if (timestamp_deltas_ms != NULL) {
    set_has_timestamp_deltas_ms();
  } else {
    clear_has_timestamp_deltas_ms();
  }
  timestamp_deltas_ms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_deltas_ms);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.timestamp_deltas_ms)
}

// optional bytes marker_deltas = 102;
bool OutgoingRtpPackets::has_marker_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OutgoingRtpPackets::set_has_marker_deltas() {
  _has_bits_[0] |= 0x00000002u;
}
void OutgoingRtpPackets::clear_has_marker_deltas() {
  _has_bits_[0] &= ~0x00000002u;
}
void OutgoingRtpPackets::clear_marker_deltas() {
  marker_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_marker_deltas();
}
const ::std::string& OutgoingRtpPackets::marker_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
  return marker_deltas_.GetNoArena();
}
void OutgoingRtpPackets::set_marker_deltas(const ::std::string& value) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
#if LANG_CXX11
void OutgoingRtpPackets::set_marker_deltas(::std::string&& value) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
#endif
void OutgoingRtpPackets::set_marker_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
void OutgoingRtpPackets::set_marker_deltas(const void* value, size_t size) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
::std::string* OutgoingRtpPackets::mutable_marker_deltas() {
  set_has_marker_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
  return marker_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtpPackets::release_marker_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
  clear_has_marker_deltas();
  return marker_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtpPackets::set_allocated_marker_deltas(::std::string* marker_deltas) {
  if (marker_deltas != NULL) {
    set_has_marker_deltas();
  } else {
    clear_has_marker_deltas();
  }
  marker_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marker_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}

// optional bytes payload_type_deltas = 103;
bool OutgoingRtpPackets::has_payload_type_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OutgoingRtpPackets::set_has_payload_type_deltas() {
  _has_bits_[0] |= 0x00000004u;
}
void OutgoingRtpPackets::clear_has_payload_type_deltas() {
  _has_bits_[0] &= ~0x00000004u;
}
void OutgoingRtpPackets::clear_payload_type_deltas() {
  payload_type_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_type_deltas();
}
const ::std::string& OutgoingRtpPackets::payload_type_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.GetNoArena();
}
void OutgoingRtpPackets::set_payload_type_deltas(const ::std::string& value) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
#if LANG_CXX11
void OutgoingRtpPackets::set_payload_type_deltas(::std::string&& value) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
#endif
void OutgoingRtpPackets::set_payload_type_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
void OutgoingRtpPackets::set_payload_type_deltas(const void* value, size_t size) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
::std::string* OutgoingRtpPackets::mutable_payload_type_deltas() {
  set_has_payload_type_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtpPackets::release_payload_type_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
  clear_has_payload_type_deltas();
  return payload_type_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtpPackets::set_allocated_payload_type_deltas(::std::string* payload_type_deltas) {
  if (payload_type_deltas != NULL) {
    set_has_payload_type_deltas();
  } else {
    clear_has_payload_type_deltas();
  }
  payload_type_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_type_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}

// optional bytes sequence_number_deltas = 104;
bool OutgoingRtpPackets::has_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OutgoingRtpPackets::set_has_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000008u;
}
void OutgoingRtpPackets::clear_has_sequence_number_deltas() {
  _has_bits_[0] &= ~0x00000008u;
}
void OutgoingRtpPackets::clear_sequence_number_deltas() {
  sequence_number_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sequence_number_deltas();
}
const ::std::string& OutgoingRtpPackets::sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.GetNoArena();
}
void OutgoingRtpPackets::set_sequence_number_deltas(const ::std::string& value) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
#if LANG_CXX11
void OutgoingRtpPackets::set_sequence_number_deltas(::std::string&& value) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
#endif
void OutgoingRtpPackets::set_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
void OutgoingRtpPackets::set_sequence_number_deltas(const void* value, size_t size) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
::std::string* OutgoingRtpPackets::mutable_sequence_number_deltas() {
  set_has_sequence_number_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtpPackets::release_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
  clear_has_sequence_number_deltas();
  return sequence_number_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtpPackets::set_allocated_sequence_number_deltas(::std::string* sequence_number_deltas) {
  if (sequence_number_deltas != NULL) {
    set_has_sequence_number_deltas();
  } else {
    clear_has_sequence_number_deltas();
  }
  sequence_number_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}

// optional bytes rtp_timestamp_deltas = 105;
bool OutgoingRtpPackets::has_rtp_timestamp_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OutgoingRtpPackets::set_has_rtp_timestamp_deltas() {
  _has_bits_[0] |= 0x00000010u;
}
void OutgoingRtpPackets::clear_has_rtp_timestamp_deltas() {
  _has_bits_[0] &= ~0x00000010u;
}
void OutgoingRtpPackets::clear_rtp_timestamp_deltas() {
  rtp_timestamp_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rtp_timestamp_deltas();
}
const ::std::string& OutgoingRtpPackets::rtp_timestamp_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.GetNoArena();
}
void OutgoingRtpPackets::set_rtp_timestamp_deltas(const ::std::string& value) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
#if LANG_CXX11
void OutgoingRtpPackets::set_rtp_timestamp_deltas(::std::string&& value) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
#endif
void OutgoingRtpPackets::set_rtp_timestamp_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
void OutgoingRtpPackets::set_rtp_timestamp_deltas(const void* value, size_t size) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
::std::string* OutgoingRtpPackets::mutable_rtp_timestamp_deltas() {
  set_has_rtp_timestamp_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtpPackets::release_rtp_timestamp_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
  clear_has_rtp_timestamp_deltas();
  return rtp_timestamp_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtpPackets::set_allocated_rtp_timestamp_deltas(::std::string* rtp_timestamp_deltas) {
  if (rtp_timestamp_deltas != NULL) {
    set_has_rtp_timestamp_deltas();
  } else {
    clear_has_rtp_timestamp_deltas();
  }
  rtp_timestamp_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtp_timestamp_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}

// optional bytes ssrc_deltas = 106;
bool OutgoingRtpPackets::has_ssrc_deltas() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OutgoingRtpPackets::set_has_ssrc_deltas() {
  _has_bits_[0] |= 0x00000020u;
}
void OutgoingRtpPackets::clear_has_ssrc_deltas() {
  _has_bits_[0] &= ~0x00000020u;
}
void OutgoingRtpPackets::clear_ssrc_deltas() {
  ssrc_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ssrc_deltas();
}
const ::std::string& OutgoingRtpPackets::ssrc_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.GetNoArena();
}
void OutgoingRtpPackets::set_ssrc_deltas(const ::std::string& value) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
#if LANG_CXX11
void OutgoingRtpPackets::set_ssrc_deltas(::std::string&& value) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
#endif
void OutgoingRtpPackets::set_ssrc_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
void OutgoingRtpPackets::set_ssrc_deltas(const void* value, size_t size) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
::std::string* OutgoingRtpPackets::mutable_ssrc_deltas() {
  set_has_ssrc_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtpPackets::release_ssrc_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
  clear_has_ssrc_deltas();
  return ssrc_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtpPackets::set_allocated_ssrc_deltas(::std::string* ssrc_deltas) {
  if (ssrc_deltas != NULL) {
    set_has_ssrc_deltas();
  } else {
    clear_has_ssrc_deltas();
  }
  ssrc_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssrc_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}

// optional bytes packet_size_deltas = 107;
bool OutgoingRtpPackets::has_packet_size_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OutgoingRtpPackets::set_has_packet_size_deltas() {
  _has_bits_[0] |= 0x00000040u;
}
void OutgoingRtpPackets::clear_has_packet_size_deltas() {
  _has_bits_[0] &= ~0x00000040u;
}
void OutgoingRtpPackets::clear_packet_size_deltas() {
  packet_size_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packet_size_deltas();
}
const ::std::string& OutgoingRtpPackets::packet_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.packet_size_deltas)
  return packet_size_deltas_.GetNoArena();
}
void OutgoingRtpPackets::set_packet_size_deltas(const ::std::string& value) {
  set_has_packet_size_deltas();
  packet_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.packet_size_deltas)
}
#if LANG_CXX11
void OutgoingRtpPackets::set_packet_size_deltas(::std::string&& value) {
  set_has_packet_size_deltas();
  packet_size_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.packet_size_deltas)
}
#endif
void OutgoingRtpPackets::set_packet_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packet_size_deltas();
  packet_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.packet_size_deltas)
}
void OutgoingRtpPackets::set_packet_size_deltas(const void* value, size_t size) {
  set_has_packet_size_deltas();
  packet_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.packet_size_deltas)
}
::std::string* OutgoingRtpPackets::mutable_packet_size_deltas() {
  set_has_packet_size_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.packet_size_deltas)
  return packet_size_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtpPackets::release_packet_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.packet_size_deltas)
  clear_has_packet_size_deltas();
  return packet_size_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtpPackets::set_allocated_packet_size_deltas(::std::string* packet_size_deltas) {
  if (packet_size_deltas != NULL) {
    set_has_packet_size_deltas();
  } else {
    clear_has_packet_size_deltas();
  }
  packet_size_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packet_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.packet_size_deltas)
}

// optional bytes probe_cluster_id_deltas = 108;
bool OutgoingRtpPackets::has_probe_cluster_id_deltas() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OutgoingRtpPackets::set_has_probe_cluster_id_deltas() {
  _has_bits_[0] |= 0x00000080u;
}
void OutgoingRtpPackets::clear_has_probe_cluster_id_deltas() {
  _has_bits_[0] &= ~0x00000080u;
}
void OutgoingRtpPackets::clear_probe_cluster_id_deltas() {
  probe_cluster_id_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_probe_cluster_id_deltas();
}
const ::std::string& OutgoingRtpPackets::probe_cluster_id_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.probe_cluster_id_deltas)
  return probe_cluster_id_deltas_.GetNoArena();
}
void OutgoingRtpPackets::set_probe_cluster_id_deltas(const ::std::string& value) {
  set_has_probe_cluster_id_deltas();
  probe_cluster_id_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.probe_cluster_id_deltas)
}
#if LANG_CXX11
void OutgoingRtpPackets::set_probe_cluster_id_deltas(::std::string&& value) {
  set_has_probe_cluster_id_deltas();
  probe_cluster_id_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.probe_cluster_id_deltas)
}
#endif
void OutgoingRtpPackets::set_probe_cluster_id_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_probe_cluster_id_deltas();
  probe_cluster_id_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.probe_cluster_id_deltas)
}
void OutgoingRtpPackets::set_probe_cluster_id_deltas(const void* value, size_t size) {
  set_has_probe_cluster_id_deltas();
  probe_cluster_id_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.probe_cluster_id_deltas)
}
::std::string* OutgoingRtpPackets::mutable_probe_cluster_id_deltas() {
  set_has_probe_cluster_id_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.probe_cluster_id_deltas)
  return probe_cluster_id_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtpPackets::release_probe_cluster_id_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.probe_cluster_id_deltas)
  clear_has_probe_cluster_id_deltas();
  return probe_cluster_id_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtpPackets::set_allocated_probe_cluster_id_deltas(::std::string* probe_cluster_id_deltas) {
  if (probe_cluster_id_deltas != NULL) {
    set_has_probe_cluster_id_deltas();
  } else {
    clear_has_probe_cluster_id_deltas();
  }
  probe_cluster_id_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), probe_cluster_id_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.probe_cluster_id_deltas)
}

// optional bytes transmission_time_offset_deltas = 109;
bool OutgoingRtpPackets::has_transmission_time_offset_deltas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OutgoingRtpPackets::set_has_transmission_time_offset_deltas() {
  _has_bits_[0] |= 0x00000100u;
}
void OutgoingRtpPackets::clear_has_transmission_time_offset_deltas() {
  _has_bits_[0] &= ~0x00000100u;
}
void OutgoingRtpPackets::clear_transmission_time_offset_deltas() {
  transmission_time_offset_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transmission_time_offset_deltas();
}
const ::std::string& OutgoingRtpPackets::transmission_time_offset_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.GetNoArena();
}
void OutgoingRtpPackets::set_transmission_time_offset_deltas(const ::std::string& value) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
#if LANG_CXX11
void OutgoingRtpPackets::set_transmission_time_offset_deltas(::std::string&& value) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
#endif
void OutgoingRtpPackets::set_transmission_time_offset_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
void OutgoingRtpPackets::set_transmission_time_offset_deltas(const void* value, size_t size) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
::std::string* OutgoingRtpPackets::mutable_transmission_time_offset_deltas() {
  set_has_transmission_time_offset_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtpPackets::release_transmission_time_offset_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
  clear_has_transmission_time_offset_deltas();
  return transmission_time_offset_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtpPackets::set_allocated_transmission_time_offset_deltas(::std::string* transmission_time_offset_deltas) {
  if (transmission_time_offset_deltas != NULL) {
    set_has_transmission_time_offset_deltas();
  } else {
    clear_has_transmission_time_offset_deltas();
  }
  transmission_time_offset_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transmission_time_offset_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}

// optional bytes absolute_send_time_deltas = 110;
bool OutgoingRtpPackets::has_absolute_send_time_deltas() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OutgoingRtpPackets::set_has_absolute_send_time_deltas() {
  _has_bits_[0] |= 0x00000200u;
}
void OutgoingRtpPackets::clear_has_absolute_send_time_deltas() {
  _has_bits_[0] &= ~0x00000200u;
}
void OutgoingRtpPackets::clear_absolute_send_time_deltas() {
  absolute_send_time_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_absolute_send_time_deltas();
}
const ::std::string& OutgoingRtpPackets::absolute_send_time_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.GetNoArena();
}
void OutgoingRtpPackets::set_absolute_send_time_deltas(const ::std::string& value) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
#if LANG_CXX11
void OutgoingRtpPackets::set_absolute_send_time_deltas(::std::string&& value) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
#endif
void OutgoingRtpPackets::set_absolute_send_time_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
void OutgoingRtpPackets::set_absolute_send_time_deltas(const void* value, size_t size) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
::std::string* OutgoingRtpPackets::mutable_absolute_send_time_deltas() {
  set_has_absolute_send_time_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtpPackets::release_absolute_send_time_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
  clear_has_absolute_send_time_deltas();
  return absolute_send_time_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtpPackets::set_allocated_absolute_send_time_deltas(::std::string* absolute_send_time_deltas) {
  if (absolute_send_time_deltas != NULL) {
    set_has_absolute_send_time_deltas();
  } else {
    clear_has_absolute_send_time_deltas();
  }
  absolute_send_time_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), absolute_send_time_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}

// optional bytes transport_sequence_number_deltas = 111;
bool OutgoingRtpPackets::has_transport_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OutgoingRtpPackets::set_has_transport_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000400u;
}
void OutgoingRtpPackets::clear_has_transport_sequence_number_deltas() {
  _has_bits_[0] &= ~0x00000400u;
}
void OutgoingRtpPackets::clear_transport_sequence_number_deltas() {
  transport_sequence_number_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transport_sequence_number_deltas();
}
const ::std::string& OutgoingRtpPackets::transport_sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.GetNoArena();
}
void OutgoingRtpPackets::set_transport_sequence_number_deltas(const ::std::string& value) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
#if LANG_CXX11
void OutgoingRtpPackets::set_transport_sequence_number_deltas(::std::string&& value) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
#endif
void OutgoingRtpPackets::set_transport_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
void OutgoingRtpPackets::set_transport_sequence_number_deltas(const void* value, size_t size) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
::std::string* OutgoingRtpPackets::mutable_transport_sequence_number_deltas() {
  set_has_transport_sequence_number_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtpPackets::release_transport_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
  clear_has_transport_sequence_number_deltas();
  return transport_sequence_number_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtpPackets::set_allocated_transport_sequence_number_deltas(::std::string* transport_sequence_number_deltas) {
  if (transport_sequence_number_deltas != NULL) {
    set_has_transport_sequence_number_deltas();
  } else {
    clear_has_transport_sequence_number_deltas();
  }
  transport_sequence_number_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transport_sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncomingRtcpPackets::kTimestampMsFieldNumber;
const int IncomingRtcpPackets::kRawPacketFieldNumber;
const int IncomingRtcpPackets::kTimestampDeltasMsFieldNumber;
const int IncomingRtcpPackets::kRawPacketDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncomingRtcpPackets::IncomingRtcpPackets()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.IncomingRtcpPackets)
}
IncomingRtcpPackets::IncomingRtcpPackets(const IncomingRtcpPackets& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_packet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet()) {
    raw_packet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
  }
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_deltas_ms()) {
    timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
  }
  raw_packet_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet_deltas()) {
    raw_packet_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_deltas_);
  }
  timestamp_ms_ = from.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IncomingRtcpPackets)
}

void IncomingRtcpPackets::SharedCtor() {
  _cached_size_ = 0;
  raw_packet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_packet_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_ = GOOGLE_LONGLONG(0);
}

IncomingRtcpPackets::~IncomingRtcpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IncomingRtcpPackets)
  SharedDtor();
}

void IncomingRtcpPackets::SharedDtor() {
  raw_packet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_deltas_ms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_packet_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IncomingRtcpPackets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IncomingRtcpPackets& IncomingRtcpPackets::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

IncomingRtcpPackets* IncomingRtcpPackets::New(::google::protobuf::Arena* arena) const {
  IncomingRtcpPackets* n = new IncomingRtcpPackets;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IncomingRtcpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IncomingRtcpPackets)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_raw_packet()) {
      GOOGLE_DCHECK(!raw_packet_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*raw_packet_.UnsafeRawStringPointer())->clear();
    }
    if (has_timestamp_deltas_ms()) {
      GOOGLE_DCHECK(!timestamp_deltas_ms_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timestamp_deltas_ms_.UnsafeRawStringPointer())->clear();
    }
    if (has_raw_packet_deltas()) {
      GOOGLE_DCHECK(!raw_packet_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*raw_packet_deltas_.UnsafeRawStringPointer())->clear();
    }
  }
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IncomingRtcpPackets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.IncomingRtcpPackets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_deltas_ms = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_deltas_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet_deltas = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.IncomingRtcpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.IncomingRtcpPackets)
  return false;
#undef DO_
}

void IncomingRtcpPackets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.IncomingRtcpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bytes raw_packet = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->raw_packet(), output);
  }

  // optional bytes timestamp_deltas_ms = 101;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_deltas_ms(), output);
  }

  // optional bytes raw_packet_deltas = 102;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->raw_packet_deltas(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.IncomingRtcpPackets)
}

size_t IncomingRtcpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IncomingRtcpPackets)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes raw_packet = 2;
    if (has_raw_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_packet());
    }

    // optional bytes timestamp_deltas_ms = 101;
    if (has_timestamp_deltas_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_deltas_ms());
    }

    // optional bytes raw_packet_deltas = 102;
    if (has_raw_packet_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_packet_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncomingRtcpPackets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IncomingRtcpPackets*>(&from));
}

void IncomingRtcpPackets::MergeFrom(const IncomingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IncomingRtcpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_raw_packet();
      raw_packet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_timestamp_deltas_ms();
      timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_raw_packet_deltas();
      raw_packet_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IncomingRtcpPackets::CopyFrom(const IncomingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IncomingRtcpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingRtcpPackets::IsInitialized() const {
  return true;
}

void IncomingRtcpPackets::Swap(IncomingRtcpPackets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncomingRtcpPackets::InternalSwap(IncomingRtcpPackets* other) {
  raw_packet_.Swap(&other->raw_packet_);
  timestamp_deltas_ms_.Swap(&other->timestamp_deltas_ms_);
  raw_packet_deltas_.Swap(&other->raw_packet_deltas_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IncomingRtcpPackets::GetTypeName() const {
  return "webrtc.rtclog2.IncomingRtcpPackets";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IncomingRtcpPackets

// optional int64 timestamp_ms = 1;
bool IncomingRtcpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IncomingRtcpPackets::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000008u;
}
void IncomingRtcpPackets::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
void IncomingRtcpPackets::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 IncomingRtcpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms)
  return timestamp_ms_;
}
void IncomingRtcpPackets::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms)
}

// optional bytes raw_packet = 2;
bool IncomingRtcpPackets::has_raw_packet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IncomingRtcpPackets::set_has_raw_packet() {
  _has_bits_[0] |= 0x00000001u;
}
void IncomingRtcpPackets::clear_has_raw_packet() {
  _has_bits_[0] &= ~0x00000001u;
}
void IncomingRtcpPackets::clear_raw_packet() {
  raw_packet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_packet();
}
const ::std::string& IncomingRtcpPackets::raw_packet() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
  return raw_packet_.GetNoArena();
}
void IncomingRtcpPackets::set_raw_packet(const ::std::string& value) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
#if LANG_CXX11
void IncomingRtcpPackets::set_raw_packet(::std::string&& value) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
#endif
void IncomingRtcpPackets::set_raw_packet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
void IncomingRtcpPackets::set_raw_packet(const void* value, size_t size) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
::std::string* IncomingRtcpPackets::mutable_raw_packet() {
  set_has_raw_packet();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
  return raw_packet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtcpPackets::release_raw_packet() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
  clear_has_raw_packet();
  return raw_packet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtcpPackets::set_allocated_raw_packet(::std::string* raw_packet) {
  if (raw_packet != NULL) {
    set_has_raw_packet();
  } else {
    clear_has_raw_packet();
  }
  raw_packet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_packet);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}

// optional bytes timestamp_deltas_ms = 101;
bool IncomingRtcpPackets::has_timestamp_deltas_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IncomingRtcpPackets::set_has_timestamp_deltas_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void IncomingRtcpPackets::clear_has_timestamp_deltas_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void IncomingRtcpPackets::clear_timestamp_deltas_ms() {
  timestamp_deltas_ms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_deltas_ms();
}
const ::std::string& IncomingRtcpPackets::timestamp_deltas_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.timestamp_deltas_ms)
  return timestamp_deltas_ms_.GetNoArena();
}
void IncomingRtcpPackets::set_timestamp_deltas_ms(const ::std::string& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.timestamp_deltas_ms)
}
#if LANG_CXX11
void IncomingRtcpPackets::set_timestamp_deltas_ms(::std::string&& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtcpPackets.timestamp_deltas_ms)
}
#endif
void IncomingRtcpPackets::set_timestamp_deltas_ms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtcpPackets.timestamp_deltas_ms)
}
void IncomingRtcpPackets::set_timestamp_deltas_ms(const void* value, size_t size) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtcpPackets.timestamp_deltas_ms)
}
::std::string* IncomingRtcpPackets::mutable_timestamp_deltas_ms() {
  set_has_timestamp_deltas_ms();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtcpPackets.timestamp_deltas_ms)
  return timestamp_deltas_ms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtcpPackets::release_timestamp_deltas_ms() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtcpPackets.timestamp_deltas_ms)
  clear_has_timestamp_deltas_ms();
  return timestamp_deltas_ms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtcpPackets::set_allocated_timestamp_deltas_ms(::std::string* timestamp_deltas_ms) {
  if (timestamp_deltas_ms != NULL) {
    set_has_timestamp_deltas_ms();
  } else {
    clear_has_timestamp_deltas_ms();
  }
  timestamp_deltas_ms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_deltas_ms);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtcpPackets.timestamp_deltas_ms)
}

// optional bytes raw_packet_deltas = 102;
bool IncomingRtcpPackets::has_raw_packet_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IncomingRtcpPackets::set_has_raw_packet_deltas() {
  _has_bits_[0] |= 0x00000004u;
}
void IncomingRtcpPackets::clear_has_raw_packet_deltas() {
  _has_bits_[0] &= ~0x00000004u;
}
void IncomingRtcpPackets::clear_raw_packet_deltas() {
  raw_packet_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_packet_deltas();
}
const ::std::string& IncomingRtcpPackets::raw_packet_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_deltas)
  return raw_packet_deltas_.GetNoArena();
}
void IncomingRtcpPackets::set_raw_packet_deltas(const ::std::string& value) {
  set_has_raw_packet_deltas();
  raw_packet_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_deltas)
}
#if LANG_CXX11
void IncomingRtcpPackets::set_raw_packet_deltas(::std::string&& value) {
  set_has_raw_packet_deltas();
  raw_packet_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_deltas)
}
#endif
void IncomingRtcpPackets::set_raw_packet_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_packet_deltas();
  raw_packet_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_deltas)
}
void IncomingRtcpPackets::set_raw_packet_deltas(const void* value, size_t size) {
  set_has_raw_packet_deltas();
  raw_packet_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_deltas)
}
::std::string* IncomingRtcpPackets::mutable_raw_packet_deltas() {
  set_has_raw_packet_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_deltas)
  return raw_packet_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IncomingRtcpPackets::release_raw_packet_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_deltas)
  clear_has_raw_packet_deltas();
  return raw_packet_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IncomingRtcpPackets::set_allocated_raw_packet_deltas(::std::string* raw_packet_deltas) {
  if (raw_packet_deltas != NULL) {
    set_has_raw_packet_deltas();
  } else {
    clear_has_raw_packet_deltas();
  }
  raw_packet_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_packet_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_deltas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutgoingRtcpPackets::kTimestampMsFieldNumber;
const int OutgoingRtcpPackets::kRawPacketFieldNumber;
const int OutgoingRtcpPackets::kTimestampDeltasMsFieldNumber;
const int OutgoingRtcpPackets::kRawPacketDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutgoingRtcpPackets::OutgoingRtcpPackets()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.OutgoingRtcpPackets)
}
OutgoingRtcpPackets::OutgoingRtcpPackets(const OutgoingRtcpPackets& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_packet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet()) {
    raw_packet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
  }
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_deltas_ms()) {
    timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
  }
  raw_packet_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet_deltas()) {
    raw_packet_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_deltas_);
  }
  timestamp_ms_ = from.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.OutgoingRtcpPackets)
}

void OutgoingRtcpPackets::SharedCtor() {
  _cached_size_ = 0;
  raw_packet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_packet_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_ = GOOGLE_LONGLONG(0);
}

OutgoingRtcpPackets::~OutgoingRtcpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.OutgoingRtcpPackets)
  SharedDtor();
}

void OutgoingRtcpPackets::SharedDtor() {
  raw_packet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_deltas_ms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_packet_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OutgoingRtcpPackets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OutgoingRtcpPackets& OutgoingRtcpPackets::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

OutgoingRtcpPackets* OutgoingRtcpPackets::New(::google::protobuf::Arena* arena) const {
  OutgoingRtcpPackets* n = new OutgoingRtcpPackets;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutgoingRtcpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.OutgoingRtcpPackets)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_raw_packet()) {
      GOOGLE_DCHECK(!raw_packet_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*raw_packet_.UnsafeRawStringPointer())->clear();
    }
    if (has_timestamp_deltas_ms()) {
      GOOGLE_DCHECK(!timestamp_deltas_ms_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timestamp_deltas_ms_.UnsafeRawStringPointer())->clear();
    }
    if (has_raw_packet_deltas()) {
      GOOGLE_DCHECK(!raw_packet_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*raw_packet_deltas_.UnsafeRawStringPointer())->clear();
    }
  }
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OutgoingRtcpPackets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.OutgoingRtcpPackets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_deltas_ms = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_deltas_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet_deltas = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.OutgoingRtcpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.OutgoingRtcpPackets)
  return false;
#undef DO_
}

void OutgoingRtcpPackets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.OutgoingRtcpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bytes raw_packet = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->raw_packet(), output);
  }

  // optional bytes timestamp_deltas_ms = 101;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_deltas_ms(), output);
  }

  // optional bytes raw_packet_deltas = 102;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->raw_packet_deltas(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.OutgoingRtcpPackets)
}

size_t OutgoingRtcpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.OutgoingRtcpPackets)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes raw_packet = 2;
    if (has_raw_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_packet());
    }

    // optional bytes timestamp_deltas_ms = 101;
    if (has_timestamp_deltas_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_deltas_ms());
    }

    // optional bytes raw_packet_deltas = 102;
    if (has_raw_packet_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_packet_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutgoingRtcpPackets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OutgoingRtcpPackets*>(&from));
}

void OutgoingRtcpPackets::MergeFrom(const OutgoingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.OutgoingRtcpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_raw_packet();
      raw_packet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_timestamp_deltas_ms();
      timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_raw_packet_deltas();
      raw_packet_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OutgoingRtcpPackets::CopyFrom(const OutgoingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.OutgoingRtcpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingRtcpPackets::IsInitialized() const {
  return true;
}

void OutgoingRtcpPackets::Swap(OutgoingRtcpPackets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutgoingRtcpPackets::InternalSwap(OutgoingRtcpPackets* other) {
  raw_packet_.Swap(&other->raw_packet_);
  timestamp_deltas_ms_.Swap(&other->timestamp_deltas_ms_);
  raw_packet_deltas_.Swap(&other->raw_packet_deltas_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OutgoingRtcpPackets::GetTypeName() const {
  return "webrtc.rtclog2.OutgoingRtcpPackets";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OutgoingRtcpPackets

// optional int64 timestamp_ms = 1;
bool OutgoingRtcpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OutgoingRtcpPackets::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000008u;
}
void OutgoingRtcpPackets::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
void OutgoingRtcpPackets::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 OutgoingRtcpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms)
  return timestamp_ms_;
}
void OutgoingRtcpPackets::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms)
}

// optional bytes raw_packet = 2;
bool OutgoingRtcpPackets::has_raw_packet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OutgoingRtcpPackets::set_has_raw_packet() {
  _has_bits_[0] |= 0x00000001u;
}
void OutgoingRtcpPackets::clear_has_raw_packet() {
  _has_bits_[0] &= ~0x00000001u;
}
void OutgoingRtcpPackets::clear_raw_packet() {
  raw_packet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_packet();
}
const ::std::string& OutgoingRtcpPackets::raw_packet() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
  return raw_packet_.GetNoArena();
}
void OutgoingRtcpPackets::set_raw_packet(const ::std::string& value) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
#if LANG_CXX11
void OutgoingRtcpPackets::set_raw_packet(::std::string&& value) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
#endif
void OutgoingRtcpPackets::set_raw_packet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
void OutgoingRtcpPackets::set_raw_packet(const void* value, size_t size) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
::std::string* OutgoingRtcpPackets::mutable_raw_packet() {
  set_has_raw_packet();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
  return raw_packet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtcpPackets::release_raw_packet() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
  clear_has_raw_packet();
  return raw_packet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtcpPackets::set_allocated_raw_packet(::std::string* raw_packet) {
  if (raw_packet != NULL) {
    set_has_raw_packet();
  } else {
    clear_has_raw_packet();
  }
  raw_packet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_packet);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}

// optional bytes timestamp_deltas_ms = 101;
bool OutgoingRtcpPackets::has_timestamp_deltas_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OutgoingRtcpPackets::set_has_timestamp_deltas_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void OutgoingRtcpPackets::clear_has_timestamp_deltas_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void OutgoingRtcpPackets::clear_timestamp_deltas_ms() {
  timestamp_deltas_ms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_deltas_ms();
}
const ::std::string& OutgoingRtcpPackets::timestamp_deltas_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_deltas_ms)
  return timestamp_deltas_ms_.GetNoArena();
}
void OutgoingRtcpPackets::set_timestamp_deltas_ms(const ::std::string& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_deltas_ms)
}
#if LANG_CXX11
void OutgoingRtcpPackets::set_timestamp_deltas_ms(::std::string&& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_deltas_ms)
}
#endif
void OutgoingRtcpPackets::set_timestamp_deltas_ms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_deltas_ms)
}
void OutgoingRtcpPackets::set_timestamp_deltas_ms(const void* value, size_t size) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_deltas_ms)
}
::std::string* OutgoingRtcpPackets::mutable_timestamp_deltas_ms() {
  set_has_timestamp_deltas_ms();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_deltas_ms)
  return timestamp_deltas_ms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtcpPackets::release_timestamp_deltas_ms() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_deltas_ms)
  clear_has_timestamp_deltas_ms();
  return timestamp_deltas_ms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtcpPackets::set_allocated_timestamp_deltas_ms(::std::string* timestamp_deltas_ms) {
  if (timestamp_deltas_ms != NULL) {
    set_has_timestamp_deltas_ms();
  } else {
    clear_has_timestamp_deltas_ms();
  }
  timestamp_deltas_ms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_deltas_ms);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_deltas_ms)
}

// optional bytes raw_packet_deltas = 102;
bool OutgoingRtcpPackets::has_raw_packet_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OutgoingRtcpPackets::set_has_raw_packet_deltas() {
  _has_bits_[0] |= 0x00000004u;
}
void OutgoingRtcpPackets::clear_has_raw_packet_deltas() {
  _has_bits_[0] &= ~0x00000004u;
}
void OutgoingRtcpPackets::clear_raw_packet_deltas() {
  raw_packet_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_packet_deltas();
}
const ::std::string& OutgoingRtcpPackets::raw_packet_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_deltas)
  return raw_packet_deltas_.GetNoArena();
}
void OutgoingRtcpPackets::set_raw_packet_deltas(const ::std::string& value) {
  set_has_raw_packet_deltas();
  raw_packet_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_deltas)
}
#if LANG_CXX11
void OutgoingRtcpPackets::set_raw_packet_deltas(::std::string&& value) {
  set_has_raw_packet_deltas();
  raw_packet_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_deltas)
}
#endif
void OutgoingRtcpPackets::set_raw_packet_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_packet_deltas();
  raw_packet_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_deltas)
}
void OutgoingRtcpPackets::set_raw_packet_deltas(const void* value, size_t size) {
  set_has_raw_packet_deltas();
  raw_packet_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_deltas)
}
::std::string* OutgoingRtcpPackets::mutable_raw_packet_deltas() {
  set_has_raw_packet_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_deltas)
  return raw_packet_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutgoingRtcpPackets::release_raw_packet_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_deltas)
  clear_has_raw_packet_deltas();
  return raw_packet_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutgoingRtcpPackets::set_allocated_raw_packet_deltas(::std::string* raw_packet_deltas) {
  if (raw_packet_deltas != NULL) {
    set_has_raw_packet_deltas();
  } else {
    clear_has_raw_packet_deltas();
  }
  raw_packet_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_packet_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_deltas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioPlayoutEvents::kTimestampMsFieldNumber;
const int AudioPlayoutEvents::kLocalSsrcFieldNumber;
const int AudioPlayoutEvents::kTimestampDeltasMsFieldNumber;
const int AudioPlayoutEvents::kLocalSsrcDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioPlayoutEvents::AudioPlayoutEvents()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioPlayoutEvents)
}
AudioPlayoutEvents::AudioPlayoutEvents(const AudioPlayoutEvents& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_deltas_ms()) {
    timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
  }
  local_ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_local_ssrc_deltas()) {
    local_ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ssrc_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(local_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioPlayoutEvents)
}

void AudioPlayoutEvents::SharedCtor() {
  _cached_size_ = 0;
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_ssrc_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(local_ssrc_));
}

AudioPlayoutEvents::~AudioPlayoutEvents() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioPlayoutEvents)
  SharedDtor();
}

void AudioPlayoutEvents::SharedDtor() {
  timestamp_deltas_ms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ssrc_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioPlayoutEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioPlayoutEvents& AudioPlayoutEvents::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioPlayoutEvents* AudioPlayoutEvents::New(::google::protobuf::Arena* arena) const {
  AudioPlayoutEvents* n = new AudioPlayoutEvents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioPlayoutEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioPlayoutEvents)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_timestamp_deltas_ms()) {
      GOOGLE_DCHECK(!timestamp_deltas_ms_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timestamp_deltas_ms_.UnsafeRawStringPointer())->clear();
    }
    if (has_local_ssrc_deltas()) {
      GOOGLE_DCHECK(!local_ssrc_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*local_ssrc_deltas_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(local_ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioPlayoutEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioPlayoutEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_ssrc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_local_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_deltas_ms = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_deltas_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes local_ssrc_deltas = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_local_ssrc_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioPlayoutEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioPlayoutEvents)
  return false;
#undef DO_
}

void AudioPlayoutEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioPlayoutEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 local_ssrc = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_ssrc(), output);
  }

  // optional bytes timestamp_deltas_ms = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_deltas_ms(), output);
  }

  // optional bytes local_ssrc_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->local_ssrc_deltas(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioPlayoutEvents)
}

size_t AudioPlayoutEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioPlayoutEvents)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes timestamp_deltas_ms = 101;
    if (has_timestamp_deltas_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_deltas_ms());
    }

    // optional bytes local_ssrc_deltas = 102;
    if (has_local_ssrc_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->local_ssrc_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 local_ssrc = 2;
    if (has_local_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioPlayoutEvents::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioPlayoutEvents*>(&from));
}

void AudioPlayoutEvents::MergeFrom(const AudioPlayoutEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioPlayoutEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_deltas_ms();
      timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_local_ssrc_deltas();
      local_ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ssrc_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_ssrc_ = from.local_ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioPlayoutEvents::CopyFrom(const AudioPlayoutEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioPlayoutEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPlayoutEvents::IsInitialized() const {
  return true;
}

void AudioPlayoutEvents::Swap(AudioPlayoutEvents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioPlayoutEvents::InternalSwap(AudioPlayoutEvents* other) {
  timestamp_deltas_ms_.Swap(&other->timestamp_deltas_ms_);
  local_ssrc_deltas_.Swap(&other->local_ssrc_deltas_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(local_ssrc_, other->local_ssrc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioPlayoutEvents::GetTypeName() const {
  return "webrtc.rtclog2.AudioPlayoutEvents";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioPlayoutEvents

// optional int64 timestamp_ms = 1;
bool AudioPlayoutEvents::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AudioPlayoutEvents::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void AudioPlayoutEvents::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void AudioPlayoutEvents::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 AudioPlayoutEvents::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms)
  return timestamp_ms_;
}
void AudioPlayoutEvents::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms)
}

// optional uint32 local_ssrc = 2;
bool AudioPlayoutEvents::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AudioPlayoutEvents::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000008u;
}
void AudioPlayoutEvents::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000008u;
}
void AudioPlayoutEvents::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
::google::protobuf::uint32 AudioPlayoutEvents::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc)
  return local_ssrc_;
}
void AudioPlayoutEvents::set_local_ssrc(::google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc)
}

// optional bytes timestamp_deltas_ms = 101;
bool AudioPlayoutEvents::has_timestamp_deltas_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AudioPlayoutEvents::set_has_timestamp_deltas_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void AudioPlayoutEvents::clear_has_timestamp_deltas_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void AudioPlayoutEvents::clear_timestamp_deltas_ms() {
  timestamp_deltas_ms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_deltas_ms();
}
const ::std::string& AudioPlayoutEvents::timestamp_deltas_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.timestamp_deltas_ms)
  return timestamp_deltas_ms_.GetNoArena();
}
void AudioPlayoutEvents::set_timestamp_deltas_ms(const ::std::string& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.timestamp_deltas_ms)
}
#if LANG_CXX11
void AudioPlayoutEvents::set_timestamp_deltas_ms(::std::string&& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioPlayoutEvents.timestamp_deltas_ms)
}
#endif
void AudioPlayoutEvents::set_timestamp_deltas_ms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioPlayoutEvents.timestamp_deltas_ms)
}
void AudioPlayoutEvents::set_timestamp_deltas_ms(const void* value, size_t size) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioPlayoutEvents.timestamp_deltas_ms)
}
::std::string* AudioPlayoutEvents::mutable_timestamp_deltas_ms() {
  set_has_timestamp_deltas_ms();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioPlayoutEvents.timestamp_deltas_ms)
  return timestamp_deltas_ms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioPlayoutEvents::release_timestamp_deltas_ms() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioPlayoutEvents.timestamp_deltas_ms)
  clear_has_timestamp_deltas_ms();
  return timestamp_deltas_ms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioPlayoutEvents::set_allocated_timestamp_deltas_ms(::std::string* timestamp_deltas_ms) {
  if (timestamp_deltas_ms != NULL) {
    set_has_timestamp_deltas_ms();
  } else {
    clear_has_timestamp_deltas_ms();
  }
  timestamp_deltas_ms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_deltas_ms);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioPlayoutEvents.timestamp_deltas_ms)
}

// optional bytes local_ssrc_deltas = 102;
bool AudioPlayoutEvents::has_local_ssrc_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AudioPlayoutEvents::set_has_local_ssrc_deltas() {
  _has_bits_[0] |= 0x00000002u;
}
void AudioPlayoutEvents::clear_has_local_ssrc_deltas() {
  _has_bits_[0] &= ~0x00000002u;
}
void AudioPlayoutEvents::clear_local_ssrc_deltas() {
  local_ssrc_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_local_ssrc_deltas();
}
const ::std::string& AudioPlayoutEvents::local_ssrc_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
  return local_ssrc_deltas_.GetNoArena();
}
void AudioPlayoutEvents::set_local_ssrc_deltas(const ::std::string& value) {
  set_has_local_ssrc_deltas();
  local_ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
#if LANG_CXX11
void AudioPlayoutEvents::set_local_ssrc_deltas(::std::string&& value) {
  set_has_local_ssrc_deltas();
  local_ssrc_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
#endif
void AudioPlayoutEvents::set_local_ssrc_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_local_ssrc_deltas();
  local_ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
void AudioPlayoutEvents::set_local_ssrc_deltas(const void* value, size_t size) {
  set_has_local_ssrc_deltas();
  local_ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
::std::string* AudioPlayoutEvents::mutable_local_ssrc_deltas() {
  set_has_local_ssrc_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
  return local_ssrc_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioPlayoutEvents::release_local_ssrc_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
  clear_has_local_ssrc_deltas();
  return local_ssrc_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioPlayoutEvents::set_allocated_local_ssrc_deltas(::std::string* local_ssrc_deltas) {
  if (local_ssrc_deltas != NULL) {
    set_has_local_ssrc_deltas();
  } else {
    clear_has_local_ssrc_deltas();
  }
  local_ssrc_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_ssrc_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginLogEvent::kTimestampMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginLogEvent::BeginLogEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BeginLogEvent)
}
BeginLogEvent::BeginLogEvent(const BeginLogEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_ = from.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BeginLogEvent)
}

void BeginLogEvent::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ms_ = GOOGLE_LONGLONG(0);
}

BeginLogEvent::~BeginLogEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BeginLogEvent)
  SharedDtor();
}

void BeginLogEvent::SharedDtor() {
}

void BeginLogEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BeginLogEvent& BeginLogEvent::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

BeginLogEvent* BeginLogEvent::New(::google::protobuf::Arena* arena) const {
  BeginLogEvent* n = new BeginLogEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginLogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BeginLogEvent)
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BeginLogEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BeginLogEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BeginLogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BeginLogEvent)
  return false;
#undef DO_
}

void BeginLogEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BeginLogEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BeginLogEvent)
}

size_t BeginLogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BeginLogEvent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional int64 timestamp_ms = 1;
  if (has_timestamp_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginLogEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeginLogEvent*>(&from));
}

void BeginLogEvent::MergeFrom(const BeginLogEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BeginLogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp_ms()) {
    set_timestamp_ms(from.timestamp_ms());
  }
}

void BeginLogEvent::CopyFrom(const BeginLogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BeginLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginLogEvent::IsInitialized() const {
  return true;
}

void BeginLogEvent::Swap(BeginLogEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginLogEvent::InternalSwap(BeginLogEvent* other) {
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BeginLogEvent::GetTypeName() const {
  return "webrtc.rtclog2.BeginLogEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginLogEvent

// optional int64 timestamp_ms = 1;
bool BeginLogEvent::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BeginLogEvent::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void BeginLogEvent::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void BeginLogEvent::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 BeginLogEvent::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BeginLogEvent.timestamp_ms)
  return timestamp_ms_;
}
void BeginLogEvent::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BeginLogEvent.timestamp_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndLogEvent::kTimestampMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndLogEvent::EndLogEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.EndLogEvent)
}
EndLogEvent::EndLogEvent(const EndLogEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_ = from.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.EndLogEvent)
}

void EndLogEvent::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ms_ = GOOGLE_LONGLONG(0);
}

EndLogEvent::~EndLogEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.EndLogEvent)
  SharedDtor();
}

void EndLogEvent::SharedDtor() {
}

void EndLogEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EndLogEvent& EndLogEvent::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

EndLogEvent* EndLogEvent::New(::google::protobuf::Arena* arena) const {
  EndLogEvent* n = new EndLogEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndLogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.EndLogEvent)
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EndLogEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.EndLogEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.EndLogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.EndLogEvent)
  return false;
#undef DO_
}

void EndLogEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.EndLogEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.EndLogEvent)
}

size_t EndLogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.EndLogEvent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional int64 timestamp_ms = 1;
  if (has_timestamp_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndLogEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndLogEvent*>(&from));
}

void EndLogEvent::MergeFrom(const EndLogEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.EndLogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp_ms()) {
    set_timestamp_ms(from.timestamp_ms());
  }
}

void EndLogEvent::CopyFrom(const EndLogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.EndLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndLogEvent::IsInitialized() const {
  return true;
}

void EndLogEvent::Swap(EndLogEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndLogEvent::InternalSwap(EndLogEvent* other) {
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EndLogEvent::GetTypeName() const {
  return "webrtc.rtclog2.EndLogEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndLogEvent

// optional int64 timestamp_ms = 1;
bool EndLogEvent::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EndLogEvent::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void EndLogEvent::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void EndLogEvent::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 EndLogEvent::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EndLogEvent.timestamp_ms)
  return timestamp_ms_;
}
void EndLogEvent::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.EndLogEvent.timestamp_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossBasedBweUpdates::kTimestampMsFieldNumber;
const int LossBasedBweUpdates::kBitrateBpsFieldNumber;
const int LossBasedBweUpdates::kFractionLossFieldNumber;
const int LossBasedBweUpdates::kTotalPacketsFieldNumber;
const int LossBasedBweUpdates::kTimestampDeltasMsFieldNumber;
const int LossBasedBweUpdates::kBitrateDeltasBpsFieldNumber;
const int LossBasedBweUpdates::kFractionLossDeltasFieldNumber;
const int LossBasedBweUpdates::kTotalPacketsDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossBasedBweUpdates::LossBasedBweUpdates()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.LossBasedBweUpdates)
}
LossBasedBweUpdates::LossBasedBweUpdates(const LossBasedBweUpdates& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_deltas_ms()) {
    timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
  }
  bitrate_deltas_bps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitrate_deltas_bps()) {
    bitrate_deltas_bps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_deltas_bps_);
  }
  fraction_loss_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fraction_loss_deltas()) {
    fraction_loss_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fraction_loss_deltas_);
  }
  total_packets_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_total_packets_deltas()) {
    total_packets_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.total_packets_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_packets_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(total_packets_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.LossBasedBweUpdates)
}

void LossBasedBweUpdates::SharedCtor() {
  _cached_size_ = 0;
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_deltas_bps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fraction_loss_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_packets_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_packets_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(total_packets_));
}

LossBasedBweUpdates::~LossBasedBweUpdates() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.LossBasedBweUpdates)
  SharedDtor();
}

void LossBasedBweUpdates::SharedDtor() {
  timestamp_deltas_ms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_deltas_bps_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fraction_loss_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_packets_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LossBasedBweUpdates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LossBasedBweUpdates& LossBasedBweUpdates::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

LossBasedBweUpdates* LossBasedBweUpdates::New(::google::protobuf::Arena* arena) const {
  LossBasedBweUpdates* n = new LossBasedBweUpdates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LossBasedBweUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.LossBasedBweUpdates)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_timestamp_deltas_ms()) {
      GOOGLE_DCHECK(!timestamp_deltas_ms_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timestamp_deltas_ms_.UnsafeRawStringPointer())->clear();
    }
    if (has_bitrate_deltas_bps()) {
      GOOGLE_DCHECK(!bitrate_deltas_bps_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bitrate_deltas_bps_.UnsafeRawStringPointer())->clear();
    }
    if (has_fraction_loss_deltas()) {
      GOOGLE_DCHECK(!fraction_loss_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fraction_loss_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_total_packets_deltas()) {
      GOOGLE_DCHECK(!total_packets_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*total_packets_deltas_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_packets_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(total_packets_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LossBasedBweUpdates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.LossBasedBweUpdates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fraction_loss = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fraction_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fraction_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_packets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_total_packets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_deltas_ms = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_deltas_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bitrate_deltas_bps = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitrate_deltas_bps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes fraction_loss_deltas = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fraction_loss_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes total_packets_deltas = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_total_packets_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.LossBasedBweUpdates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.LossBasedBweUpdates)
  return false;
#undef DO_
}

void LossBasedBweUpdates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.LossBasedBweUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bitrate_bps(), output);
  }

  // optional uint32 fraction_loss = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fraction_loss(), output);
  }

  // optional uint32 total_packets = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_packets(), output);
  }

  // optional bytes timestamp_deltas_ms = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_deltas_ms(), output);
  }

  // optional bytes bitrate_deltas_bps = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->bitrate_deltas_bps(), output);
  }

  // optional bytes fraction_loss_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->fraction_loss_deltas(), output);
  }

  // optional bytes total_packets_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->total_packets_deltas(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.LossBasedBweUpdates)
}

size_t LossBasedBweUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.LossBasedBweUpdates)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes timestamp_deltas_ms = 101;
    if (has_timestamp_deltas_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_deltas_ms());
    }

    // optional bytes bitrate_deltas_bps = 102;
    if (has_bitrate_deltas_bps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bitrate_deltas_bps());
    }

    // optional bytes fraction_loss_deltas = 103;
    if (has_fraction_loss_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fraction_loss_deltas());
    }

    // optional bytes total_packets_deltas = 104;
    if (has_total_packets_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->total_packets_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 bitrate_bps = 2;
    if (has_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

    // optional uint32 fraction_loss = 3;
    if (has_fraction_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fraction_loss());
    }

    // optional uint32 total_packets = 4;
    if (has_total_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_packets());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossBasedBweUpdates::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LossBasedBweUpdates*>(&from));
}

void LossBasedBweUpdates::MergeFrom(const LossBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.LossBasedBweUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_deltas_ms();
      timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bitrate_deltas_bps();
      bitrate_deltas_bps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_deltas_bps_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fraction_loss_deltas();
      fraction_loss_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fraction_loss_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_total_packets_deltas();
      total_packets_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.total_packets_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000040u) {
      fraction_loss_ = from.fraction_loss_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_packets_ = from.total_packets_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LossBasedBweUpdates::CopyFrom(const LossBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.LossBasedBweUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossBasedBweUpdates::IsInitialized() const {
  return true;
}

void LossBasedBweUpdates::Swap(LossBasedBweUpdates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LossBasedBweUpdates::InternalSwap(LossBasedBweUpdates* other) {
  timestamp_deltas_ms_.Swap(&other->timestamp_deltas_ms_);
  bitrate_deltas_bps_.Swap(&other->bitrate_deltas_bps_);
  fraction_loss_deltas_.Swap(&other->fraction_loss_deltas_);
  total_packets_deltas_.Swap(&other->total_packets_deltas_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(bitrate_bps_, other->bitrate_bps_);
  std::swap(fraction_loss_, other->fraction_loss_);
  std::swap(total_packets_, other->total_packets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LossBasedBweUpdates::GetTypeName() const {
  return "webrtc.rtclog2.LossBasedBweUpdates";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LossBasedBweUpdates

// optional int64 timestamp_ms = 1;
bool LossBasedBweUpdates::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LossBasedBweUpdates::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000010u;
}
void LossBasedBweUpdates::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
void LossBasedBweUpdates::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 LossBasedBweUpdates::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms)
  return timestamp_ms_;
}
void LossBasedBweUpdates::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms)
}

// optional uint32 bitrate_bps = 2;
bool LossBasedBweUpdates::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LossBasedBweUpdates::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000020u;
}
void LossBasedBweUpdates::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000020u;
}
void LossBasedBweUpdates::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  clear_has_bitrate_bps();
}
::google::protobuf::uint32 LossBasedBweUpdates::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps)
  return bitrate_bps_;
}
void LossBasedBweUpdates::set_bitrate_bps(::google::protobuf::uint32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps)
}

// optional uint32 fraction_loss = 3;
bool LossBasedBweUpdates::has_fraction_loss() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LossBasedBweUpdates::set_has_fraction_loss() {
  _has_bits_[0] |= 0x00000040u;
}
void LossBasedBweUpdates::clear_has_fraction_loss() {
  _has_bits_[0] &= ~0x00000040u;
}
void LossBasedBweUpdates::clear_fraction_loss() {
  fraction_loss_ = 0u;
  clear_has_fraction_loss();
}
::google::protobuf::uint32 LossBasedBweUpdates::fraction_loss() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss)
  return fraction_loss_;
}
void LossBasedBweUpdates::set_fraction_loss(::google::protobuf::uint32 value) {
  set_has_fraction_loss();
  fraction_loss_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss)
}

// optional uint32 total_packets = 4;
bool LossBasedBweUpdates::has_total_packets() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LossBasedBweUpdates::set_has_total_packets() {
  _has_bits_[0] |= 0x00000080u;
}
void LossBasedBweUpdates::clear_has_total_packets() {
  _has_bits_[0] &= ~0x00000080u;
}
void LossBasedBweUpdates::clear_total_packets() {
  total_packets_ = 0u;
  clear_has_total_packets();
}
::google::protobuf::uint32 LossBasedBweUpdates::total_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.total_packets)
  return total_packets_;
}
void LossBasedBweUpdates::set_total_packets(::google::protobuf::uint32 value) {
  set_has_total_packets();
  total_packets_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.total_packets)
}

// optional bytes timestamp_deltas_ms = 101;
bool LossBasedBweUpdates::has_timestamp_deltas_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LossBasedBweUpdates::set_has_timestamp_deltas_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void LossBasedBweUpdates::clear_has_timestamp_deltas_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void LossBasedBweUpdates::clear_timestamp_deltas_ms() {
  timestamp_deltas_ms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_deltas_ms();
}
const ::std::string& LossBasedBweUpdates::timestamp_deltas_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.timestamp_deltas_ms)
  return timestamp_deltas_ms_.GetNoArena();
}
void LossBasedBweUpdates::set_timestamp_deltas_ms(const ::std::string& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.timestamp_deltas_ms)
}
#if LANG_CXX11
void LossBasedBweUpdates::set_timestamp_deltas_ms(::std::string&& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.timestamp_deltas_ms)
}
#endif
void LossBasedBweUpdates::set_timestamp_deltas_ms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.timestamp_deltas_ms)
}
void LossBasedBweUpdates::set_timestamp_deltas_ms(const void* value, size_t size) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.timestamp_deltas_ms)
}
::std::string* LossBasedBweUpdates::mutable_timestamp_deltas_ms() {
  set_has_timestamp_deltas_ms();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.timestamp_deltas_ms)
  return timestamp_deltas_ms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LossBasedBweUpdates::release_timestamp_deltas_ms() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.timestamp_deltas_ms)
  clear_has_timestamp_deltas_ms();
  return timestamp_deltas_ms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LossBasedBweUpdates::set_allocated_timestamp_deltas_ms(::std::string* timestamp_deltas_ms) {
  if (timestamp_deltas_ms != NULL) {
    set_has_timestamp_deltas_ms();
  } else {
    clear_has_timestamp_deltas_ms();
  }
  timestamp_deltas_ms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_deltas_ms);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.timestamp_deltas_ms)
}

// optional bytes bitrate_deltas_bps = 102;
bool LossBasedBweUpdates::has_bitrate_deltas_bps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LossBasedBweUpdates::set_has_bitrate_deltas_bps() {
  _has_bits_[0] |= 0x00000002u;
}
void LossBasedBweUpdates::clear_has_bitrate_deltas_bps() {
  _has_bits_[0] &= ~0x00000002u;
}
void LossBasedBweUpdates::clear_bitrate_deltas_bps() {
  bitrate_deltas_bps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bitrate_deltas_bps();
}
const ::std::string& LossBasedBweUpdates::bitrate_deltas_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.bitrate_deltas_bps)
  return bitrate_deltas_bps_.GetNoArena();
}
void LossBasedBweUpdates::set_bitrate_deltas_bps(const ::std::string& value) {
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.bitrate_deltas_bps)
}
#if LANG_CXX11
void LossBasedBweUpdates::set_bitrate_deltas_bps(::std::string&& value) {
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.bitrate_deltas_bps)
}
#endif
void LossBasedBweUpdates::set_bitrate_deltas_bps(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.bitrate_deltas_bps)
}
void LossBasedBweUpdates::set_bitrate_deltas_bps(const void* value, size_t size) {
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.bitrate_deltas_bps)
}
::std::string* LossBasedBweUpdates::mutable_bitrate_deltas_bps() {
  set_has_bitrate_deltas_bps();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.bitrate_deltas_bps)
  return bitrate_deltas_bps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LossBasedBweUpdates::release_bitrate_deltas_bps() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.bitrate_deltas_bps)
  clear_has_bitrate_deltas_bps();
  return bitrate_deltas_bps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LossBasedBweUpdates::set_allocated_bitrate_deltas_bps(::std::string* bitrate_deltas_bps) {
  if (bitrate_deltas_bps != NULL) {
    set_has_bitrate_deltas_bps();
  } else {
    clear_has_bitrate_deltas_bps();
  }
  bitrate_deltas_bps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitrate_deltas_bps);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.bitrate_deltas_bps)
}

// optional bytes fraction_loss_deltas = 103;
bool LossBasedBweUpdates::has_fraction_loss_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LossBasedBweUpdates::set_has_fraction_loss_deltas() {
  _has_bits_[0] |= 0x00000004u;
}
void LossBasedBweUpdates::clear_has_fraction_loss_deltas() {
  _has_bits_[0] &= ~0x00000004u;
}
void LossBasedBweUpdates::clear_fraction_loss_deltas() {
  fraction_loss_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fraction_loss_deltas();
}
const ::std::string& LossBasedBweUpdates::fraction_loss_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
  return fraction_loss_deltas_.GetNoArena();
}
void LossBasedBweUpdates::set_fraction_loss_deltas(const ::std::string& value) {
  set_has_fraction_loss_deltas();
  fraction_loss_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
#if LANG_CXX11
void LossBasedBweUpdates::set_fraction_loss_deltas(::std::string&& value) {
  set_has_fraction_loss_deltas();
  fraction_loss_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
#endif
void LossBasedBweUpdates::set_fraction_loss_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fraction_loss_deltas();
  fraction_loss_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
void LossBasedBweUpdates::set_fraction_loss_deltas(const void* value, size_t size) {
  set_has_fraction_loss_deltas();
  fraction_loss_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
::std::string* LossBasedBweUpdates::mutable_fraction_loss_deltas() {
  set_has_fraction_loss_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
  return fraction_loss_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LossBasedBweUpdates::release_fraction_loss_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
  clear_has_fraction_loss_deltas();
  return fraction_loss_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LossBasedBweUpdates::set_allocated_fraction_loss_deltas(::std::string* fraction_loss_deltas) {
  if (fraction_loss_deltas != NULL) {
    set_has_fraction_loss_deltas();
  } else {
    clear_has_fraction_loss_deltas();
  }
  fraction_loss_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fraction_loss_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}

// optional bytes total_packets_deltas = 104;
bool LossBasedBweUpdates::has_total_packets_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LossBasedBweUpdates::set_has_total_packets_deltas() {
  _has_bits_[0] |= 0x00000008u;
}
void LossBasedBweUpdates::clear_has_total_packets_deltas() {
  _has_bits_[0] &= ~0x00000008u;
}
void LossBasedBweUpdates::clear_total_packets_deltas() {
  total_packets_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_total_packets_deltas();
}
const ::std::string& LossBasedBweUpdates::total_packets_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
  return total_packets_deltas_.GetNoArena();
}
void LossBasedBweUpdates::set_total_packets_deltas(const ::std::string& value) {
  set_has_total_packets_deltas();
  total_packets_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
#if LANG_CXX11
void LossBasedBweUpdates::set_total_packets_deltas(::std::string&& value) {
  set_has_total_packets_deltas();
  total_packets_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
#endif
void LossBasedBweUpdates::set_total_packets_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_total_packets_deltas();
  total_packets_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
void LossBasedBweUpdates::set_total_packets_deltas(const void* value, size_t size) {
  set_has_total_packets_deltas();
  total_packets_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
::std::string* LossBasedBweUpdates::mutable_total_packets_deltas() {
  set_has_total_packets_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
  return total_packets_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LossBasedBweUpdates::release_total_packets_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
  clear_has_total_packets_deltas();
  return total_packets_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LossBasedBweUpdates::set_allocated_total_packets_deltas(::std::string* total_packets_deltas) {
  if (total_packets_deltas != NULL) {
    set_has_total_packets_deltas();
  } else {
    clear_has_total_packets_deltas();
  }
  total_packets_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), total_packets_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelayBasedBweUpdates::kTimestampMsFieldNumber;
const int DelayBasedBweUpdates::kBitrateBpsFieldNumber;
const int DelayBasedBweUpdates::kDetectorStateFieldNumber;
const int DelayBasedBweUpdates::kTimestampDeltasMsFieldNumber;
const int DelayBasedBweUpdates::kBitrateDeltasBpsFieldNumber;
const int DelayBasedBweUpdates::kDetectorStateDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelayBasedBweUpdates::DelayBasedBweUpdates()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.DelayBasedBweUpdates)
}
DelayBasedBweUpdates::DelayBasedBweUpdates(const DelayBasedBweUpdates& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_deltas_ms()) {
    timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
  }
  bitrate_deltas_bps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitrate_deltas_bps()) {
    bitrate_deltas_bps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_deltas_bps_);
  }
  detector_state_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_detector_state_deltas()) {
    detector_state_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_state_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&detector_state_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(detector_state_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.DelayBasedBweUpdates)
}

void DelayBasedBweUpdates::SharedCtor() {
  _cached_size_ = 0;
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_deltas_bps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_state_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detector_state_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(detector_state_));
}

DelayBasedBweUpdates::~DelayBasedBweUpdates() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.DelayBasedBweUpdates)
  SharedDtor();
}

void DelayBasedBweUpdates::SharedDtor() {
  timestamp_deltas_ms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_deltas_bps_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_state_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DelayBasedBweUpdates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DelayBasedBweUpdates& DelayBasedBweUpdates::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelayBasedBweUpdates* DelayBasedBweUpdates::New(::google::protobuf::Arena* arena) const {
  DelayBasedBweUpdates* n = new DelayBasedBweUpdates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelayBasedBweUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.DelayBasedBweUpdates)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_timestamp_deltas_ms()) {
      GOOGLE_DCHECK(!timestamp_deltas_ms_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timestamp_deltas_ms_.UnsafeRawStringPointer())->clear();
    }
    if (has_bitrate_deltas_bps()) {
      GOOGLE_DCHECK(!bitrate_deltas_bps_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bitrate_deltas_bps_.UnsafeRawStringPointer())->clear();
    }
    if (has_detector_state_deltas()) {
      GOOGLE_DCHECK(!detector_state_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*detector_state_deltas_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&detector_state_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(detector_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelayBasedBweUpdates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.DelayBasedBweUpdates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState_IsValid(value)) {
            set_detector_state(static_cast< ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_deltas_ms = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_deltas_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bitrate_deltas_bps = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitrate_deltas_bps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes detector_state_deltas = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_detector_state_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.DelayBasedBweUpdates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.DelayBasedBweUpdates)
  return false;
#undef DO_
}

void DelayBasedBweUpdates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.DelayBasedBweUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bitrate_bps(), output);
  }

  // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->detector_state(), output);
  }

  // optional bytes timestamp_deltas_ms = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_deltas_ms(), output);
  }

  // optional bytes bitrate_deltas_bps = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->bitrate_deltas_bps(), output);
  }

  // optional bytes detector_state_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->detector_state_deltas(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.DelayBasedBweUpdates)
}

size_t DelayBasedBweUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.DelayBasedBweUpdates)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes timestamp_deltas_ms = 101;
    if (has_timestamp_deltas_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_deltas_ms());
    }

    // optional bytes bitrate_deltas_bps = 102;
    if (has_bitrate_deltas_bps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bitrate_deltas_bps());
    }

    // optional bytes detector_state_deltas = 103;
    if (has_detector_state_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->detector_state_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 bitrate_bps = 2;
    if (has_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

    // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
    if (has_detector_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->detector_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelayBasedBweUpdates::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DelayBasedBweUpdates*>(&from));
}

void DelayBasedBweUpdates::MergeFrom(const DelayBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.DelayBasedBweUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_deltas_ms();
      timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bitrate_deltas_bps();
      bitrate_deltas_bps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_deltas_bps_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_detector_state_deltas();
      detector_state_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_state_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000020u) {
      detector_state_ = from.detector_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelayBasedBweUpdates::CopyFrom(const DelayBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.DelayBasedBweUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelayBasedBweUpdates::IsInitialized() const {
  return true;
}

void DelayBasedBweUpdates::Swap(DelayBasedBweUpdates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelayBasedBweUpdates::InternalSwap(DelayBasedBweUpdates* other) {
  timestamp_deltas_ms_.Swap(&other->timestamp_deltas_ms_);
  bitrate_deltas_bps_.Swap(&other->bitrate_deltas_bps_);
  detector_state_deltas_.Swap(&other->detector_state_deltas_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(bitrate_bps_, other->bitrate_bps_);
  std::swap(detector_state_, other->detector_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DelayBasedBweUpdates::GetTypeName() const {
  return "webrtc.rtclog2.DelayBasedBweUpdates";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelayBasedBweUpdates

// optional int64 timestamp_ms = 1;
bool DelayBasedBweUpdates::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DelayBasedBweUpdates::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000008u;
}
void DelayBasedBweUpdates::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
void DelayBasedBweUpdates::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 DelayBasedBweUpdates::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms)
  return timestamp_ms_;
}
void DelayBasedBweUpdates::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms)
}

// optional uint32 bitrate_bps = 2;
bool DelayBasedBweUpdates::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DelayBasedBweUpdates::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000010u;
}
void DelayBasedBweUpdates::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000010u;
}
void DelayBasedBweUpdates::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  clear_has_bitrate_bps();
}
::google::protobuf::uint32 DelayBasedBweUpdates::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps)
  return bitrate_bps_;
}
void DelayBasedBweUpdates::set_bitrate_bps(::google::protobuf::uint32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps)
}

// optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
bool DelayBasedBweUpdates::has_detector_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DelayBasedBweUpdates::set_has_detector_state() {
  _has_bits_[0] |= 0x00000020u;
}
void DelayBasedBweUpdates::clear_has_detector_state() {
  _has_bits_[0] &= ~0x00000020u;
}
void DelayBasedBweUpdates::clear_detector_state() {
  detector_state_ = 0;
  clear_has_detector_state();
}
::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::detector_state() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.detector_state)
  return static_cast< ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState >(detector_state_);
}
void DelayBasedBweUpdates::set_detector_state(::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState value) {
  assert(::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState_IsValid(value));
  set_has_detector_state();
  detector_state_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.detector_state)
}

// optional bytes timestamp_deltas_ms = 101;
bool DelayBasedBweUpdates::has_timestamp_deltas_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelayBasedBweUpdates::set_has_timestamp_deltas_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void DelayBasedBweUpdates::clear_has_timestamp_deltas_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelayBasedBweUpdates::clear_timestamp_deltas_ms() {
  timestamp_deltas_ms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_deltas_ms();
}
const ::std::string& DelayBasedBweUpdates::timestamp_deltas_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_deltas_ms)
  return timestamp_deltas_ms_.GetNoArena();
}
void DelayBasedBweUpdates::set_timestamp_deltas_ms(const ::std::string& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_deltas_ms)
}
#if LANG_CXX11
void DelayBasedBweUpdates::set_timestamp_deltas_ms(::std::string&& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_deltas_ms)
}
#endif
void DelayBasedBweUpdates::set_timestamp_deltas_ms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_deltas_ms)
}
void DelayBasedBweUpdates::set_timestamp_deltas_ms(const void* value, size_t size) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_deltas_ms)
}
::std::string* DelayBasedBweUpdates::mutable_timestamp_deltas_ms() {
  set_has_timestamp_deltas_ms();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_deltas_ms)
  return timestamp_deltas_ms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelayBasedBweUpdates::release_timestamp_deltas_ms() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_deltas_ms)
  clear_has_timestamp_deltas_ms();
  return timestamp_deltas_ms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelayBasedBweUpdates::set_allocated_timestamp_deltas_ms(::std::string* timestamp_deltas_ms) {
  if (timestamp_deltas_ms != NULL) {
    set_has_timestamp_deltas_ms();
  } else {
    clear_has_timestamp_deltas_ms();
  }
  timestamp_deltas_ms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_deltas_ms);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_deltas_ms)
}

// optional bytes bitrate_deltas_bps = 102;
bool DelayBasedBweUpdates::has_bitrate_deltas_bps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelayBasedBweUpdates::set_has_bitrate_deltas_bps() {
  _has_bits_[0] |= 0x00000002u;
}
void DelayBasedBweUpdates::clear_has_bitrate_deltas_bps() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelayBasedBweUpdates::clear_bitrate_deltas_bps() {
  bitrate_deltas_bps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bitrate_deltas_bps();
}
const ::std::string& DelayBasedBweUpdates::bitrate_deltas_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_deltas_bps)
  return bitrate_deltas_bps_.GetNoArena();
}
void DelayBasedBweUpdates::set_bitrate_deltas_bps(const ::std::string& value) {
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_deltas_bps)
}
#if LANG_CXX11
void DelayBasedBweUpdates::set_bitrate_deltas_bps(::std::string&& value) {
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_deltas_bps)
}
#endif
void DelayBasedBweUpdates::set_bitrate_deltas_bps(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_deltas_bps)
}
void DelayBasedBweUpdates::set_bitrate_deltas_bps(const void* value, size_t size) {
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_deltas_bps)
}
::std::string* DelayBasedBweUpdates::mutable_bitrate_deltas_bps() {
  set_has_bitrate_deltas_bps();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_deltas_bps)
  return bitrate_deltas_bps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelayBasedBweUpdates::release_bitrate_deltas_bps() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_deltas_bps)
  clear_has_bitrate_deltas_bps();
  return bitrate_deltas_bps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelayBasedBweUpdates::set_allocated_bitrate_deltas_bps(::std::string* bitrate_deltas_bps) {
  if (bitrate_deltas_bps != NULL) {
    set_has_bitrate_deltas_bps();
  } else {
    clear_has_bitrate_deltas_bps();
  }
  bitrate_deltas_bps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitrate_deltas_bps);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_deltas_bps)
}

// optional bytes detector_state_deltas = 103;
bool DelayBasedBweUpdates::has_detector_state_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DelayBasedBweUpdates::set_has_detector_state_deltas() {
  _has_bits_[0] |= 0x00000004u;
}
void DelayBasedBweUpdates::clear_has_detector_state_deltas() {
  _has_bits_[0] &= ~0x00000004u;
}
void DelayBasedBweUpdates::clear_detector_state_deltas() {
  detector_state_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_detector_state_deltas();
}
const ::std::string& DelayBasedBweUpdates::detector_state_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
  return detector_state_deltas_.GetNoArena();
}
void DelayBasedBweUpdates::set_detector_state_deltas(const ::std::string& value) {
  set_has_detector_state_deltas();
  detector_state_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
#if LANG_CXX11
void DelayBasedBweUpdates::set_detector_state_deltas(::std::string&& value) {
  set_has_detector_state_deltas();
  detector_state_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
#endif
void DelayBasedBweUpdates::set_detector_state_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_detector_state_deltas();
  detector_state_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
void DelayBasedBweUpdates::set_detector_state_deltas(const void* value, size_t size) {
  set_has_detector_state_deltas();
  detector_state_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
::std::string* DelayBasedBweUpdates::mutable_detector_state_deltas() {
  set_has_detector_state_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
  return detector_state_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelayBasedBweUpdates::release_detector_state_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
  clear_has_detector_state_deltas();
  return detector_state_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelayBasedBweUpdates::set_allocated_detector_state_deltas(::std::string* detector_state_deltas) {
  if (detector_state_deltas != NULL) {
    set_has_detector_state_deltas();
  } else {
    clear_has_detector_state_deltas();
  }
  detector_state_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detector_state_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtpHeaderExtensionConfig::kTransmissionTimeOffsetIdFieldNumber;
const int RtpHeaderExtensionConfig::kAbsoluteSendTimeIdFieldNumber;
const int RtpHeaderExtensionConfig::kTransportSequenceNumberIdFieldNumber;
const int RtpHeaderExtensionConfig::kAudioLevelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtpHeaderExtensionConfig::RtpHeaderExtensionConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
}
RtpHeaderExtensionConfig::RtpHeaderExtensionConfig(const RtpHeaderExtensionConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transmission_time_offset_id_, &from.transmission_time_offset_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_level_id_) -
    reinterpret_cast<char*>(&transmission_time_offset_id_)) + sizeof(audio_level_id_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
}

void RtpHeaderExtensionConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transmission_time_offset_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_level_id_) -
      reinterpret_cast<char*>(&transmission_time_offset_id_)) + sizeof(audio_level_id_));
}

RtpHeaderExtensionConfig::~RtpHeaderExtensionConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
  SharedDtor();
}

void RtpHeaderExtensionConfig::SharedDtor() {
}

void RtpHeaderExtensionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RtpHeaderExtensionConfig& RtpHeaderExtensionConfig::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

RtpHeaderExtensionConfig* RtpHeaderExtensionConfig::New(::google::protobuf::Arena* arena) const {
  RtpHeaderExtensionConfig* n = new RtpHeaderExtensionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtpHeaderExtensionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&transmission_time_offset_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_level_id_) -
        reinterpret_cast<char*>(&transmission_time_offset_id_)) + sizeof(audio_level_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RtpHeaderExtensionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transmission_time_offset_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_transmission_time_offset_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmission_time_offset_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 absolute_send_time_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_absolute_send_time_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &absolute_send_time_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transport_sequence_number_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_transport_sequence_number_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_sequence_number_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audio_level_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_audio_level_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.RtpHeaderExtensionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.RtpHeaderExtensionConfig)
  return false;
#undef DO_
}

void RtpHeaderExtensionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 transmission_time_offset_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transmission_time_offset_id(), output);
  }

  // optional int32 absolute_send_time_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->absolute_send_time_id(), output);
  }

  // optional int32 transport_sequence_number_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->transport_sequence_number_id(), output);
  }

  // optional int32 audio_level_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->audio_level_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.RtpHeaderExtensionConfig)
}

size_t RtpHeaderExtensionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 transmission_time_offset_id = 1;
    if (has_transmission_time_offset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmission_time_offset_id());
    }

    // optional int32 absolute_send_time_id = 2;
    if (has_absolute_send_time_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->absolute_send_time_id());
    }

    // optional int32 transport_sequence_number_id = 3;
    if (has_transport_sequence_number_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transport_sequence_number_id());
    }

    // optional int32 audio_level_id = 4;
    if (has_audio_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_level_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtpHeaderExtensionConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RtpHeaderExtensionConfig*>(&from));
}

void RtpHeaderExtensionConfig::MergeFrom(const RtpHeaderExtensionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      transmission_time_offset_id_ = from.transmission_time_offset_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      absolute_send_time_id_ = from.absolute_send_time_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      transport_sequence_number_id_ = from.transport_sequence_number_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      audio_level_id_ = from.audio_level_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RtpHeaderExtensionConfig::CopyFrom(const RtpHeaderExtensionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpHeaderExtensionConfig::IsInitialized() const {
  return true;
}

void RtpHeaderExtensionConfig::Swap(RtpHeaderExtensionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtpHeaderExtensionConfig::InternalSwap(RtpHeaderExtensionConfig* other) {
  std::swap(transmission_time_offset_id_, other->transmission_time_offset_id_);
  std::swap(absolute_send_time_id_, other->absolute_send_time_id_);
  std::swap(transport_sequence_number_id_, other->transport_sequence_number_id_);
  std::swap(audio_level_id_, other->audio_level_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RtpHeaderExtensionConfig::GetTypeName() const {
  return "webrtc.rtclog2.RtpHeaderExtensionConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtpHeaderExtensionConfig

// optional int32 transmission_time_offset_id = 1;
bool RtpHeaderExtensionConfig::has_transmission_time_offset_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RtpHeaderExtensionConfig::set_has_transmission_time_offset_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RtpHeaderExtensionConfig::clear_has_transmission_time_offset_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RtpHeaderExtensionConfig::clear_transmission_time_offset_id() {
  transmission_time_offset_id_ = 0;
  clear_has_transmission_time_offset_id();
}
::google::protobuf::int32 RtpHeaderExtensionConfig::transmission_time_offset_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.transmission_time_offset_id)
  return transmission_time_offset_id_;
}
void RtpHeaderExtensionConfig::set_transmission_time_offset_id(::google::protobuf::int32 value) {
  set_has_transmission_time_offset_id();
  transmission_time_offset_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.transmission_time_offset_id)
}

// optional int32 absolute_send_time_id = 2;
bool RtpHeaderExtensionConfig::has_absolute_send_time_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RtpHeaderExtensionConfig::set_has_absolute_send_time_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RtpHeaderExtensionConfig::clear_has_absolute_send_time_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RtpHeaderExtensionConfig::clear_absolute_send_time_id() {
  absolute_send_time_id_ = 0;
  clear_has_absolute_send_time_id();
}
::google::protobuf::int32 RtpHeaderExtensionConfig::absolute_send_time_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.absolute_send_time_id)
  return absolute_send_time_id_;
}
void RtpHeaderExtensionConfig::set_absolute_send_time_id(::google::protobuf::int32 value) {
  set_has_absolute_send_time_id();
  absolute_send_time_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.absolute_send_time_id)
}

// optional int32 transport_sequence_number_id = 3;
bool RtpHeaderExtensionConfig::has_transport_sequence_number_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RtpHeaderExtensionConfig::set_has_transport_sequence_number_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RtpHeaderExtensionConfig::clear_has_transport_sequence_number_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RtpHeaderExtensionConfig::clear_transport_sequence_number_id() {
  transport_sequence_number_id_ = 0;
  clear_has_transport_sequence_number_id();
}
::google::protobuf::int32 RtpHeaderExtensionConfig::transport_sequence_number_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.transport_sequence_number_id)
  return transport_sequence_number_id_;
}
void RtpHeaderExtensionConfig::set_transport_sequence_number_id(::google::protobuf::int32 value) {
  set_has_transport_sequence_number_id();
  transport_sequence_number_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.transport_sequence_number_id)
}

// optional int32 audio_level_id = 4;
bool RtpHeaderExtensionConfig::has_audio_level_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RtpHeaderExtensionConfig::set_has_audio_level_id() {
  _has_bits_[0] |= 0x00000008u;
}
void RtpHeaderExtensionConfig::clear_has_audio_level_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void RtpHeaderExtensionConfig::clear_audio_level_id() {
  audio_level_id_ = 0;
  clear_has_audio_level_id();
}
::google::protobuf::int32 RtpHeaderExtensionConfig::audio_level_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.audio_level_id)
  return audio_level_id_;
}
void RtpHeaderExtensionConfig::set_audio_level_id(::google::protobuf::int32 value) {
  set_has_audio_level_id();
  audio_level_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.audio_level_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoRecvStreamConfig::kTimestampMsFieldNumber;
const int VideoRecvStreamConfig::kRemoteSsrcFieldNumber;
const int VideoRecvStreamConfig::kLocalSsrcFieldNumber;
const int VideoRecvStreamConfig::kRtxSsrcFieldNumber;
const int VideoRecvStreamConfig::kRsidFieldNumber;
const int VideoRecvStreamConfig::kHeaderExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoRecvStreamConfig::VideoRecvStreamConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.VideoRecvStreamConfig)
}
VideoRecvStreamConfig::VideoRecvStreamConfig(const VideoRecvStreamConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rsid()) {
    rsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsid_);
  }
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = NULL;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtx_ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.VideoRecvStreamConfig)
}

void VideoRecvStreamConfig::SharedCtor() {
  _cached_size_ = 0;
  rsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtx_ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(rtx_ssrc_));
}

VideoRecvStreamConfig::~VideoRecvStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.VideoRecvStreamConfig)
  SharedDtor();
}

void VideoRecvStreamConfig::SharedDtor() {
  rsid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_extensions_;
  }
}

void VideoRecvStreamConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoRecvStreamConfig& VideoRecvStreamConfig::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoRecvStreamConfig* VideoRecvStreamConfig::New(::google::protobuf::Arena* arena) const {
  VideoRecvStreamConfig* n = new VideoRecvStreamConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoRecvStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.VideoRecvStreamConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_rsid()) {
      GOOGLE_DCHECK(!rsid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rsid_.UnsafeRawStringPointer())->clear();
    }
    if (has_header_extensions()) {
      GOOGLE_DCHECK(header_extensions_ != NULL);
      header_extensions_->::webrtc::rtclog2::RtpHeaderExtensionConfig::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtx_ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoRecvStreamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.VideoRecvStreamConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_ssrc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_remote_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_ssrc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_local_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtx_ssrc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_rtx_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtx_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rsid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rsid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.VideoRecvStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.VideoRecvStreamConfig)
  return false;
#undef DO_
}

void VideoRecvStreamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.VideoRecvStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 remote_ssrc = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remote_ssrc(), output);
  }

  // optional uint32 local_ssrc = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->local_ssrc(), output);
  }

  // optional uint32 rtx_ssrc = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rtx_ssrc(), output);
  }

  // optional bytes rsid = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->rsid(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->header_extensions_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.VideoRecvStreamConfig)
}

size_t VideoRecvStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.VideoRecvStreamConfig)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes rsid = 5;
    if (has_rsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rsid());
    }

    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 6;
    if (has_header_extensions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 remote_ssrc = 2;
    if (has_remote_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ssrc());
    }

    // optional uint32 local_ssrc = 3;
    if (has_local_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

    // optional uint32 rtx_ssrc = 4;
    if (has_rtx_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtx_ssrc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoRecvStreamConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoRecvStreamConfig*>(&from));
}

void VideoRecvStreamConfig::MergeFrom(const VideoRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.VideoRecvStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rsid();
      rsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      remote_ssrc_ = from.remote_ssrc_;
    }
    if (cached_has_bits & 0x00000010u) {
      local_ssrc_ = from.local_ssrc_;
    }
    if (cached_has_bits & 0x00000020u) {
      rtx_ssrc_ = from.rtx_ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoRecvStreamConfig::CopyFrom(const VideoRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.VideoRecvStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRecvStreamConfig::IsInitialized() const {
  return true;
}

void VideoRecvStreamConfig::Swap(VideoRecvStreamConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoRecvStreamConfig::InternalSwap(VideoRecvStreamConfig* other) {
  rsid_.Swap(&other->rsid_);
  std::swap(header_extensions_, other->header_extensions_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(remote_ssrc_, other->remote_ssrc_);
  std::swap(local_ssrc_, other->local_ssrc_);
  std::swap(rtx_ssrc_, other->rtx_ssrc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoRecvStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.VideoRecvStreamConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoRecvStreamConfig

// optional int64 timestamp_ms = 1;
bool VideoRecvStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoRecvStreamConfig::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoRecvStreamConfig::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoRecvStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 VideoRecvStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
void VideoRecvStreamConfig::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.timestamp_ms)
}

// optional uint32 remote_ssrc = 2;
bool VideoRecvStreamConfig::has_remote_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoRecvStreamConfig::set_has_remote_ssrc() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoRecvStreamConfig::clear_has_remote_ssrc() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoRecvStreamConfig::clear_remote_ssrc() {
  remote_ssrc_ = 0u;
  clear_has_remote_ssrc();
}
::google::protobuf::uint32 VideoRecvStreamConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.remote_ssrc)
  return remote_ssrc_;
}
void VideoRecvStreamConfig::set_remote_ssrc(::google::protobuf::uint32 value) {
  set_has_remote_ssrc();
  remote_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.remote_ssrc)
}

// optional uint32 local_ssrc = 3;
bool VideoRecvStreamConfig::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VideoRecvStreamConfig::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000010u;
}
void VideoRecvStreamConfig::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000010u;
}
void VideoRecvStreamConfig::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
::google::protobuf::uint32 VideoRecvStreamConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.local_ssrc)
  return local_ssrc_;
}
void VideoRecvStreamConfig::set_local_ssrc(::google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.local_ssrc)
}

// optional uint32 rtx_ssrc = 4;
bool VideoRecvStreamConfig::has_rtx_ssrc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VideoRecvStreamConfig::set_has_rtx_ssrc() {
  _has_bits_[0] |= 0x00000020u;
}
void VideoRecvStreamConfig::clear_has_rtx_ssrc() {
  _has_bits_[0] &= ~0x00000020u;
}
void VideoRecvStreamConfig::clear_rtx_ssrc() {
  rtx_ssrc_ = 0u;
  clear_has_rtx_ssrc();
}
::google::protobuf::uint32 VideoRecvStreamConfig::rtx_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.rtx_ssrc)
  return rtx_ssrc_;
}
void VideoRecvStreamConfig::set_rtx_ssrc(::google::protobuf::uint32 value) {
  set_has_rtx_ssrc();
  rtx_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.rtx_ssrc)
}

// optional bytes rsid = 5;
bool VideoRecvStreamConfig::has_rsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoRecvStreamConfig::set_has_rsid() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoRecvStreamConfig::clear_has_rsid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoRecvStreamConfig::clear_rsid() {
  rsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rsid();
}
const ::std::string& VideoRecvStreamConfig::rsid() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.rsid)
  return rsid_.GetNoArena();
}
void VideoRecvStreamConfig::set_rsid(const ::std::string& value) {
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.rsid)
}
#if LANG_CXX11
void VideoRecvStreamConfig::set_rsid(::std::string&& value) {
  set_has_rsid();
  rsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.VideoRecvStreamConfig.rsid)
}
#endif
void VideoRecvStreamConfig::set_rsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.VideoRecvStreamConfig.rsid)
}
void VideoRecvStreamConfig::set_rsid(const void* value, size_t size) {
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.VideoRecvStreamConfig.rsid)
}
::std::string* VideoRecvStreamConfig::mutable_rsid() {
  set_has_rsid();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.VideoRecvStreamConfig.rsid)
  return rsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoRecvStreamConfig::release_rsid() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.VideoRecvStreamConfig.rsid)
  clear_has_rsid();
  return rsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoRecvStreamConfig::set_allocated_rsid(::std::string* rsid) {
  if (rsid != NULL) {
    set_has_rsid();
  } else {
    clear_has_rsid();
  }
  rsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsid);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.VideoRecvStreamConfig.rsid)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 6;
bool VideoRecvStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoRecvStreamConfig::set_has_header_extensions() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoRecvStreamConfig::clear_has_header_extensions() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoRecvStreamConfig::clear_header_extensions() {
  if (header_extensions_ != NULL) header_extensions_->::webrtc::rtclog2::RtpHeaderExtensionConfig::Clear();
  clear_has_header_extensions();
}
const ::webrtc::rtclog2::RtpHeaderExtensionConfig& VideoRecvStreamConfig::header_extensions() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
  return header_extensions_ != NULL ? *header_extensions_
                         : *::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance();
}
::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoRecvStreamConfig::mutable_header_extensions() {
  set_has_header_extensions();
  if (header_extensions_ == NULL) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
  return header_extensions_;
}
::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoRecvStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
  clear_has_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = NULL;
  return temp;
}
void VideoRecvStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  delete header_extensions_;
  header_extensions_ = header_extensions;
  if (header_extensions) {
    set_has_header_extensions();
  } else {
    clear_has_header_extensions();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoSendStreamConfig::kTimestampMsFieldNumber;
const int VideoSendStreamConfig::kSsrcFieldNumber;
const int VideoSendStreamConfig::kRtxSsrcFieldNumber;
const int VideoSendStreamConfig::kRsidFieldNumber;
const int VideoSendStreamConfig::kHeaderExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoSendStreamConfig::VideoSendStreamConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.VideoSendStreamConfig)
}
VideoSendStreamConfig::VideoSendStreamConfig(const VideoSendStreamConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rsid()) {
    rsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsid_);
  }
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = NULL;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtx_ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.VideoSendStreamConfig)
}

void VideoSendStreamConfig::SharedCtor() {
  _cached_size_ = 0;
  rsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtx_ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(rtx_ssrc_));
}

VideoSendStreamConfig::~VideoSendStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.VideoSendStreamConfig)
  SharedDtor();
}

void VideoSendStreamConfig::SharedDtor() {
  rsid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_extensions_;
  }
}

void VideoSendStreamConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoSendStreamConfig& VideoSendStreamConfig::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoSendStreamConfig* VideoSendStreamConfig::New(::google::protobuf::Arena* arena) const {
  VideoSendStreamConfig* n = new VideoSendStreamConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoSendStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.VideoSendStreamConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_rsid()) {
      GOOGLE_DCHECK(!rsid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rsid_.UnsafeRawStringPointer())->clear();
    }
    if (has_header_extensions()) {
      GOOGLE_DCHECK(header_extensions_ != NULL);
      header_extensions_->::webrtc::rtclog2::RtpHeaderExtensionConfig::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtx_ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoSendStreamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.VideoSendStreamConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ssrc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtx_ssrc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rtx_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtx_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rsid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rsid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.VideoSendStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.VideoSendStreamConfig)
  return false;
#undef DO_
}

void VideoSendStreamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.VideoSendStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 ssrc = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ssrc(), output);
  }

  // optional uint32 rtx_ssrc = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rtx_ssrc(), output);
  }

  // optional bytes rsid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->rsid(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->header_extensions_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.VideoSendStreamConfig)
}

size_t VideoSendStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.VideoSendStreamConfig)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes rsid = 4;
    if (has_rsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rsid());
    }

    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
    if (has_header_extensions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 ssrc = 2;
    if (has_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssrc());
    }

    // optional uint32 rtx_ssrc = 3;
    if (has_rtx_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtx_ssrc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoSendStreamConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoSendStreamConfig*>(&from));
}

void VideoSendStreamConfig::MergeFrom(const VideoSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.VideoSendStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rsid();
      rsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      ssrc_ = from.ssrc_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtx_ssrc_ = from.rtx_ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoSendStreamConfig::CopyFrom(const VideoSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.VideoSendStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSendStreamConfig::IsInitialized() const {
  return true;
}

void VideoSendStreamConfig::Swap(VideoSendStreamConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoSendStreamConfig::InternalSwap(VideoSendStreamConfig* other) {
  rsid_.Swap(&other->rsid_);
  std::swap(header_extensions_, other->header_extensions_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(ssrc_, other->ssrc_);
  std::swap(rtx_ssrc_, other->rtx_ssrc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoSendStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.VideoSendStreamConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoSendStreamConfig

// optional int64 timestamp_ms = 1;
bool VideoSendStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoSendStreamConfig::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoSendStreamConfig::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoSendStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 VideoSendStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
void VideoSendStreamConfig::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoSendStreamConfig.timestamp_ms)
}

// optional uint32 ssrc = 2;
bool VideoSendStreamConfig::has_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoSendStreamConfig::set_has_ssrc() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoSendStreamConfig::clear_has_ssrc() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoSendStreamConfig::clear_ssrc() {
  ssrc_ = 0u;
  clear_has_ssrc();
}
::google::protobuf::uint32 VideoSendStreamConfig::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.ssrc)
  return ssrc_;
}
void VideoSendStreamConfig::set_ssrc(::google::protobuf::uint32 value) {
  set_has_ssrc();
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoSendStreamConfig.ssrc)
}

// optional uint32 rtx_ssrc = 3;
bool VideoSendStreamConfig::has_rtx_ssrc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VideoSendStreamConfig::set_has_rtx_ssrc() {
  _has_bits_[0] |= 0x00000010u;
}
void VideoSendStreamConfig::clear_has_rtx_ssrc() {
  _has_bits_[0] &= ~0x00000010u;
}
void VideoSendStreamConfig::clear_rtx_ssrc() {
  rtx_ssrc_ = 0u;
  clear_has_rtx_ssrc();
}
::google::protobuf::uint32 VideoSendStreamConfig::rtx_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.rtx_ssrc)
  return rtx_ssrc_;
}
void VideoSendStreamConfig::set_rtx_ssrc(::google::protobuf::uint32 value) {
  set_has_rtx_ssrc();
  rtx_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoSendStreamConfig.rtx_ssrc)
}

// optional bytes rsid = 4;
bool VideoSendStreamConfig::has_rsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoSendStreamConfig::set_has_rsid() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoSendStreamConfig::clear_has_rsid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoSendStreamConfig::clear_rsid() {
  rsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rsid();
}
const ::std::string& VideoSendStreamConfig::rsid() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.rsid)
  return rsid_.GetNoArena();
}
void VideoSendStreamConfig::set_rsid(const ::std::string& value) {
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoSendStreamConfig.rsid)
}
#if LANG_CXX11
void VideoSendStreamConfig::set_rsid(::std::string&& value) {
  set_has_rsid();
  rsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.VideoSendStreamConfig.rsid)
}
#endif
void VideoSendStreamConfig::set_rsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.VideoSendStreamConfig.rsid)
}
void VideoSendStreamConfig::set_rsid(const void* value, size_t size) {
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.VideoSendStreamConfig.rsid)
}
::std::string* VideoSendStreamConfig::mutable_rsid() {
  set_has_rsid();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.VideoSendStreamConfig.rsid)
  return rsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoSendStreamConfig::release_rsid() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.VideoSendStreamConfig.rsid)
  clear_has_rsid();
  return rsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoSendStreamConfig::set_allocated_rsid(::std::string* rsid) {
  if (rsid != NULL) {
    set_has_rsid();
  } else {
    clear_has_rsid();
  }
  rsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsid);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.VideoSendStreamConfig.rsid)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
bool VideoSendStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoSendStreamConfig::set_has_header_extensions() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoSendStreamConfig::clear_has_header_extensions() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoSendStreamConfig::clear_header_extensions() {
  if (header_extensions_ != NULL) header_extensions_->::webrtc::rtclog2::RtpHeaderExtensionConfig::Clear();
  clear_has_header_extensions();
}
const ::webrtc::rtclog2::RtpHeaderExtensionConfig& VideoSendStreamConfig::header_extensions() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
  return header_extensions_ != NULL ? *header_extensions_
                         : *::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance();
}
::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoSendStreamConfig::mutable_header_extensions() {
  set_has_header_extensions();
  if (header_extensions_ == NULL) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
  return header_extensions_;
}
::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoSendStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
  clear_has_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = NULL;
  return temp;
}
void VideoSendStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  delete header_extensions_;
  header_extensions_ = header_extensions;
  if (header_extensions) {
    set_has_header_extensions();
  } else {
    clear_has_header_extensions();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioRecvStreamConfig::kTimestampMsFieldNumber;
const int AudioRecvStreamConfig::kRemoteSsrcFieldNumber;
const int AudioRecvStreamConfig::kLocalSsrcFieldNumber;
const int AudioRecvStreamConfig::kRsidFieldNumber;
const int AudioRecvStreamConfig::kHeaderExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioRecvStreamConfig::AudioRecvStreamConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioRecvStreamConfig)
}
AudioRecvStreamConfig::AudioRecvStreamConfig(const AudioRecvStreamConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rsid()) {
    rsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsid_);
  }
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = NULL;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(local_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioRecvStreamConfig)
}

void AudioRecvStreamConfig::SharedCtor() {
  _cached_size_ = 0;
  rsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(local_ssrc_));
}

AudioRecvStreamConfig::~AudioRecvStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioRecvStreamConfig)
  SharedDtor();
}

void AudioRecvStreamConfig::SharedDtor() {
  rsid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_extensions_;
  }
}

void AudioRecvStreamConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioRecvStreamConfig& AudioRecvStreamConfig::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioRecvStreamConfig* AudioRecvStreamConfig::New(::google::protobuf::Arena* arena) const {
  AudioRecvStreamConfig* n = new AudioRecvStreamConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioRecvStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioRecvStreamConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_rsid()) {
      GOOGLE_DCHECK(!rsid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rsid_.UnsafeRawStringPointer())->clear();
    }
    if (has_header_extensions()) {
      GOOGLE_DCHECK(header_extensions_ != NULL);
      header_extensions_->::webrtc::rtclog2::RtpHeaderExtensionConfig::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(local_ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioRecvStreamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioRecvStreamConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_ssrc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_remote_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_ssrc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_local_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rsid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rsid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioRecvStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioRecvStreamConfig)
  return false;
#undef DO_
}

void AudioRecvStreamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioRecvStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 remote_ssrc = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remote_ssrc(), output);
  }

  // optional uint32 local_ssrc = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->local_ssrc(), output);
  }

  // optional bytes rsid = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->rsid(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->header_extensions_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioRecvStreamConfig)
}

size_t AudioRecvStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioRecvStreamConfig)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes rsid = 5;
    if (has_rsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rsid());
    }

    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 6;
    if (has_header_extensions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 remote_ssrc = 2;
    if (has_remote_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ssrc());
    }

    // optional uint32 local_ssrc = 3;
    if (has_local_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioRecvStreamConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioRecvStreamConfig*>(&from));
}

void AudioRecvStreamConfig::MergeFrom(const AudioRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioRecvStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rsid();
      rsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      remote_ssrc_ = from.remote_ssrc_;
    }
    if (cached_has_bits & 0x00000010u) {
      local_ssrc_ = from.local_ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioRecvStreamConfig::CopyFrom(const AudioRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioRecvStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioRecvStreamConfig::IsInitialized() const {
  return true;
}

void AudioRecvStreamConfig::Swap(AudioRecvStreamConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioRecvStreamConfig::InternalSwap(AudioRecvStreamConfig* other) {
  rsid_.Swap(&other->rsid_);
  std::swap(header_extensions_, other->header_extensions_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(remote_ssrc_, other->remote_ssrc_);
  std::swap(local_ssrc_, other->local_ssrc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioRecvStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.AudioRecvStreamConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioRecvStreamConfig

// optional int64 timestamp_ms = 1;
bool AudioRecvStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AudioRecvStreamConfig::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void AudioRecvStreamConfig::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void AudioRecvStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 AudioRecvStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
void AudioRecvStreamConfig::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioRecvStreamConfig.timestamp_ms)
}

// optional uint32 remote_ssrc = 2;
bool AudioRecvStreamConfig::has_remote_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AudioRecvStreamConfig::set_has_remote_ssrc() {
  _has_bits_[0] |= 0x00000008u;
}
void AudioRecvStreamConfig::clear_has_remote_ssrc() {
  _has_bits_[0] &= ~0x00000008u;
}
void AudioRecvStreamConfig::clear_remote_ssrc() {
  remote_ssrc_ = 0u;
  clear_has_remote_ssrc();
}
::google::protobuf::uint32 AudioRecvStreamConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.remote_ssrc)
  return remote_ssrc_;
}
void AudioRecvStreamConfig::set_remote_ssrc(::google::protobuf::uint32 value) {
  set_has_remote_ssrc();
  remote_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioRecvStreamConfig.remote_ssrc)
}

// optional uint32 local_ssrc = 3;
bool AudioRecvStreamConfig::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AudioRecvStreamConfig::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000010u;
}
void AudioRecvStreamConfig::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000010u;
}
void AudioRecvStreamConfig::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
::google::protobuf::uint32 AudioRecvStreamConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.local_ssrc)
  return local_ssrc_;
}
void AudioRecvStreamConfig::set_local_ssrc(::google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioRecvStreamConfig.local_ssrc)
}

// optional bytes rsid = 5;
bool AudioRecvStreamConfig::has_rsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AudioRecvStreamConfig::set_has_rsid() {
  _has_bits_[0] |= 0x00000001u;
}
void AudioRecvStreamConfig::clear_has_rsid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AudioRecvStreamConfig::clear_rsid() {
  rsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rsid();
}
const ::std::string& AudioRecvStreamConfig::rsid() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.rsid)
  return rsid_.GetNoArena();
}
void AudioRecvStreamConfig::set_rsid(const ::std::string& value) {
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioRecvStreamConfig.rsid)
}
#if LANG_CXX11
void AudioRecvStreamConfig::set_rsid(::std::string&& value) {
  set_has_rsid();
  rsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioRecvStreamConfig.rsid)
}
#endif
void AudioRecvStreamConfig::set_rsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioRecvStreamConfig.rsid)
}
void AudioRecvStreamConfig::set_rsid(const void* value, size_t size) {
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioRecvStreamConfig.rsid)
}
::std::string* AudioRecvStreamConfig::mutable_rsid() {
  set_has_rsid();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioRecvStreamConfig.rsid)
  return rsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioRecvStreamConfig::release_rsid() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioRecvStreamConfig.rsid)
  clear_has_rsid();
  return rsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioRecvStreamConfig::set_allocated_rsid(::std::string* rsid) {
  if (rsid != NULL) {
    set_has_rsid();
  } else {
    clear_has_rsid();
  }
  rsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsid);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioRecvStreamConfig.rsid)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 6;
bool AudioRecvStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AudioRecvStreamConfig::set_has_header_extensions() {
  _has_bits_[0] |= 0x00000002u;
}
void AudioRecvStreamConfig::clear_has_header_extensions() {
  _has_bits_[0] &= ~0x00000002u;
}
void AudioRecvStreamConfig::clear_header_extensions() {
  if (header_extensions_ != NULL) header_extensions_->::webrtc::rtclog2::RtpHeaderExtensionConfig::Clear();
  clear_has_header_extensions();
}
const ::webrtc::rtclog2::RtpHeaderExtensionConfig& AudioRecvStreamConfig::header_extensions() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
  return header_extensions_ != NULL ? *header_extensions_
                         : *::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance();
}
::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioRecvStreamConfig::mutable_header_extensions() {
  set_has_header_extensions();
  if (header_extensions_ == NULL) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
  return header_extensions_;
}
::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioRecvStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
  clear_has_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = NULL;
  return temp;
}
void AudioRecvStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  delete header_extensions_;
  header_extensions_ = header_extensions;
  if (header_extensions) {
    set_has_header_extensions();
  } else {
    clear_has_header_extensions();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioSendStreamConfig::kTimestampMsFieldNumber;
const int AudioSendStreamConfig::kSsrcFieldNumber;
const int AudioSendStreamConfig::kRsidFieldNumber;
const int AudioSendStreamConfig::kHeaderExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioSendStreamConfig::AudioSendStreamConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioSendStreamConfig)
}
AudioSendStreamConfig::AudioSendStreamConfig(const AudioSendStreamConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rsid()) {
    rsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsid_);
  }
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = NULL;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioSendStreamConfig)
}

void AudioSendStreamConfig::SharedCtor() {
  _cached_size_ = 0;
  rsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(ssrc_));
}

AudioSendStreamConfig::~AudioSendStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioSendStreamConfig)
  SharedDtor();
}

void AudioSendStreamConfig::SharedDtor() {
  rsid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_extensions_;
  }
}

void AudioSendStreamConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioSendStreamConfig& AudioSendStreamConfig::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioSendStreamConfig* AudioSendStreamConfig::New(::google::protobuf::Arena* arena) const {
  AudioSendStreamConfig* n = new AudioSendStreamConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioSendStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioSendStreamConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_rsid()) {
      GOOGLE_DCHECK(!rsid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rsid_.UnsafeRawStringPointer())->clear();
    }
    if (has_header_extensions()) {
      GOOGLE_DCHECK(header_extensions_ != NULL);
      header_extensions_->::webrtc::rtclog2::RtpHeaderExtensionConfig::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioSendStreamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioSendStreamConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ssrc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rsid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rsid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioSendStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioSendStreamConfig)
  return false;
#undef DO_
}

void AudioSendStreamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioSendStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 ssrc = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ssrc(), output);
  }

  // optional bytes rsid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->rsid(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->header_extensions_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioSendStreamConfig)
}

size_t AudioSendStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioSendStreamConfig)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes rsid = 4;
    if (has_rsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rsid());
    }

    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
    if (has_header_extensions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 ssrc = 2;
    if (has_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssrc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioSendStreamConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioSendStreamConfig*>(&from));
}

void AudioSendStreamConfig::MergeFrom(const AudioSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioSendStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rsid();
      rsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      ssrc_ = from.ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioSendStreamConfig::CopyFrom(const AudioSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioSendStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSendStreamConfig::IsInitialized() const {
  return true;
}

void AudioSendStreamConfig::Swap(AudioSendStreamConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioSendStreamConfig::InternalSwap(AudioSendStreamConfig* other) {
  rsid_.Swap(&other->rsid_);
  std::swap(header_extensions_, other->header_extensions_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(ssrc_, other->ssrc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioSendStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.AudioSendStreamConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioSendStreamConfig

// optional int64 timestamp_ms = 1;
bool AudioSendStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AudioSendStreamConfig::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void AudioSendStreamConfig::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void AudioSendStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 AudioSendStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioSendStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
void AudioSendStreamConfig::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioSendStreamConfig.timestamp_ms)
}

// optional uint32 ssrc = 2;
bool AudioSendStreamConfig::has_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AudioSendStreamConfig::set_has_ssrc() {
  _has_bits_[0] |= 0x00000008u;
}
void AudioSendStreamConfig::clear_has_ssrc() {
  _has_bits_[0] &= ~0x00000008u;
}
void AudioSendStreamConfig::clear_ssrc() {
  ssrc_ = 0u;
  clear_has_ssrc();
}
::google::protobuf::uint32 AudioSendStreamConfig::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioSendStreamConfig.ssrc)
  return ssrc_;
}
void AudioSendStreamConfig::set_ssrc(::google::protobuf::uint32 value) {
  set_has_ssrc();
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioSendStreamConfig.ssrc)
}

// optional bytes rsid = 4;
bool AudioSendStreamConfig::has_rsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AudioSendStreamConfig::set_has_rsid() {
  _has_bits_[0] |= 0x00000001u;
}
void AudioSendStreamConfig::clear_has_rsid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AudioSendStreamConfig::clear_rsid() {
  rsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rsid();
}
const ::std::string& AudioSendStreamConfig::rsid() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioSendStreamConfig.rsid)
  return rsid_.GetNoArena();
}
void AudioSendStreamConfig::set_rsid(const ::std::string& value) {
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioSendStreamConfig.rsid)
}
#if LANG_CXX11
void AudioSendStreamConfig::set_rsid(::std::string&& value) {
  set_has_rsid();
  rsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioSendStreamConfig.rsid)
}
#endif
void AudioSendStreamConfig::set_rsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioSendStreamConfig.rsid)
}
void AudioSendStreamConfig::set_rsid(const void* value, size_t size) {
  set_has_rsid();
  rsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioSendStreamConfig.rsid)
}
::std::string* AudioSendStreamConfig::mutable_rsid() {
  set_has_rsid();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioSendStreamConfig.rsid)
  return rsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioSendStreamConfig::release_rsid() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioSendStreamConfig.rsid)
  clear_has_rsid();
  return rsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioSendStreamConfig::set_allocated_rsid(::std::string* rsid) {
  if (rsid != NULL) {
    set_has_rsid();
  } else {
    clear_has_rsid();
  }
  rsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsid);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioSendStreamConfig.rsid)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
bool AudioSendStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AudioSendStreamConfig::set_has_header_extensions() {
  _has_bits_[0] |= 0x00000002u;
}
void AudioSendStreamConfig::clear_has_header_extensions() {
  _has_bits_[0] &= ~0x00000002u;
}
void AudioSendStreamConfig::clear_header_extensions() {
  if (header_extensions_ != NULL) header_extensions_->::webrtc::rtclog2::RtpHeaderExtensionConfig::Clear();
  clear_has_header_extensions();
}
const ::webrtc::rtclog2::RtpHeaderExtensionConfig& AudioSendStreamConfig::header_extensions() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
  return header_extensions_ != NULL ? *header_extensions_
                         : *::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance();
}
::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioSendStreamConfig::mutable_header_extensions() {
  set_has_header_extensions();
  if (header_extensions_ == NULL) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
  return header_extensions_;
}
::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioSendStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
  clear_has_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = NULL;
  return temp;
}
void AudioSendStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  delete header_extensions_;
  header_extensions_ = header_extensions;
  if (header_extensions) {
    set_has_header_extensions();
  } else {
    clear_has_header_extensions();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioNetworkAdaptations::kTimestampMsFieldNumber;
const int AudioNetworkAdaptations::kBitrateBpsFieldNumber;
const int AudioNetworkAdaptations::kFrameLengthMsFieldNumber;
const int AudioNetworkAdaptations::kUplinkPacketLossFractionFieldNumber;
const int AudioNetworkAdaptations::kEnableFecFieldNumber;
const int AudioNetworkAdaptations::kEnableDtxFieldNumber;
const int AudioNetworkAdaptations::kNumChannelsFieldNumber;
const int AudioNetworkAdaptations::kTimestampDeltasMsFieldNumber;
const int AudioNetworkAdaptations::kBitrateDeltasBpsFieldNumber;
const int AudioNetworkAdaptations::kFrameLengthDeltasMsFieldNumber;
const int AudioNetworkAdaptations::kUplinkPacketLossFractionDeltasFieldNumber;
const int AudioNetworkAdaptations::kEnableFecDeltasFieldNumber;
const int AudioNetworkAdaptations::kEnableDtxDeltasFieldNumber;
const int AudioNetworkAdaptations::kNumChannelsDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioNetworkAdaptations::AudioNetworkAdaptations()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioNetworkAdaptations)
}
AudioNetworkAdaptations::AudioNetworkAdaptations(const AudioNetworkAdaptations& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_deltas_ms()) {
    timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
  }
  bitrate_deltas_bps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitrate_deltas_bps()) {
    bitrate_deltas_bps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_deltas_bps_);
  }
  frame_length_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_length_deltas_ms()) {
    frame_length_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_length_deltas_ms_);
  }
  uplink_packet_loss_fraction_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uplink_packet_loss_fraction_deltas()) {
    uplink_packet_loss_fraction_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uplink_packet_loss_fraction_deltas_);
  }
  enable_fec_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enable_fec_deltas()) {
    enable_fec_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enable_fec_deltas_);
  }
  enable_dtx_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enable_dtx_deltas()) {
    enable_dtx_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enable_dtx_deltas_);
  }
  num_channels_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_num_channels_deltas()) {
    num_channels_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.num_channels_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_channels_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(num_channels_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioNetworkAdaptations)
}

void AudioNetworkAdaptations::SharedCtor() {
  _cached_size_ = 0;
  timestamp_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_deltas_bps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_length_deltas_ms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uplink_packet_loss_fraction_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_fec_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_dtx_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_channels_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_channels_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(num_channels_));
}

AudioNetworkAdaptations::~AudioNetworkAdaptations() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioNetworkAdaptations)
  SharedDtor();
}

void AudioNetworkAdaptations::SharedDtor() {
  timestamp_deltas_ms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_deltas_bps_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_length_deltas_ms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uplink_packet_loss_fraction_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_fec_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_dtx_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_channels_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioNetworkAdaptations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioNetworkAdaptations& AudioNetworkAdaptations::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioNetworkAdaptations* AudioNetworkAdaptations::New(::google::protobuf::Arena* arena) const {
  AudioNetworkAdaptations* n = new AudioNetworkAdaptations;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioNetworkAdaptations::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioNetworkAdaptations)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_timestamp_deltas_ms()) {
      GOOGLE_DCHECK(!timestamp_deltas_ms_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timestamp_deltas_ms_.UnsafeRawStringPointer())->clear();
    }
    if (has_bitrate_deltas_bps()) {
      GOOGLE_DCHECK(!bitrate_deltas_bps_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bitrate_deltas_bps_.UnsafeRawStringPointer())->clear();
    }
    if (has_frame_length_deltas_ms()) {
      GOOGLE_DCHECK(!frame_length_deltas_ms_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*frame_length_deltas_ms_.UnsafeRawStringPointer())->clear();
    }
    if (has_uplink_packet_loss_fraction_deltas()) {
      GOOGLE_DCHECK(!uplink_packet_loss_fraction_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uplink_packet_loss_fraction_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_enable_fec_deltas()) {
      GOOGLE_DCHECK(!enable_fec_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*enable_fec_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_enable_dtx_deltas()) {
      GOOGLE_DCHECK(!enable_dtx_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*enable_dtx_deltas_.UnsafeRawStringPointer())->clear();
    }
    if (has_num_channels_deltas()) {
      GOOGLE_DCHECK(!num_channels_deltas_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*num_channels_deltas_.UnsafeRawStringPointer())->clear();
    }
  }
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&bitrate_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_channels_) -
        reinterpret_cast<char*>(&bitrate_bps_)) + sizeof(num_channels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioNetworkAdaptations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioNetworkAdaptations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bitrate_bps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frame_length_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_frame_length_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_length_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float uplink_packet_loss_fraction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_uplink_packet_loss_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uplink_packet_loss_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_fec = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_enable_fec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_fec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_dtx = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_enable_dtx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_dtx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_channels = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_num_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_deltas_ms = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_deltas_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bitrate_deltas_bps = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitrate_deltas_bps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes frame_length_deltas_ms = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame_length_deltas_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes uplink_packet_loss_fraction_deltas = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uplink_packet_loss_fraction_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes enable_fec_deltas = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enable_fec_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes enable_dtx_deltas = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enable_dtx_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes num_channels_deltas = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_num_channels_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioNetworkAdaptations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioNetworkAdaptations)
  return false;
#undef DO_
}

void AudioNetworkAdaptations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioNetworkAdaptations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional int32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bitrate_bps(), output);
  }

  // optional int32 frame_length_ms = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frame_length_ms(), output);
  }

  // optional float uplink_packet_loss_fraction = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->uplink_packet_loss_fraction(), output);
  }

  // optional bool enable_fec = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_fec(), output);
  }

  // optional bool enable_dtx = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enable_dtx(), output);
  }

  // optional uint32 num_channels = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_channels(), output);
  }

  // optional bytes timestamp_deltas_ms = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_deltas_ms(), output);
  }

  // optional bytes bitrate_deltas_bps = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->bitrate_deltas_bps(), output);
  }

  // optional bytes frame_length_deltas_ms = 103;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->frame_length_deltas_ms(), output);
  }

  // optional bytes uplink_packet_loss_fraction_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->uplink_packet_loss_fraction_deltas(), output);
  }

  // optional bytes enable_fec_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      105, this->enable_fec_deltas(), output);
  }

  // optional bytes enable_dtx_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      106, this->enable_dtx_deltas(), output);
  }

  // optional bytes num_channels_deltas = 107;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      107, this->num_channels_deltas(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioNetworkAdaptations)
}

size_t AudioNetworkAdaptations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioNetworkAdaptations)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes timestamp_deltas_ms = 101;
    if (has_timestamp_deltas_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_deltas_ms());
    }

    // optional bytes bitrate_deltas_bps = 102;
    if (has_bitrate_deltas_bps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bitrate_deltas_bps());
    }

    // optional bytes frame_length_deltas_ms = 103;
    if (has_frame_length_deltas_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frame_length_deltas_ms());
    }

    // optional bytes uplink_packet_loss_fraction_deltas = 104;
    if (has_uplink_packet_loss_fraction_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uplink_packet_loss_fraction_deltas());
    }

    // optional bytes enable_fec_deltas = 105;
    if (has_enable_fec_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->enable_fec_deltas());
    }

    // optional bytes enable_dtx_deltas = 106;
    if (has_enable_dtx_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->enable_dtx_deltas());
    }

    // optional bytes num_channels_deltas = 107;
    if (has_num_channels_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->num_channels_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int32 bitrate_bps = 2;
    if (has_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitrate_bps());
    }

    // optional int32 frame_length_ms = 3;
    if (has_frame_length_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_length_ms());
    }

    // optional float uplink_packet_loss_fraction = 4;
    if (has_uplink_packet_loss_fraction()) {
      total_size += 1 + 4;
    }

    // optional bool enable_fec = 5;
    if (has_enable_fec()) {
      total_size += 1 + 1;
    }

    // optional bool enable_dtx = 6;
    if (has_enable_dtx()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_channels = 7;
    if (has_num_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_channels());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioNetworkAdaptations::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioNetworkAdaptations*>(&from));
}

void AudioNetworkAdaptations::MergeFrom(const AudioNetworkAdaptations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioNetworkAdaptations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_deltas_ms();
      timestamp_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_deltas_ms_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bitrate_deltas_bps();
      bitrate_deltas_bps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_deltas_bps_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_frame_length_deltas_ms();
      frame_length_deltas_ms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_length_deltas_ms_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_uplink_packet_loss_fraction_deltas();
      uplink_packet_loss_fraction_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uplink_packet_loss_fraction_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_enable_fec_deltas();
      enable_fec_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enable_fec_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_enable_dtx_deltas();
      enable_dtx_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enable_dtx_deltas_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_num_channels_deltas();
      num_channels_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.num_channels_deltas_);
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000200u) {
      frame_length_ms_ = from.frame_length_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      uplink_packet_loss_fraction_ = from.uplink_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_fec_ = from.enable_fec_;
    }
    if (cached_has_bits & 0x00001000u) {
      enable_dtx_ = from.enable_dtx_;
    }
    if (cached_has_bits & 0x00002000u) {
      num_channels_ = from.num_channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioNetworkAdaptations::CopyFrom(const AudioNetworkAdaptations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioNetworkAdaptations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioNetworkAdaptations::IsInitialized() const {
  return true;
}

void AudioNetworkAdaptations::Swap(AudioNetworkAdaptations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioNetworkAdaptations::InternalSwap(AudioNetworkAdaptations* other) {
  timestamp_deltas_ms_.Swap(&other->timestamp_deltas_ms_);
  bitrate_deltas_bps_.Swap(&other->bitrate_deltas_bps_);
  frame_length_deltas_ms_.Swap(&other->frame_length_deltas_ms_);
  uplink_packet_loss_fraction_deltas_.Swap(&other->uplink_packet_loss_fraction_deltas_);
  enable_fec_deltas_.Swap(&other->enable_fec_deltas_);
  enable_dtx_deltas_.Swap(&other->enable_dtx_deltas_);
  num_channels_deltas_.Swap(&other->num_channels_deltas_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(bitrate_bps_, other->bitrate_bps_);
  std::swap(frame_length_ms_, other->frame_length_ms_);
  std::swap(uplink_packet_loss_fraction_, other->uplink_packet_loss_fraction_);
  std::swap(enable_fec_, other->enable_fec_);
  std::swap(enable_dtx_, other->enable_dtx_);
  std::swap(num_channels_, other->num_channels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioNetworkAdaptations::GetTypeName() const {
  return "webrtc.rtclog2.AudioNetworkAdaptations";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioNetworkAdaptations

// optional int64 timestamp_ms = 1;
bool AudioNetworkAdaptations::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AudioNetworkAdaptations::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000080u;
}
void AudioNetworkAdaptations::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
void AudioNetworkAdaptations::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 AudioNetworkAdaptations::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms)
  return timestamp_ms_;
}
void AudioNetworkAdaptations::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms)
}

// optional int32 bitrate_bps = 2;
bool AudioNetworkAdaptations::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AudioNetworkAdaptations::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000100u;
}
void AudioNetworkAdaptations::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000100u;
}
void AudioNetworkAdaptations::clear_bitrate_bps() {
  bitrate_bps_ = 0;
  clear_has_bitrate_bps();
}
::google::protobuf::int32 AudioNetworkAdaptations::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps)
  return bitrate_bps_;
}
void AudioNetworkAdaptations::set_bitrate_bps(::google::protobuf::int32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps)
}

// optional int32 frame_length_ms = 3;
bool AudioNetworkAdaptations::has_frame_length_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AudioNetworkAdaptations::set_has_frame_length_ms() {
  _has_bits_[0] |= 0x00000200u;
}
void AudioNetworkAdaptations::clear_has_frame_length_ms() {
  _has_bits_[0] &= ~0x00000200u;
}
void AudioNetworkAdaptations::clear_frame_length_ms() {
  frame_length_ms_ = 0;
  clear_has_frame_length_ms();
}
::google::protobuf::int32 AudioNetworkAdaptations::frame_length_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms)
  return frame_length_ms_;
}
void AudioNetworkAdaptations::set_frame_length_ms(::google::protobuf::int32 value) {
  set_has_frame_length_ms();
  frame_length_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms)
}

// optional float uplink_packet_loss_fraction = 4;
bool AudioNetworkAdaptations::has_uplink_packet_loss_fraction() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AudioNetworkAdaptations::set_has_uplink_packet_loss_fraction() {
  _has_bits_[0] |= 0x00000400u;
}
void AudioNetworkAdaptations::clear_has_uplink_packet_loss_fraction() {
  _has_bits_[0] &= ~0x00000400u;
}
void AudioNetworkAdaptations::clear_uplink_packet_loss_fraction() {
  uplink_packet_loss_fraction_ = 0;
  clear_has_uplink_packet_loss_fraction();
}
float AudioNetworkAdaptations::uplink_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction)
  return uplink_packet_loss_fraction_;
}
void AudioNetworkAdaptations::set_uplink_packet_loss_fraction(float value) {
  set_has_uplink_packet_loss_fraction();
  uplink_packet_loss_fraction_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction)
}

// optional bool enable_fec = 5;
bool AudioNetworkAdaptations::has_enable_fec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AudioNetworkAdaptations::set_has_enable_fec() {
  _has_bits_[0] |= 0x00000800u;
}
void AudioNetworkAdaptations::clear_has_enable_fec() {
  _has_bits_[0] &= ~0x00000800u;
}
void AudioNetworkAdaptations::clear_enable_fec() {
  enable_fec_ = false;
  clear_has_enable_fec();
}
bool AudioNetworkAdaptations::enable_fec() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec)
  return enable_fec_;
}
void AudioNetworkAdaptations::set_enable_fec(bool value) {
  set_has_enable_fec();
  enable_fec_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec)
}

// optional bool enable_dtx = 6;
bool AudioNetworkAdaptations::has_enable_dtx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void AudioNetworkAdaptations::set_has_enable_dtx() {
  _has_bits_[0] |= 0x00001000u;
}
void AudioNetworkAdaptations::clear_has_enable_dtx() {
  _has_bits_[0] &= ~0x00001000u;
}
void AudioNetworkAdaptations::clear_enable_dtx() {
  enable_dtx_ = false;
  clear_has_enable_dtx();
}
bool AudioNetworkAdaptations::enable_dtx() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx)
  return enable_dtx_;
}
void AudioNetworkAdaptations::set_enable_dtx(bool value) {
  set_has_enable_dtx();
  enable_dtx_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx)
}

// optional uint32 num_channels = 7;
bool AudioNetworkAdaptations::has_num_channels() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void AudioNetworkAdaptations::set_has_num_channels() {
  _has_bits_[0] |= 0x00002000u;
}
void AudioNetworkAdaptations::clear_has_num_channels() {
  _has_bits_[0] &= ~0x00002000u;
}
void AudioNetworkAdaptations::clear_num_channels() {
  num_channels_ = 0u;
  clear_has_num_channels();
}
::google::protobuf::uint32 AudioNetworkAdaptations::num_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.num_channels)
  return num_channels_;
}
void AudioNetworkAdaptations::set_num_channels(::google::protobuf::uint32 value) {
  set_has_num_channels();
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.num_channels)
}

// optional bytes timestamp_deltas_ms = 101;
bool AudioNetworkAdaptations::has_timestamp_deltas_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AudioNetworkAdaptations::set_has_timestamp_deltas_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void AudioNetworkAdaptations::clear_has_timestamp_deltas_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void AudioNetworkAdaptations::clear_timestamp_deltas_ms() {
  timestamp_deltas_ms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_deltas_ms();
}
const ::std::string& AudioNetworkAdaptations::timestamp_deltas_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_deltas_ms)
  return timestamp_deltas_ms_.GetNoArena();
}
void AudioNetworkAdaptations::set_timestamp_deltas_ms(const ::std::string& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_deltas_ms)
}
#if LANG_CXX11
void AudioNetworkAdaptations::set_timestamp_deltas_ms(::std::string&& value) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_deltas_ms)
}
#endif
void AudioNetworkAdaptations::set_timestamp_deltas_ms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_deltas_ms)
}
void AudioNetworkAdaptations::set_timestamp_deltas_ms(const void* value, size_t size) {
  set_has_timestamp_deltas_ms();
  timestamp_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_deltas_ms)
}
::std::string* AudioNetworkAdaptations::mutable_timestamp_deltas_ms() {
  set_has_timestamp_deltas_ms();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_deltas_ms)
  return timestamp_deltas_ms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioNetworkAdaptations::release_timestamp_deltas_ms() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_deltas_ms)
  clear_has_timestamp_deltas_ms();
  return timestamp_deltas_ms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioNetworkAdaptations::set_allocated_timestamp_deltas_ms(::std::string* timestamp_deltas_ms) {
  if (timestamp_deltas_ms != NULL) {
    set_has_timestamp_deltas_ms();
  } else {
    clear_has_timestamp_deltas_ms();
  }
  timestamp_deltas_ms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_deltas_ms);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_deltas_ms)
}

// optional bytes bitrate_deltas_bps = 102;
bool AudioNetworkAdaptations::has_bitrate_deltas_bps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AudioNetworkAdaptations::set_has_bitrate_deltas_bps() {
  _has_bits_[0] |= 0x00000002u;
}
void AudioNetworkAdaptations::clear_has_bitrate_deltas_bps() {
  _has_bits_[0] &= ~0x00000002u;
}
void AudioNetworkAdaptations::clear_bitrate_deltas_bps() {
  bitrate_deltas_bps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bitrate_deltas_bps();
}
const ::std::string& AudioNetworkAdaptations::bitrate_deltas_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_deltas_bps)
  return bitrate_deltas_bps_.GetNoArena();
}
void AudioNetworkAdaptations::set_bitrate_deltas_bps(const ::std::string& value) {
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_deltas_bps)
}
#if LANG_CXX11
void AudioNetworkAdaptations::set_bitrate_deltas_bps(::std::string&& value) {
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_deltas_bps)
}
#endif
void AudioNetworkAdaptations::set_bitrate_deltas_bps(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_deltas_bps)
}
void AudioNetworkAdaptations::set_bitrate_deltas_bps(const void* value, size_t size) {
  set_has_bitrate_deltas_bps();
  bitrate_deltas_bps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_deltas_bps)
}
::std::string* AudioNetworkAdaptations::mutable_bitrate_deltas_bps() {
  set_has_bitrate_deltas_bps();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_deltas_bps)
  return bitrate_deltas_bps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioNetworkAdaptations::release_bitrate_deltas_bps() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_deltas_bps)
  clear_has_bitrate_deltas_bps();
  return bitrate_deltas_bps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioNetworkAdaptations::set_allocated_bitrate_deltas_bps(::std::string* bitrate_deltas_bps) {
  if (bitrate_deltas_bps != NULL) {
    set_has_bitrate_deltas_bps();
  } else {
    clear_has_bitrate_deltas_bps();
  }
  bitrate_deltas_bps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitrate_deltas_bps);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_deltas_bps)
}

// optional bytes frame_length_deltas_ms = 103;
bool AudioNetworkAdaptations::has_frame_length_deltas_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AudioNetworkAdaptations::set_has_frame_length_deltas_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void AudioNetworkAdaptations::clear_has_frame_length_deltas_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void AudioNetworkAdaptations::clear_frame_length_deltas_ms() {
  frame_length_deltas_ms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_length_deltas_ms();
}
const ::std::string& AudioNetworkAdaptations::frame_length_deltas_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_deltas_ms)
  return frame_length_deltas_ms_.GetNoArena();
}
void AudioNetworkAdaptations::set_frame_length_deltas_ms(const ::std::string& value) {
  set_has_frame_length_deltas_ms();
  frame_length_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_deltas_ms)
}
#if LANG_CXX11
void AudioNetworkAdaptations::set_frame_length_deltas_ms(::std::string&& value) {
  set_has_frame_length_deltas_ms();
  frame_length_deltas_ms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_deltas_ms)
}
#endif
void AudioNetworkAdaptations::set_frame_length_deltas_ms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_length_deltas_ms();
  frame_length_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_deltas_ms)
}
void AudioNetworkAdaptations::set_frame_length_deltas_ms(const void* value, size_t size) {
  set_has_frame_length_deltas_ms();
  frame_length_deltas_ms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_deltas_ms)
}
::std::string* AudioNetworkAdaptations::mutable_frame_length_deltas_ms() {
  set_has_frame_length_deltas_ms();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_deltas_ms)
  return frame_length_deltas_ms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioNetworkAdaptations::release_frame_length_deltas_ms() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_deltas_ms)
  clear_has_frame_length_deltas_ms();
  return frame_length_deltas_ms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioNetworkAdaptations::set_allocated_frame_length_deltas_ms(::std::string* frame_length_deltas_ms) {
  if (frame_length_deltas_ms != NULL) {
    set_has_frame_length_deltas_ms();
  } else {
    clear_has_frame_length_deltas_ms();
  }
  frame_length_deltas_ms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_length_deltas_ms);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_deltas_ms)
}

// optional bytes uplink_packet_loss_fraction_deltas = 104;
bool AudioNetworkAdaptations::has_uplink_packet_loss_fraction_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AudioNetworkAdaptations::set_has_uplink_packet_loss_fraction_deltas() {
  _has_bits_[0] |= 0x00000008u;
}
void AudioNetworkAdaptations::clear_has_uplink_packet_loss_fraction_deltas() {
  _has_bits_[0] &= ~0x00000008u;
}
void AudioNetworkAdaptations::clear_uplink_packet_loss_fraction_deltas() {
  uplink_packet_loss_fraction_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uplink_packet_loss_fraction_deltas();
}
const ::std::string& AudioNetworkAdaptations::uplink_packet_loss_fraction_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
  return uplink_packet_loss_fraction_deltas_.GetNoArena();
}
void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(const ::std::string& value) {
  set_has_uplink_packet_loss_fraction_deltas();
  uplink_packet_loss_fraction_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
#if LANG_CXX11
void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(::std::string&& value) {
  set_has_uplink_packet_loss_fraction_deltas();
  uplink_packet_loss_fraction_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
#endif
void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uplink_packet_loss_fraction_deltas();
  uplink_packet_loss_fraction_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(const void* value, size_t size) {
  set_has_uplink_packet_loss_fraction_deltas();
  uplink_packet_loss_fraction_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
::std::string* AudioNetworkAdaptations::mutable_uplink_packet_loss_fraction_deltas() {
  set_has_uplink_packet_loss_fraction_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
  return uplink_packet_loss_fraction_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioNetworkAdaptations::release_uplink_packet_loss_fraction_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
  clear_has_uplink_packet_loss_fraction_deltas();
  return uplink_packet_loss_fraction_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioNetworkAdaptations::set_allocated_uplink_packet_loss_fraction_deltas(::std::string* uplink_packet_loss_fraction_deltas) {
  if (uplink_packet_loss_fraction_deltas != NULL) {
    set_has_uplink_packet_loss_fraction_deltas();
  } else {
    clear_has_uplink_packet_loss_fraction_deltas();
  }
  uplink_packet_loss_fraction_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uplink_packet_loss_fraction_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}

// optional bytes enable_fec_deltas = 105;
bool AudioNetworkAdaptations::has_enable_fec_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AudioNetworkAdaptations::set_has_enable_fec_deltas() {
  _has_bits_[0] |= 0x00000010u;
}
void AudioNetworkAdaptations::clear_has_enable_fec_deltas() {
  _has_bits_[0] &= ~0x00000010u;
}
void AudioNetworkAdaptations::clear_enable_fec_deltas() {
  enable_fec_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enable_fec_deltas();
}
const ::std::string& AudioNetworkAdaptations::enable_fec_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
  return enable_fec_deltas_.GetNoArena();
}
void AudioNetworkAdaptations::set_enable_fec_deltas(const ::std::string& value) {
  set_has_enable_fec_deltas();
  enable_fec_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
#if LANG_CXX11
void AudioNetworkAdaptations::set_enable_fec_deltas(::std::string&& value) {
  set_has_enable_fec_deltas();
  enable_fec_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
#endif
void AudioNetworkAdaptations::set_enable_fec_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enable_fec_deltas();
  enable_fec_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
void AudioNetworkAdaptations::set_enable_fec_deltas(const void* value, size_t size) {
  set_has_enable_fec_deltas();
  enable_fec_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
::std::string* AudioNetworkAdaptations::mutable_enable_fec_deltas() {
  set_has_enable_fec_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
  return enable_fec_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioNetworkAdaptations::release_enable_fec_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
  clear_has_enable_fec_deltas();
  return enable_fec_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioNetworkAdaptations::set_allocated_enable_fec_deltas(::std::string* enable_fec_deltas) {
  if (enable_fec_deltas != NULL) {
    set_has_enable_fec_deltas();
  } else {
    clear_has_enable_fec_deltas();
  }
  enable_fec_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enable_fec_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}

// optional bytes enable_dtx_deltas = 106;
bool AudioNetworkAdaptations::has_enable_dtx_deltas() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AudioNetworkAdaptations::set_has_enable_dtx_deltas() {
  _has_bits_[0] |= 0x00000020u;
}
void AudioNetworkAdaptations::clear_has_enable_dtx_deltas() {
  _has_bits_[0] &= ~0x00000020u;
}
void AudioNetworkAdaptations::clear_enable_dtx_deltas() {
  enable_dtx_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enable_dtx_deltas();
}
const ::std::string& AudioNetworkAdaptations::enable_dtx_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
  return enable_dtx_deltas_.GetNoArena();
}
void AudioNetworkAdaptations::set_enable_dtx_deltas(const ::std::string& value) {
  set_has_enable_dtx_deltas();
  enable_dtx_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
#if LANG_CXX11
void AudioNetworkAdaptations::set_enable_dtx_deltas(::std::string&& value) {
  set_has_enable_dtx_deltas();
  enable_dtx_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
#endif
void AudioNetworkAdaptations::set_enable_dtx_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enable_dtx_deltas();
  enable_dtx_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
void AudioNetworkAdaptations::set_enable_dtx_deltas(const void* value, size_t size) {
  set_has_enable_dtx_deltas();
  enable_dtx_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
::std::string* AudioNetworkAdaptations::mutable_enable_dtx_deltas() {
  set_has_enable_dtx_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
  return enable_dtx_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioNetworkAdaptations::release_enable_dtx_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
  clear_has_enable_dtx_deltas();
  return enable_dtx_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioNetworkAdaptations::set_allocated_enable_dtx_deltas(::std::string* enable_dtx_deltas) {
  if (enable_dtx_deltas != NULL) {
    set_has_enable_dtx_deltas();
  } else {
    clear_has_enable_dtx_deltas();
  }
  enable_dtx_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enable_dtx_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}

// optional bytes num_channels_deltas = 107;
bool AudioNetworkAdaptations::has_num_channels_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AudioNetworkAdaptations::set_has_num_channels_deltas() {
  _has_bits_[0] |= 0x00000040u;
}
void AudioNetworkAdaptations::clear_has_num_channels_deltas() {
  _has_bits_[0] &= ~0x00000040u;
}
void AudioNetworkAdaptations::clear_num_channels_deltas() {
  num_channels_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_num_channels_deltas();
}
const ::std::string& AudioNetworkAdaptations::num_channels_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
  return num_channels_deltas_.GetNoArena();
}
void AudioNetworkAdaptations::set_num_channels_deltas(const ::std::string& value) {
  set_has_num_channels_deltas();
  num_channels_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
#if LANG_CXX11
void AudioNetworkAdaptations::set_num_channels_deltas(::std::string&& value) {
  set_has_num_channels_deltas();
  num_channels_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
#endif
void AudioNetworkAdaptations::set_num_channels_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_num_channels_deltas();
  num_channels_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
void AudioNetworkAdaptations::set_num_channels_deltas(const void* value, size_t size) {
  set_has_num_channels_deltas();
  num_channels_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
::std::string* AudioNetworkAdaptations::mutable_num_channels_deltas() {
  set_has_num_channels_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
  return num_channels_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioNetworkAdaptations::release_num_channels_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
  clear_has_num_channels_deltas();
  return num_channels_deltas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioNetworkAdaptations::set_allocated_num_channels_deltas(::std::string* num_channels_deltas) {
  if (num_channels_deltas != NULL) {
    set_has_num_channels_deltas();
  } else {
    clear_has_num_channels_deltas();
  }
  num_channels_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), num_channels_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BweProbeCluster::kTimestampMsFieldNumber;
const int BweProbeCluster::kIdFieldNumber;
const int BweProbeCluster::kBitrateBpsFieldNumber;
const int BweProbeCluster::kMinPacketsFieldNumber;
const int BweProbeCluster::kMinBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BweProbeCluster::BweProbeCluster()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BweProbeCluster)
}
BweProbeCluster::BweProbeCluster(const BweProbeCluster& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_bytes_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(min_bytes_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeCluster)
}

void BweProbeCluster::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_bytes_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(min_bytes_));
}

BweProbeCluster::~BweProbeCluster() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeCluster)
  SharedDtor();
}

void BweProbeCluster::SharedDtor() {
}

void BweProbeCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BweProbeCluster& BweProbeCluster::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

BweProbeCluster* BweProbeCluster::New(::google::protobuf::Arena* arena) const {
  BweProbeCluster* n = new BweProbeCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BweProbeCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeCluster)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_bytes_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(min_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BweProbeCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BweProbeCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_packets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_min_packets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_min_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BweProbeCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BweProbeCluster)
  return false;
#undef DO_
}

void BweProbeCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BweProbeCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bitrate_bps(), output);
  }

  // optional uint32 min_packets = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->min_packets(), output);
  }

  // optional uint32 min_bytes = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->min_bytes(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BweProbeCluster)
}

size_t BweProbeCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeCluster)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 bitrate_bps = 3;
    if (has_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

    // optional uint32 min_packets = 4;
    if (has_min_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_packets());
    }

    // optional uint32 min_bytes = 5;
    if (has_min_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BweProbeCluster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BweProbeCluster*>(&from));
}

void BweProbeCluster::MergeFrom(const BweProbeCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_packets_ = from.min_packets_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_bytes_ = from.min_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BweProbeCluster::CopyFrom(const BweProbeCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeCluster::IsInitialized() const {
  return true;
}

void BweProbeCluster::Swap(BweProbeCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BweProbeCluster::InternalSwap(BweProbeCluster* other) {
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(id_, other->id_);
  std::swap(bitrate_bps_, other->bitrate_bps_);
  std::swap(min_packets_, other->min_packets_);
  std::swap(min_bytes_, other->min_bytes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BweProbeCluster::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeCluster";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BweProbeCluster

// optional int64 timestamp_ms = 1;
bool BweProbeCluster::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BweProbeCluster::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void BweProbeCluster::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void BweProbeCluster::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 BweProbeCluster::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.timestamp_ms)
  return timestamp_ms_;
}
void BweProbeCluster::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.timestamp_ms)
}

// optional uint32 id = 2;
bool BweProbeCluster::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BweProbeCluster::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BweProbeCluster::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BweProbeCluster::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 BweProbeCluster::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.id)
  return id_;
}
void BweProbeCluster::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.id)
}

// optional uint32 bitrate_bps = 3;
bool BweProbeCluster::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BweProbeCluster::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000004u;
}
void BweProbeCluster::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000004u;
}
void BweProbeCluster::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  clear_has_bitrate_bps();
}
::google::protobuf::uint32 BweProbeCluster::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.bitrate_bps)
  return bitrate_bps_;
}
void BweProbeCluster::set_bitrate_bps(::google::protobuf::uint32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.bitrate_bps)
}

// optional uint32 min_packets = 4;
bool BweProbeCluster::has_min_packets() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BweProbeCluster::set_has_min_packets() {
  _has_bits_[0] |= 0x00000008u;
}
void BweProbeCluster::clear_has_min_packets() {
  _has_bits_[0] &= ~0x00000008u;
}
void BweProbeCluster::clear_min_packets() {
  min_packets_ = 0u;
  clear_has_min_packets();
}
::google::protobuf::uint32 BweProbeCluster::min_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.min_packets)
  return min_packets_;
}
void BweProbeCluster::set_min_packets(::google::protobuf::uint32 value) {
  set_has_min_packets();
  min_packets_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.min_packets)
}

// optional uint32 min_bytes = 5;
bool BweProbeCluster::has_min_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BweProbeCluster::set_has_min_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
void BweProbeCluster::clear_has_min_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
void BweProbeCluster::clear_min_bytes() {
  min_bytes_ = 0u;
  clear_has_min_bytes();
}
::google::protobuf::uint32 BweProbeCluster::min_bytes() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.min_bytes)
  return min_bytes_;
}
void BweProbeCluster::set_min_bytes(::google::protobuf::uint32 value) {
  set_has_min_bytes();
  min_bytes_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.min_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BweProbeResultSuccess::kTimestampMsFieldNumber;
const int BweProbeResultSuccess::kIdFieldNumber;
const int BweProbeResultSuccess::kBitrateBpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BweProbeResultSuccess::BweProbeResultSuccess()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BweProbeResultSuccess)
}
BweProbeResultSuccess::BweProbeResultSuccess(const BweProbeResultSuccess& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitrate_bps_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(bitrate_bps_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeResultSuccess)
}

void BweProbeResultSuccess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitrate_bps_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(bitrate_bps_));
}

BweProbeResultSuccess::~BweProbeResultSuccess() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeResultSuccess)
  SharedDtor();
}

void BweProbeResultSuccess::SharedDtor() {
}

void BweProbeResultSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BweProbeResultSuccess& BweProbeResultSuccess::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

BweProbeResultSuccess* BweProbeResultSuccess::New(::google::protobuf::Arena* arena) const {
  BweProbeResultSuccess* n = new BweProbeResultSuccess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BweProbeResultSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeResultSuccess)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bitrate_bps_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(bitrate_bps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BweProbeResultSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BweProbeResultSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BweProbeResultSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BweProbeResultSuccess)
  return false;
#undef DO_
}

void BweProbeResultSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BweProbeResultSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bitrate_bps(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BweProbeResultSuccess)
}

size_t BweProbeResultSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeResultSuccess)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 bitrate_bps = 3;
    if (has_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BweProbeResultSuccess::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BweProbeResultSuccess*>(&from));
}

void BweProbeResultSuccess::MergeFrom(const BweProbeResultSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeResultSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BweProbeResultSuccess::CopyFrom(const BweProbeResultSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeResultSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeResultSuccess::IsInitialized() const {
  return true;
}

void BweProbeResultSuccess::Swap(BweProbeResultSuccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BweProbeResultSuccess::InternalSwap(BweProbeResultSuccess* other) {
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(id_, other->id_);
  std::swap(bitrate_bps_, other->bitrate_bps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BweProbeResultSuccess::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeResultSuccess";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BweProbeResultSuccess

// optional int64 timestamp_ms = 1;
bool BweProbeResultSuccess::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BweProbeResultSuccess::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void BweProbeResultSuccess::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void BweProbeResultSuccess::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 BweProbeResultSuccess::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultSuccess.timestamp_ms)
  return timestamp_ms_;
}
void BweProbeResultSuccess::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultSuccess.timestamp_ms)
}

// optional uint32 id = 2;
bool BweProbeResultSuccess::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BweProbeResultSuccess::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BweProbeResultSuccess::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BweProbeResultSuccess::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 BweProbeResultSuccess::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultSuccess.id)
  return id_;
}
void BweProbeResultSuccess::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultSuccess.id)
}

// optional uint32 bitrate_bps = 3;
bool BweProbeResultSuccess::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BweProbeResultSuccess::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000004u;
}
void BweProbeResultSuccess::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000004u;
}
void BweProbeResultSuccess::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  clear_has_bitrate_bps();
}
::google::protobuf::uint32 BweProbeResultSuccess::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultSuccess.bitrate_bps)
  return bitrate_bps_;
}
void BweProbeResultSuccess::set_bitrate_bps(::google::protobuf::uint32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultSuccess.bitrate_bps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BweProbeResultFailure::kTimestampMsFieldNumber;
const int BweProbeResultFailure::kIdFieldNumber;
const int BweProbeResultFailure::kFailureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BweProbeResultFailure::BweProbeResultFailure()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BweProbeResultFailure)
}
BweProbeResultFailure::BweProbeResultFailure(const BweProbeResultFailure& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&failure_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(failure_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeResultFailure)
}

void BweProbeResultFailure::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failure_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(failure_));
}

BweProbeResultFailure::~BweProbeResultFailure() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeResultFailure)
  SharedDtor();
}

void BweProbeResultFailure::SharedDtor() {
}

void BweProbeResultFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BweProbeResultFailure& BweProbeResultFailure::default_instance() {
  protobuf_rtc_5fevent_5flog2_2eproto::InitDefaults();
  return *internal_default_instance();
}

BweProbeResultFailure* BweProbeResultFailure::New(::google::protobuf::Arena* arena) const {
  BweProbeResultFailure* n = new BweProbeResultFailure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BweProbeResultFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeResultFailure)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failure_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(failure_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BweProbeResultFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BweProbeResultFailure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::BweProbeResultFailure_FailureReason_IsValid(value)) {
            set_failure(static_cast< ::webrtc::rtclog2::BweProbeResultFailure_FailureReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BweProbeResultFailure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BweProbeResultFailure)
  return false;
#undef DO_
}

void BweProbeResultFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BweProbeResultFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->failure(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BweProbeResultFailure)
}

size_t BweProbeResultFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeResultFailure)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
    if (has_failure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->failure());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BweProbeResultFailure::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BweProbeResultFailure*>(&from));
}

void BweProbeResultFailure::MergeFrom(const BweProbeResultFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeResultFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      failure_ = from.failure_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BweProbeResultFailure::CopyFrom(const BweProbeResultFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeResultFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeResultFailure::IsInitialized() const {
  return true;
}

void BweProbeResultFailure::Swap(BweProbeResultFailure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BweProbeResultFailure::InternalSwap(BweProbeResultFailure* other) {
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(id_, other->id_);
  std::swap(failure_, other->failure_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BweProbeResultFailure::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeResultFailure";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BweProbeResultFailure

// optional int64 timestamp_ms = 1;
bool BweProbeResultFailure::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BweProbeResultFailure::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void BweProbeResultFailure::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void BweProbeResultFailure::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 BweProbeResultFailure::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultFailure.timestamp_ms)
  return timestamp_ms_;
}
void BweProbeResultFailure::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultFailure.timestamp_ms)
}

// optional uint32 id = 2;
bool BweProbeResultFailure::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BweProbeResultFailure::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BweProbeResultFailure::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BweProbeResultFailure::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 BweProbeResultFailure::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultFailure.id)
  return id_;
}
void BweProbeResultFailure::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultFailure.id)
}

// optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
bool BweProbeResultFailure::has_failure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BweProbeResultFailure::set_has_failure() {
  _has_bits_[0] |= 0x00000004u;
}
void BweProbeResultFailure::clear_has_failure() {
  _has_bits_[0] &= ~0x00000004u;
}
void BweProbeResultFailure::clear_failure() {
  failure_ = 0;
  clear_has_failure();
}
::webrtc::rtclog2::BweProbeResultFailure_FailureReason BweProbeResultFailure::failure() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultFailure.failure)
  return static_cast< ::webrtc::rtclog2::BweProbeResultFailure_FailureReason >(failure_);
}
void BweProbeResultFailure::set_failure(::webrtc::rtclog2::BweProbeResultFailure_FailureReason value) {
  assert(::webrtc::rtclog2::BweProbeResultFailure_FailureReason_IsValid(value));
  set_has_failure();
  failure_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultFailure.failure)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rtclog2
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)
