// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_tester_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network_tester_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace webrtc {
namespace network_tester {
namespace config {
class NetworkTesterConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkTesterConfig> {
} _NetworkTesterConfig_default_instance_;
class NetworkTesterAllConfigsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkTesterAllConfigs> {
} _NetworkTesterAllConfigs_default_instance_;

namespace protobuf_network_5ftester_5fconfig_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _NetworkTesterConfig_default_instance_.Shutdown();
  _NetworkTesterAllConfigs_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NetworkTesterConfig_default_instance_.DefaultConstruct();
  _NetworkTesterAllConfigs_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_network_5ftester_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkTesterConfig::kPacketSendIntervalMsFieldNumber;
const int NetworkTesterConfig::kPacketSizeFieldNumber;
const int NetworkTesterConfig::kExecutionTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkTesterConfig::NetworkTesterConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_network_5ftester_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.network_tester.config.NetworkTesterConfig)
}
NetworkTesterConfig::NetworkTesterConfig(const NetworkTesterConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packet_send_interval_ms_, &from.packet_send_interval_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_time_ms_) -
    reinterpret_cast<char*>(&packet_send_interval_ms_)) + sizeof(execution_time_ms_));
  // @@protoc_insertion_point(copy_constructor:webrtc.network_tester.config.NetworkTesterConfig)
}

void NetworkTesterConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&packet_send_interval_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_time_ms_) -
      reinterpret_cast<char*>(&packet_send_interval_ms_)) + sizeof(execution_time_ms_));
}

NetworkTesterConfig::~NetworkTesterConfig() {
  // @@protoc_insertion_point(destructor:webrtc.network_tester.config.NetworkTesterConfig)
  SharedDtor();
}

void NetworkTesterConfig::SharedDtor() {
}

void NetworkTesterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkTesterConfig& NetworkTesterConfig::default_instance() {
  protobuf_network_5ftester_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkTesterConfig* NetworkTesterConfig::New(::google::protobuf::Arena* arena) const {
  NetworkTesterConfig* n = new NetworkTesterConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkTesterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.network_tester.config.NetworkTesterConfig)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&packet_send_interval_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&execution_time_ms_) -
        reinterpret_cast<char*>(&packet_send_interval_ms_)) + sizeof(execution_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkTesterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.network_tester.config.NetworkTesterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_send_interval_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_packet_send_interval_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_send_interval_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float packet_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_packet_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &packet_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 execution_time_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_execution_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &execution_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.network_tester.config.NetworkTesterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.network_tester.config.NetworkTesterConfig)
  return false;
#undef DO_
}

void NetworkTesterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.network_tester.config.NetworkTesterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packet_send_interval_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_send_interval_ms(), output);
  }

  // optional float packet_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->packet_size(), output);
  }

  // optional int32 execution_time_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->execution_time_ms(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.network_tester.config.NetworkTesterConfig)
}

size_t NetworkTesterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.network_tester.config.NetworkTesterConfig)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 packet_send_interval_ms = 1;
    if (has_packet_send_interval_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_send_interval_ms());
    }

    // optional float packet_size = 2;
    if (has_packet_size()) {
      total_size += 1 + 4;
    }

    // optional int32 execution_time_ms = 3;
    if (has_execution_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->execution_time_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkTesterConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkTesterConfig*>(&from));
}

void NetworkTesterConfig::MergeFrom(const NetworkTesterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.network_tester.config.NetworkTesterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      packet_send_interval_ms_ = from.packet_send_interval_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      packet_size_ = from.packet_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      execution_time_ms_ = from.execution_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkTesterConfig::CopyFrom(const NetworkTesterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.network_tester.config.NetworkTesterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkTesterConfig::IsInitialized() const {
  return true;
}

void NetworkTesterConfig::Swap(NetworkTesterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkTesterConfig::InternalSwap(NetworkTesterConfig* other) {
  std::swap(packet_send_interval_ms_, other->packet_send_interval_ms_);
  std::swap(packet_size_, other->packet_size_);
  std::swap(execution_time_ms_, other->execution_time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkTesterConfig::GetTypeName() const {
  return "webrtc.network_tester.config.NetworkTesterConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkTesterConfig

// optional int32 packet_send_interval_ms = 1;
bool NetworkTesterConfig::has_packet_send_interval_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkTesterConfig::set_has_packet_send_interval_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkTesterConfig::clear_has_packet_send_interval_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkTesterConfig::clear_packet_send_interval_ms() {
  packet_send_interval_ms_ = 0;
  clear_has_packet_send_interval_ms();
}
::google::protobuf::int32 NetworkTesterConfig::packet_send_interval_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.config.NetworkTesterConfig.packet_send_interval_ms)
  return packet_send_interval_ms_;
}
void NetworkTesterConfig::set_packet_send_interval_ms(::google::protobuf::int32 value) {
  set_has_packet_send_interval_ms();
  packet_send_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.config.NetworkTesterConfig.packet_send_interval_ms)
}

// optional float packet_size = 2;
bool NetworkTesterConfig::has_packet_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkTesterConfig::set_has_packet_size() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkTesterConfig::clear_has_packet_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkTesterConfig::clear_packet_size() {
  packet_size_ = 0;
  clear_has_packet_size();
}
float NetworkTesterConfig::packet_size() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.config.NetworkTesterConfig.packet_size)
  return packet_size_;
}
void NetworkTesterConfig::set_packet_size(float value) {
  set_has_packet_size();
  packet_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.config.NetworkTesterConfig.packet_size)
}

// optional int32 execution_time_ms = 3;
bool NetworkTesterConfig::has_execution_time_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkTesterConfig::set_has_execution_time_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkTesterConfig::clear_has_execution_time_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkTesterConfig::clear_execution_time_ms() {
  execution_time_ms_ = 0;
  clear_has_execution_time_ms();
}
::google::protobuf::int32 NetworkTesterConfig::execution_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.config.NetworkTesterConfig.execution_time_ms)
  return execution_time_ms_;
}
void NetworkTesterConfig::set_execution_time_ms(::google::protobuf::int32 value) {
  set_has_execution_time_ms();
  execution_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.config.NetworkTesterConfig.execution_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkTesterAllConfigs::kConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkTesterAllConfigs::NetworkTesterAllConfigs()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_network_5ftester_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.network_tester.config.NetworkTesterAllConfigs)
}
NetworkTesterAllConfigs::NetworkTesterAllConfigs(const NetworkTesterAllConfigs& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      configs_(from.configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.network_tester.config.NetworkTesterAllConfigs)
}

void NetworkTesterAllConfigs::SharedCtor() {
  _cached_size_ = 0;
}

NetworkTesterAllConfigs::~NetworkTesterAllConfigs() {
  // @@protoc_insertion_point(destructor:webrtc.network_tester.config.NetworkTesterAllConfigs)
  SharedDtor();
}

void NetworkTesterAllConfigs::SharedDtor() {
}

void NetworkTesterAllConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkTesterAllConfigs& NetworkTesterAllConfigs::default_instance() {
  protobuf_network_5ftester_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkTesterAllConfigs* NetworkTesterAllConfigs::New(::google::protobuf::Arena* arena) const {
  NetworkTesterAllConfigs* n = new NetworkTesterAllConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkTesterAllConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.network_tester.config.NetworkTesterAllConfigs)
  configs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkTesterAllConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:webrtc.network_tester.config.NetworkTesterAllConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .webrtc.network_tester.config.NetworkTesterConfig configs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.network_tester.config.NetworkTesterAllConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.network_tester.config.NetworkTesterAllConfigs)
  return false;
#undef DO_
}

void NetworkTesterAllConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.network_tester.config.NetworkTesterAllConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.network_tester.config.NetworkTesterConfig configs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->configs(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.network_tester.config.NetworkTesterAllConfigs)
}

size_t NetworkTesterAllConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.network_tester.config.NetworkTesterAllConfigs)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .webrtc.network_tester.config.NetworkTesterConfig configs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkTesterAllConfigs::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkTesterAllConfigs*>(&from));
}

void NetworkTesterAllConfigs::MergeFrom(const NetworkTesterAllConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.network_tester.config.NetworkTesterAllConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configs_.MergeFrom(from.configs_);
}

void NetworkTesterAllConfigs::CopyFrom(const NetworkTesterAllConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.network_tester.config.NetworkTesterAllConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkTesterAllConfigs::IsInitialized() const {
  return true;
}

void NetworkTesterAllConfigs::Swap(NetworkTesterAllConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkTesterAllConfigs::InternalSwap(NetworkTesterAllConfigs* other) {
  configs_.InternalSwap(&other->configs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkTesterAllConfigs::GetTypeName() const {
  return "webrtc.network_tester.config.NetworkTesterAllConfigs";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkTesterAllConfigs

// repeated .webrtc.network_tester.config.NetworkTesterConfig configs = 1;
int NetworkTesterAllConfigs::configs_size() const {
  return configs_.size();
}
void NetworkTesterAllConfigs::clear_configs() {
  configs_.Clear();
}
const ::webrtc::network_tester::config::NetworkTesterConfig& NetworkTesterAllConfigs::configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.config.NetworkTesterAllConfigs.configs)
  return configs_.Get(index);
}
::webrtc::network_tester::config::NetworkTesterConfig* NetworkTesterAllConfigs::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.network_tester.config.NetworkTesterAllConfigs.configs)
  return configs_.Mutable(index);
}
::webrtc::network_tester::config::NetworkTesterConfig* NetworkTesterAllConfigs::add_configs() {
  // @@protoc_insertion_point(field_add:webrtc.network_tester.config.NetworkTesterAllConfigs.configs)
  return configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::network_tester::config::NetworkTesterConfig >*
NetworkTesterAllConfigs::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.network_tester.config.NetworkTesterAllConfigs.configs)
  return &configs_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::network_tester::config::NetworkTesterConfig >&
NetworkTesterAllConfigs::configs() const {
  // @@protoc_insertion_point(field_list:webrtc.network_tester.config.NetworkTesterAllConfigs.configs)
  return configs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace network_tester
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)
