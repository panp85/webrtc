// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chart.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chart.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace webrtc {
namespace analytics {
class ChartStyleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChartStyle> {
} _ChartStyle_default_instance_;
class DataSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataSet> {
} _DataSet_default_instance_;
class ChartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Chart> {
} _Chart_default_instance_;
class ChartCollectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChartCollection> {
} _ChartCollection_default_instance_;

namespace protobuf_chart_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ChartStyle_default_instance_.Shutdown();
  _DataSet_default_instance_.Shutdown();
  _Chart_default_instance_.Shutdown();
  _ChartCollection_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ChartStyle_default_instance_.DefaultConstruct();
  _DataSet_default_instance_.DefaultConstruct();
  _Chart_default_instance_.DefaultConstruct();
  _ChartCollection_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_chart_2eproto

bool ChartStyle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChartStyle_Type ChartStyle::UNDEFINED;
const ChartStyle_Type ChartStyle::LINE_CHART;
const ChartStyle_Type ChartStyle::BAR_CHART;
const ChartStyle_Type ChartStyle::LINE_STEP_CHART;
const ChartStyle_Type ChartStyle::SCATTER_CHART;
const ChartStyle_Type ChartStyle::Type_MIN;
const ChartStyle_Type ChartStyle::Type_MAX;
const int ChartStyle::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChartStyle::ChartStyle()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.analytics.ChartStyle)
}
ChartStyle::ChartStyle(const ChartStyle& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.analytics.ChartStyle)
}

void ChartStyle::SharedCtor() {
  _cached_size_ = 0;
}

ChartStyle::~ChartStyle() {
  // @@protoc_insertion_point(destructor:webrtc.analytics.ChartStyle)
  SharedDtor();
}

void ChartStyle::SharedDtor() {
}

void ChartStyle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChartStyle& ChartStyle::default_instance() {
  protobuf_chart_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChartStyle* ChartStyle::New(::google::protobuf::Arena* arena) const {
  ChartStyle* n = new ChartStyle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChartStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.analytics.ChartStyle)
}

bool ChartStyle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:webrtc.analytics.ChartStyle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.analytics.ChartStyle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.analytics.ChartStyle)
  return false;
#undef DO_
}

void ChartStyle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.analytics.ChartStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:webrtc.analytics.ChartStyle)
}

size_t ChartStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.analytics.ChartStyle)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartStyle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChartStyle*>(&from));
}

void ChartStyle::MergeFrom(const ChartStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.analytics.ChartStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChartStyle::CopyFrom(const ChartStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.analytics.ChartStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStyle::IsInitialized() const {
  return true;
}

void ChartStyle::Swap(ChartStyle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChartStyle::InternalSwap(ChartStyle* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChartStyle::GetTypeName() const {
  return "webrtc.analytics.ChartStyle";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChartStyle

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSet::kXValuesFieldNumber;
const int DataSet::kYValuesFieldNumber;
const int DataSet::kLabelFieldNumber;
const int DataSet::kStyleFieldNumber;
const int DataSet::kHighlightPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSet::DataSet()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.analytics.DataSet)
}
DataSet::DataSet(const DataSet& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      x_values_(from.x_values_),
      y_values_(from.y_values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label().size() > 0) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&highlight_points_) -
    reinterpret_cast<char*>(&style_)) + sizeof(highlight_points_));
  // @@protoc_insertion_point(copy_constructor:webrtc.analytics.DataSet)
}

void DataSet::SharedCtor() {
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highlight_points_) -
      reinterpret_cast<char*>(&style_)) + sizeof(highlight_points_));
  _cached_size_ = 0;
}

DataSet::~DataSet() {
  // @@protoc_insertion_point(destructor:webrtc.analytics.DataSet)
  SharedDtor();
}

void DataSet::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataSet& DataSet::default_instance() {
  protobuf_chart_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataSet* DataSet::New(::google::protobuf::Arena* arena) const {
  DataSet* n = new DataSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataSet::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.analytics.DataSet)
  x_values_.Clear();
  y_values_.Clear();
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highlight_points_) -
      reinterpret_cast<char*>(&style_)) + sizeof(highlight_points_));
}

bool DataSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:webrtc.analytics.DataSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float x_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_x_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float y_values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_y_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "webrtc.analytics.DataSet.label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .webrtc.analytics.ChartStyle.Type style = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_style(static_cast< ::webrtc::analytics::ChartStyle_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool highlight_points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &highlight_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.analytics.DataSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.analytics.DataSet)
  return false;
#undef DO_
}

void DataSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.analytics.DataSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float x_values = 1;
  if (this->x_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _x_values_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->x_values().data(), this->x_values_size(), output);
  }

  // repeated float y_values = 2;
  if (this->y_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _y_values_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->y_values().data(), this->y_values_size(), output);
  }

  // string label = 3;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.DataSet.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->label(), output);
  }

  // .webrtc.analytics.ChartStyle.Type style = 4;
  if (this->style() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->style(), output);
  }

  // bool highlight_points = 5;
  if (this->highlight_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->highlight_points(), output);
  }

  // @@protoc_insertion_point(serialize_end:webrtc.analytics.DataSet)
}

size_t DataSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.analytics.DataSet)
  size_t total_size = 0;

  // repeated float x_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->x_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float y_values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->y_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string label = 3;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  // .webrtc.analytics.ChartStyle.Type style = 4;
  if (this->style() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->style());
  }

  // bool highlight_points = 5;
  if (this->highlight_points() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataSet*>(&from));
}

void DataSet::MergeFrom(const DataSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.analytics.DataSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_values_.MergeFrom(from.x_values_);
  y_values_.MergeFrom(from.y_values_);
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.style() != 0) {
    set_style(from.style());
  }
  if (from.highlight_points() != 0) {
    set_highlight_points(from.highlight_points());
  }
}

void DataSet::CopyFrom(const DataSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.analytics.DataSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSet::IsInitialized() const {
  return true;
}

void DataSet::Swap(DataSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSet::InternalSwap(DataSet* other) {
  x_values_.InternalSwap(&other->x_values_);
  y_values_.InternalSwap(&other->y_values_);
  label_.Swap(&other->label_);
  std::swap(style_, other->style_);
  std::swap(highlight_points_, other->highlight_points_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DataSet::GetTypeName() const {
  return "webrtc.analytics.DataSet";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataSet

// repeated float x_values = 1;
int DataSet::x_values_size() const {
  return x_values_.size();
}
void DataSet::clear_x_values() {
  x_values_.Clear();
}
float DataSet::x_values(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.x_values)
  return x_values_.Get(index);
}
void DataSet::set_x_values(int index, float value) {
  x_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.x_values)
}
void DataSet::add_x_values(float value) {
  x_values_.Add(value);
  // @@protoc_insertion_point(field_add:webrtc.analytics.DataSet.x_values)
}
const ::google::protobuf::RepeatedField< float >&
DataSet::x_values() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.DataSet.x_values)
  return x_values_;
}
::google::protobuf::RepeatedField< float >*
DataSet::mutable_x_values() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.DataSet.x_values)
  return &x_values_;
}

// repeated float y_values = 2;
int DataSet::y_values_size() const {
  return y_values_.size();
}
void DataSet::clear_y_values() {
  y_values_.Clear();
}
float DataSet::y_values(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.y_values)
  return y_values_.Get(index);
}
void DataSet::set_y_values(int index, float value) {
  y_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.y_values)
}
void DataSet::add_y_values(float value) {
  y_values_.Add(value);
  // @@protoc_insertion_point(field_add:webrtc.analytics.DataSet.y_values)
}
const ::google::protobuf::RepeatedField< float >&
DataSet::y_values() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.DataSet.y_values)
  return y_values_;
}
::google::protobuf::RepeatedField< float >*
DataSet::mutable_y_values() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.DataSet.y_values)
  return &y_values_;
}

// string label = 3;
void DataSet::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataSet::label() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.label)
  return label_.GetNoArena();
}
void DataSet::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.label)
}
#if LANG_CXX11
void DataSet::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.DataSet.label)
}
#endif
void DataSet::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.DataSet.label)
}
void DataSet::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.DataSet.label)
}
::std::string* DataSet::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.DataSet.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataSet::release_label() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.DataSet.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataSet::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.DataSet.label)
}

// .webrtc.analytics.ChartStyle.Type style = 4;
void DataSet::clear_style() {
  style_ = 0;
}
::webrtc::analytics::ChartStyle_Type DataSet::style() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.style)
  return static_cast< ::webrtc::analytics::ChartStyle_Type >(style_);
}
void DataSet::set_style(::webrtc::analytics::ChartStyle_Type value) {
  
  style_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.style)
}

// bool highlight_points = 5;
void DataSet::clear_highlight_points() {
  highlight_points_ = false;
}
bool DataSet::highlight_points() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.highlight_points)
  return highlight_points_;
}
void DataSet::set_highlight_points(bool value) {
  
  highlight_points_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.highlight_points)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chart::kDataSetsFieldNumber;
const int Chart::kXaxisMinFieldNumber;
const int Chart::kXaxisMaxFieldNumber;
const int Chart::kXaxisLabelFieldNumber;
const int Chart::kYaxisMinFieldNumber;
const int Chart::kYaxisMaxFieldNumber;
const int Chart::kYaxisLabelFieldNumber;
const int Chart::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chart::Chart()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.analytics.Chart)
}
Chart::Chart(const Chart& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      data_sets_(from.data_sets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  xaxis_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.xaxis_label().size() > 0) {
    xaxis_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xaxis_label_);
  }
  yaxis_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.yaxis_label().size() > 0) {
    yaxis_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yaxis_label_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&xaxis_min_, &from.xaxis_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaxis_max_) -
    reinterpret_cast<char*>(&xaxis_min_)) + sizeof(yaxis_max_));
  // @@protoc_insertion_point(copy_constructor:webrtc.analytics.Chart)
}

void Chart::SharedCtor() {
  xaxis_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yaxis_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&xaxis_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaxis_max_) -
      reinterpret_cast<char*>(&xaxis_min_)) + sizeof(yaxis_max_));
  _cached_size_ = 0;
}

Chart::~Chart() {
  // @@protoc_insertion_point(destructor:webrtc.analytics.Chart)
  SharedDtor();
}

void Chart::SharedDtor() {
  xaxis_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yaxis_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Chart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Chart& Chart::default_instance() {
  protobuf_chart_2eproto::InitDefaults();
  return *internal_default_instance();
}

Chart* Chart::New(::google::protobuf::Arena* arena) const {
  Chart* n = new Chart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chart::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.analytics.Chart)
  data_sets_.Clear();
  xaxis_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yaxis_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&xaxis_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaxis_max_) -
      reinterpret_cast<char*>(&xaxis_min_)) + sizeof(yaxis_max_));
}

bool Chart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:webrtc.analytics.Chart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .webrtc.analytics.DataSet data_sets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float xaxis_min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xaxis_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float xaxis_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xaxis_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string xaxis_label = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xaxis_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xaxis_label().data(), static_cast<int>(this->xaxis_label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "webrtc.analytics.Chart.xaxis_label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaxis_min = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaxis_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaxis_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaxis_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string yaxis_label = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yaxis_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->yaxis_label().data(), static_cast<int>(this->yaxis_label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "webrtc.analytics.Chart.yaxis_label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "webrtc.analytics.Chart.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.analytics.Chart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.analytics.Chart)
  return false;
#undef DO_
}

void Chart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.analytics.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.analytics.DataSet data_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_sets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->data_sets(static_cast<int>(i)), output);
  }

  // float xaxis_min = 2;
  if (this->xaxis_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xaxis_min(), output);
  }

  // float xaxis_max = 3;
  if (this->xaxis_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->xaxis_max(), output);
  }

  // string xaxis_label = 4;
  if (this->xaxis_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xaxis_label().data(), static_cast<int>(this->xaxis_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.Chart.xaxis_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->xaxis_label(), output);
  }

  // float yaxis_min = 5;
  if (this->yaxis_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->yaxis_min(), output);
  }

  // float yaxis_max = 6;
  if (this->yaxis_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaxis_max(), output);
  }

  // string yaxis_label = 7;
  if (this->yaxis_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->yaxis_label().data(), static_cast<int>(this->yaxis_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.Chart.yaxis_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->yaxis_label(), output);
  }

  // string title = 8;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.Chart.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->title(), output);
  }

  // @@protoc_insertion_point(serialize_end:webrtc.analytics.Chart)
}

size_t Chart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.analytics.Chart)
  size_t total_size = 0;

  // repeated .webrtc.analytics.DataSet data_sets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_sets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_sets(static_cast<int>(i)));
    }
  }

  // string xaxis_label = 4;
  if (this->xaxis_label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xaxis_label());
  }

  // string yaxis_label = 7;
  if (this->yaxis_label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->yaxis_label());
  }

  // string title = 8;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // float xaxis_min = 2;
  if (this->xaxis_min() != 0) {
    total_size += 1 + 4;
  }

  // float xaxis_max = 3;
  if (this->xaxis_max() != 0) {
    total_size += 1 + 4;
  }

  // float yaxis_min = 5;
  if (this->yaxis_min() != 0) {
    total_size += 1 + 4;
  }

  // float yaxis_max = 6;
  if (this->yaxis_max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Chart*>(&from));
}

void Chart::MergeFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.analytics.Chart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_sets_.MergeFrom(from.data_sets_);
  if (from.xaxis_label().size() > 0) {

    xaxis_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xaxis_label_);
  }
  if (from.yaxis_label().size() > 0) {

    yaxis_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yaxis_label_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.xaxis_min() != 0) {
    set_xaxis_min(from.xaxis_min());
  }
  if (from.xaxis_max() != 0) {
    set_xaxis_max(from.xaxis_max());
  }
  if (from.yaxis_min() != 0) {
    set_yaxis_min(from.yaxis_min());
  }
  if (from.yaxis_max() != 0) {
    set_yaxis_max(from.yaxis_max());
  }
}

void Chart::CopyFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.analytics.Chart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart::IsInitialized() const {
  return true;
}

void Chart::Swap(Chart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chart::InternalSwap(Chart* other) {
  data_sets_.InternalSwap(&other->data_sets_);
  xaxis_label_.Swap(&other->xaxis_label_);
  yaxis_label_.Swap(&other->yaxis_label_);
  title_.Swap(&other->title_);
  std::swap(xaxis_min_, other->xaxis_min_);
  std::swap(xaxis_max_, other->xaxis_max_);
  std::swap(yaxis_min_, other->yaxis_min_);
  std::swap(yaxis_max_, other->yaxis_max_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Chart::GetTypeName() const {
  return "webrtc.analytics.Chart";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chart

// repeated .webrtc.analytics.DataSet data_sets = 1;
int Chart::data_sets_size() const {
  return data_sets_.size();
}
void Chart::clear_data_sets() {
  data_sets_.Clear();
}
const ::webrtc::analytics::DataSet& Chart::data_sets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.data_sets)
  return data_sets_.Get(index);
}
::webrtc::analytics::DataSet* Chart::mutable_data_sets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.data_sets)
  return data_sets_.Mutable(index);
}
::webrtc::analytics::DataSet* Chart::add_data_sets() {
  // @@protoc_insertion_point(field_add:webrtc.analytics.Chart.data_sets)
  return data_sets_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::analytics::DataSet >*
Chart::mutable_data_sets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.Chart.data_sets)
  return &data_sets_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::DataSet >&
Chart::data_sets() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.Chart.data_sets)
  return data_sets_;
}

// float xaxis_min = 2;
void Chart::clear_xaxis_min() {
  xaxis_min_ = 0;
}
float Chart::xaxis_min() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_min)
  return xaxis_min_;
}
void Chart::set_xaxis_min(float value) {
  
  xaxis_min_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_min)
}

// float xaxis_max = 3;
void Chart::clear_xaxis_max() {
  xaxis_max_ = 0;
}
float Chart::xaxis_max() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_max)
  return xaxis_max_;
}
void Chart::set_xaxis_max(float value) {
  
  xaxis_max_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_max)
}

// string xaxis_label = 4;
void Chart::clear_xaxis_label() {
  xaxis_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Chart::xaxis_label() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_label)
  return xaxis_label_.GetNoArena();
}
void Chart::set_xaxis_label(const ::std::string& value) {
  
  xaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_label)
}
#if LANG_CXX11
void Chart::set_xaxis_label(::std::string&& value) {
  
  xaxis_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.Chart.xaxis_label)
}
#endif
void Chart::set_xaxis_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  xaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.Chart.xaxis_label)
}
void Chart::set_xaxis_label(const char* value, size_t size) {
  
  xaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.Chart.xaxis_label)
}
::std::string* Chart::mutable_xaxis_label() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.xaxis_label)
  return xaxis_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Chart::release_xaxis_label() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.xaxis_label)
  
  return xaxis_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chart::set_allocated_xaxis_label(::std::string* xaxis_label) {
  if (xaxis_label != NULL) {
    
  } else {
    
  }
  xaxis_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xaxis_label);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.xaxis_label)
}

// float yaxis_min = 5;
void Chart::clear_yaxis_min() {
  yaxis_min_ = 0;
}
float Chart::yaxis_min() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_min)
  return yaxis_min_;
}
void Chart::set_yaxis_min(float value) {
  
  yaxis_min_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_min)
}

// float yaxis_max = 6;
void Chart::clear_yaxis_max() {
  yaxis_max_ = 0;
}
float Chart::yaxis_max() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_max)
  return yaxis_max_;
}
void Chart::set_yaxis_max(float value) {
  
  yaxis_max_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_max)
}

// string yaxis_label = 7;
void Chart::clear_yaxis_label() {
  yaxis_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Chart::yaxis_label() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_label)
  return yaxis_label_.GetNoArena();
}
void Chart::set_yaxis_label(const ::std::string& value) {
  
  yaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_label)
}
#if LANG_CXX11
void Chart::set_yaxis_label(::std::string&& value) {
  
  yaxis_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.Chart.yaxis_label)
}
#endif
void Chart::set_yaxis_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  yaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.Chart.yaxis_label)
}
void Chart::set_yaxis_label(const char* value, size_t size) {
  
  yaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.Chart.yaxis_label)
}
::std::string* Chart::mutable_yaxis_label() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.yaxis_label)
  return yaxis_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Chart::release_yaxis_label() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.yaxis_label)
  
  return yaxis_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chart::set_allocated_yaxis_label(::std::string* yaxis_label) {
  if (yaxis_label != NULL) {
    
  } else {
    
  }
  yaxis_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yaxis_label);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.yaxis_label)
}

// string title = 8;
void Chart::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Chart::title() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.title)
  return title_.GetNoArena();
}
void Chart::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.title)
}
#if LANG_CXX11
void Chart::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.Chart.title)
}
#endif
void Chart::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.Chart.title)
}
void Chart::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.Chart.title)
}
::std::string* Chart::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Chart::release_title() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chart::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.title)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartCollection::kChartsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChartCollection::ChartCollection()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.analytics.ChartCollection)
}
ChartCollection::ChartCollection(const ChartCollection& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      charts_(from.charts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.analytics.ChartCollection)
}

void ChartCollection::SharedCtor() {
  _cached_size_ = 0;
}

ChartCollection::~ChartCollection() {
  // @@protoc_insertion_point(destructor:webrtc.analytics.ChartCollection)
  SharedDtor();
}

void ChartCollection::SharedDtor() {
}

void ChartCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChartCollection& ChartCollection::default_instance() {
  protobuf_chart_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChartCollection* ChartCollection::New(::google::protobuf::Arena* arena) const {
  ChartCollection* n = new ChartCollection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChartCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.analytics.ChartCollection)
  charts_.Clear();
}

bool ChartCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:webrtc.analytics.ChartCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .webrtc.analytics.Chart charts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.analytics.ChartCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.analytics.ChartCollection)
  return false;
#undef DO_
}

void ChartCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.analytics.ChartCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.analytics.Chart charts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->charts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->charts(static_cast<int>(i)), output);
  }

  // @@protoc_insertion_point(serialize_end:webrtc.analytics.ChartCollection)
}

size_t ChartCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.analytics.ChartCollection)
  size_t total_size = 0;

  // repeated .webrtc.analytics.Chart charts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->charts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartCollection::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChartCollection*>(&from));
}

void ChartCollection::MergeFrom(const ChartCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.analytics.ChartCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  charts_.MergeFrom(from.charts_);
}

void ChartCollection::CopyFrom(const ChartCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.analytics.ChartCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCollection::IsInitialized() const {
  return true;
}

void ChartCollection::Swap(ChartCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChartCollection::InternalSwap(ChartCollection* other) {
  charts_.InternalSwap(&other->charts_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChartCollection::GetTypeName() const {
  return "webrtc.analytics.ChartCollection";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChartCollection

// repeated .webrtc.analytics.Chart charts = 1;
int ChartCollection::charts_size() const {
  return charts_.size();
}
void ChartCollection::clear_charts() {
  charts_.Clear();
}
const ::webrtc::analytics::Chart& ChartCollection::charts(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.ChartCollection.charts)
  return charts_.Get(index);
}
::webrtc::analytics::Chart* ChartCollection::mutable_charts(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.ChartCollection.charts)
  return charts_.Mutable(index);
}
::webrtc::analytics::Chart* ChartCollection::add_charts() {
  // @@protoc_insertion_point(field_add:webrtc.analytics.ChartCollection.charts)
  return charts_.Add();
}
::google::protobuf::RepeatedPtrField< ::webrtc::analytics::Chart >*
ChartCollection::mutable_charts() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.ChartCollection.charts)
  return &charts_;
}
const ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::Chart >&
ChartCollection::charts() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.ChartCollection.charts)
  return charts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace analytics
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)
