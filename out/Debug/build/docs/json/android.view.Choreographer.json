{
  "methods": {
    "getFrameInterval()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "long",
      "exceptions": [],
      "name": "getFrameInterval()",
      "documentation": "Return the current inter-frame interval.\n\n@return  Inter-frame interval.\n"
    },
    "getFrameTimeNanos()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "long",
      "exceptions": [],
      "name": "getFrameTimeNanos()"
    },
    "getInstance()": {
      "isImplementation": true,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "android.view.Choreographer",
      "exceptions": [],
      "name": "getInstance()"
    },
    "makeThreadLocal()": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [],
      "returnType": "org.robolectric.util.SoftThreadLocal\u003candroid.view.Choreographer\u003e",
      "exceptions": [],
      "name": "makeThreadLocal()"
    },
    "postCallback(int,java.lang.Runnable,java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "callbackType",
        "action",
        "token"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "postCallback(int,java.lang.Runnable,java.lang.Object)",
      "documentation": "The default implementation will call {@link #postCallbackDelayed(int, Runnable, Object, long)}\nwith no delay. {@link android.animation.AnimationHandler} calls this method to schedule\nanimation updates infinitely. Because during a Robolectric test the system time is paused and\nexecution of the event loop is invoked for each test instruction, the behavior of\nAnimationHandler would result in endless looping (the execution of the task results in a new\nanimation task created and scheduled to the front of the event loop queue).\n\nTo prevent endless looping, a test may call {@link #setPostCallbackDelay(int)} to specify a\nsmall delay when animation is scheduled.\n\n@see #setPostCallbackDelay(int)\n"
    },
    "postCallbackDelayed(int,java.lang.Runnable,java.lang.Object,long)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "callbackType",
        "action",
        "token",
        "delayMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "postCallbackDelayed(int,java.lang.Runnable,java.lang.Object,long)"
    },
    "postFrameCallback(android.view.Choreographer.FrameCallback)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "postFrameCallback(android.view.Choreographer.FrameCallback)",
      "documentation": "The default implementation will call {@link #postFrameCallbackDelayed(FrameCallback, long)}\nwith no delay. {@link android.animation.AnimationHandler} calls this method to schedule\nanimation updates infinitely. Because during a Robolectric test the system time is paused and\nexecution of the event loop is invoked for each test instruction, the behavior of\nAnimationHandler would result in endless looping (the execution of the task results in a new\nanimation task created and scheduled to the front of the event loop queue).\n\nTo prevent endless looping, a test may call {@link #setPostFrameCallbackDelay(int)} to\nspecify a small delay when animation is scheduled.\n\n@see #setPostCallbackDelay(int)\n"
    },
    "postFrameCallbackDelayed(android.view.Choreographer.FrameCallback,long)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "callback",
        "delayMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "postFrameCallbackDelayed(android.view.Choreographer.FrameCallback,long)"
    },
    "removeCallbacks(int,java.lang.Runnable,java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "callbackType",
        "action",
        "token"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeCallbacks(int,java.lang.Runnable,java.lang.Object)"
    },
    "removeFrameCallback(android.view.Choreographer.FrameCallback)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeFrameCallback(android.view.Choreographer.FrameCallback)"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static",
        "synchronized"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setFrameInterval(long)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "frameInterval"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setFrameInterval(long)",
      "documentation": "Set the inter-frame interval used to advance the clock. By default, this is set to 1ms.\n\n@param frameInterval  Inter-frame interval.\n"
    },
    "setPostCallbackDelay(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "delayMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPostCallbackDelay(int)",
      "documentation": "Allows application to specify a fixed amount of delay when {@link #postCallback(int, Runnable,\nObject)} is invoked. The default delay value is `0`. This can be used to avoid infinite\nanimation tasks to be spawned when the Robolectric {@link org.robolectric.util.Scheduler} is in\n{@link org.robolectric.util.Scheduler.IdleState#PAUSED} mode.\n"
    },
    "setPostFrameCallbackDelay(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "delayMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPostFrameCallbackDelay(int)",
      "documentation": "Allows application to specify a fixed amount of delay when {@link\n#postFrameCallback(FrameCallback)} is invoked. The default delay value is `0`. This can be used\nto avoid infinite animation tasks to be spawned when the Robolectric {@link\norg.robolectric.util.Scheduler} is in {@link org.robolectric.util.Scheduler.IdleState#PAUSED}\nmode.\n"
    }
  },
  "imports": [
    "android.os.Handler",
    "android.os.Looper",
    "android.os.SystemClock",
    "android.view.Choreographer",
    "android.view.Choreographer.FrameCallback",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.util.SoftThreadLocal",
    "org.robolectric.util.TimeUtils"
  ],
  "name": "org.robolectric.shadows.ShadowChoreographer",
  "documentation": "Robolectric maintains its own concept of the current time from the Choreographer\u0027s\npoint of view, aimed at making animations work correctly. Time starts out at {@code 0}\nand advances by {@code frameInterval} every time\n{@link Choreographer#getFrameTimeNanos()} is called.\n"
}