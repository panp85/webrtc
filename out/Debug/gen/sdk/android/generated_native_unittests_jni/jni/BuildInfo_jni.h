// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/BuildInfo

#ifndef org_webrtc_BuildInfo_JNI
#define org_webrtc_BuildInfo_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_BuildInfo[];
const char kClassPath_org_webrtc_BuildInfo[] = "org/webrtc/BuildInfo";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_webrtc_BuildInfo_clazz = 0;
#ifndef org_webrtc_BuildInfo_clazz_defined
#define org_webrtc_BuildInfo_clazz_defined
inline jclass org_webrtc_BuildInfo_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_BuildInfo,
      &g_org_webrtc_BuildInfo_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace  webrtc {
namespace jni {


static base::subtle::AtomicWord g_org_webrtc_BuildInfo_getDeviceModel = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_BuildInfo_getDeviceModel(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_BuildInfo_clazz(env),
      org_webrtc_BuildInfo_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_webrtc_BuildInfo_clazz(env),
          "getDeviceModel",
          "()Ljava/lang/String;",
          &g_org_webrtc_BuildInfo_getDeviceModel);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(org_webrtc_BuildInfo_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_BuildInfo_getBrand = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_BuildInfo_getBrand(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_BuildInfo_clazz(env),
      org_webrtc_BuildInfo_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_webrtc_BuildInfo_clazz(env),
          "getBrand",
          "()Ljava/lang/String;",
          &g_org_webrtc_BuildInfo_getBrand);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(org_webrtc_BuildInfo_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_BuildInfo_getDeviceManufacturer = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_BuildInfo_getDeviceManufacturer(JNIEnv* env)
    {
  CHECK_CLAZZ(env, org_webrtc_BuildInfo_clazz(env),
      org_webrtc_BuildInfo_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_webrtc_BuildInfo_clazz(env),
          "getDeviceManufacturer",
          "()Ljava/lang/String;",
          &g_org_webrtc_BuildInfo_getDeviceManufacturer);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(org_webrtc_BuildInfo_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_BuildInfo_getAndroidBuildId = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_BuildInfo_getAndroidBuildId(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_BuildInfo_clazz(env),
      org_webrtc_BuildInfo_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_webrtc_BuildInfo_clazz(env),
          "getAndroidBuildId",
          "()Ljava/lang/String;",
          &g_org_webrtc_BuildInfo_getAndroidBuildId);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(org_webrtc_BuildInfo_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_BuildInfo_getBuildType = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_BuildInfo_getBuildType(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_BuildInfo_clazz(env),
      org_webrtc_BuildInfo_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_webrtc_BuildInfo_clazz(env),
          "getBuildType",
          "()Ljava/lang/String;",
          &g_org_webrtc_BuildInfo_getBuildType);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(org_webrtc_BuildInfo_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_BuildInfo_getBuildRelease = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_BuildInfo_getBuildRelease(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_BuildInfo_clazz(env),
      org_webrtc_BuildInfo_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_webrtc_BuildInfo_clazz(env),
          "getBuildRelease",
          "()Ljava/lang/String;",
          &g_org_webrtc_BuildInfo_getBuildRelease);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(org_webrtc_BuildInfo_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_BuildInfo_getSdkVersion = 0;
static jint Java_BuildInfo_getSdkVersion(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_BuildInfo_clazz(env),
      org_webrtc_BuildInfo_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_webrtc_BuildInfo_clazz(env),
          "getSdkVersion",
          "()I",
          &g_org_webrtc_BuildInfo_getSdkVersion);

  jint ret =
      env->CallStaticIntMethod(org_webrtc_BuildInfo_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace jni
}  // namespace  webrtc

#endif  // org_webrtc_BuildInfo_JNI
