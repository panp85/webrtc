// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/RtpParameters

#ifndef org_webrtc_RtpParameters_JNI
#define org_webrtc_RtpParameters_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_RtpParameters[];
const char kClassPath_org_webrtc_RtpParameters[] = "org/webrtc/RtpParameters";

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_RtpParameters_00024Codec[];
const char kClassPath_org_webrtc_RtpParameters_00024Codec[] = "org/webrtc/RtpParameters$Codec";

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_RtpParameters_00024Rtcp[];
const char kClassPath_org_webrtc_RtpParameters_00024Rtcp[] = "org/webrtc/RtpParameters$Rtcp";

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_RtpParameters_00024Encoding[];
const char kClassPath_org_webrtc_RtpParameters_00024Encoding[] =
    "org/webrtc/RtpParameters$Encoding";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_webrtc_RtpParameters_clazz = 0;
#ifndef org_webrtc_RtpParameters_clazz_defined
#define org_webrtc_RtpParameters_clazz_defined
inline jclass org_webrtc_RtpParameters_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_RtpParameters,
      &g_org_webrtc_RtpParameters_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Codec_clazz = 0;
#ifndef org_webrtc_RtpParameters_00024Codec_clazz_defined
#define org_webrtc_RtpParameters_00024Codec_clazz_defined
inline jclass org_webrtc_RtpParameters_00024Codec_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_RtpParameters_00024Codec,
      &g_org_webrtc_RtpParameters_00024Codec_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Rtcp_clazz = 0;
#ifndef org_webrtc_RtpParameters_00024Rtcp_clazz_defined
#define org_webrtc_RtpParameters_00024Rtcp_clazz_defined
inline jclass org_webrtc_RtpParameters_00024Rtcp_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_RtpParameters_00024Rtcp,
      &g_org_webrtc_RtpParameters_00024Rtcp_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Encoding_clazz = 0;
#ifndef org_webrtc_RtpParameters_00024Encoding_clazz_defined
#define org_webrtc_RtpParameters_00024Encoding_clazz_defined
inline jclass org_webrtc_RtpParameters_00024Encoding_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_RtpParameters_00024Encoding,
      &g_org_webrtc_RtpParameters_00024Encoding_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace  webrtc {
namespace jni {


static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Encoding_Constructor = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Encoding_Constructor(JNIEnv* env, jboolean
    active,
    const base::android::JavaRef<jobject>& maxBitrateBps,
    const base::android::JavaRef<jobject>& minBitrateBps,
    const base::android::JavaRef<jobject>& ssrc) {
  CHECK_CLAZZ(env, org_webrtc_RtpParameters_00024Encoding_clazz(env),
      org_webrtc_RtpParameters_00024Encoding_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Encoding_clazz(env),
          "<init>",
          "(ZLjava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Long;)V",
          &g_org_webrtc_RtpParameters_00024Encoding_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_RtpParameters_00024Encoding_clazz(env),
          method_id, active, maxBitrateBps.obj(), minBitrateBps.obj(), ssrc.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Encoding_getActive = 0;
static jboolean Java_Encoding_getActive(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Encoding_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Encoding_clazz(env),
          "getActive",
          "()Z",
          &g_org_webrtc_RtpParameters_00024Encoding_getActive);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Encoding_getMaxBitrateBps = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Encoding_getMaxBitrateBps(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Encoding_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Encoding_clazz(env),
          "getMaxBitrateBps",
          "()Ljava/lang/Integer;",
          &g_org_webrtc_RtpParameters_00024Encoding_getMaxBitrateBps);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Encoding_getMinBitrateBps = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Encoding_getMinBitrateBps(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Encoding_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Encoding_clazz(env),
          "getMinBitrateBps",
          "()Ljava/lang/Integer;",
          &g_org_webrtc_RtpParameters_00024Encoding_getMinBitrateBps);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Encoding_getSsrc = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Encoding_getSsrc(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Encoding_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Encoding_clazz(env),
          "getSsrc",
          "()Ljava/lang/Long;",
          &g_org_webrtc_RtpParameters_00024Encoding_getSsrc);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Codec_Constructor = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Codec_Constructor(JNIEnv* env, JniIntWrapper
    payloadType,
    const base::android::JavaRef<jstring>& name,
    const base::android::JavaRef<jobject>& kind,
    const base::android::JavaRef<jobject>& clockRate,
    const base::android::JavaRef<jobject>& numChannels,
    const base::android::JavaRef<jobject>& parameters) {
  CHECK_CLAZZ(env, org_webrtc_RtpParameters_00024Codec_clazz(env),
      org_webrtc_RtpParameters_00024Codec_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Codec_clazz(env),
          "<init>",
"(ILjava/lang/String;Lorg/webrtc/MediaStreamTrack$MediaType;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V",
          &g_org_webrtc_RtpParameters_00024Codec_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_RtpParameters_00024Codec_clazz(env),
          method_id, as_jint(payloadType), name.obj(), kind.obj(), clockRate.obj(),
              numChannels.obj(), parameters.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Codec_getPayloadType = 0;
static jint Java_Codec_getPayloadType(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Codec_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Codec_clazz(env),
          "getPayloadType",
          "()I",
          &g_org_webrtc_RtpParameters_00024Codec_getPayloadType);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Codec_getName = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_Codec_getName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Codec_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Codec_clazz(env),
          "getName",
          "()Ljava/lang/String;",
          &g_org_webrtc_RtpParameters_00024Codec_getName);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Codec_getKind = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Codec_getKind(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Codec_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Codec_clazz(env),
          "getKind",
          "()Lorg/webrtc/MediaStreamTrack$MediaType;",
          &g_org_webrtc_RtpParameters_00024Codec_getKind);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Codec_getClockRate = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Codec_getClockRate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Codec_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Codec_clazz(env),
          "getClockRate",
          "()Ljava/lang/Integer;",
          &g_org_webrtc_RtpParameters_00024Codec_getClockRate);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Codec_getNumChannels = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Codec_getNumChannels(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Codec_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Codec_clazz(env),
          "getNumChannels",
          "()Ljava/lang/Integer;",
          &g_org_webrtc_RtpParameters_00024Codec_getNumChannels);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Codec_getParameters = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Codec_getParameters(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Codec_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Codec_clazz(env),
          "getParameters",
          "()Ljava/util/Map;",
          &g_org_webrtc_RtpParameters_00024Codec_getParameters);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Rtcp_Constructor = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Rtcp_Constructor(JNIEnv* env, const
    base::android::JavaRef<jstring>& cname,
    jboolean reducedSize) {
  CHECK_CLAZZ(env, org_webrtc_RtpParameters_00024Rtcp_clazz(env),
      org_webrtc_RtpParameters_00024Rtcp_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Rtcp_clazz(env),
          "<init>",
          "(Ljava/lang/String;Z)V",
          &g_org_webrtc_RtpParameters_00024Rtcp_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_RtpParameters_00024Rtcp_clazz(env),
          method_id, cname.obj(), reducedSize);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Rtcp_getCname = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_Rtcp_getCname(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Rtcp_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Rtcp_clazz(env),
          "getCname",
          "()Ljava/lang/String;",
          &g_org_webrtc_RtpParameters_00024Rtcp_getCname);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_00024Rtcp_getReducedSize = 0;
static jboolean Java_Rtcp_getReducedSize(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_00024Rtcp_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_00024Rtcp_clazz(env),
          "getReducedSize",
          "()Z",
          &g_org_webrtc_RtpParameters_00024Rtcp_getReducedSize);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_Constructor = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_RtpParameters_Constructor(JNIEnv* env, const
    base::android::JavaRef<jstring>& transactionId,
    const base::android::JavaRef<jobject>& rtcp,
    const base::android::JavaRef<jobject>& encodings,
    const base::android::JavaRef<jobject>& codecs) {
  CHECK_CLAZZ(env, org_webrtc_RtpParameters_clazz(env),
      org_webrtc_RtpParameters_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_clazz(env),
          "<init>",
          "(Ljava/lang/String;Lorg/webrtc/RtpParameters$Rtcp;Ljava/util/List;Ljava/util/List;)V",
          &g_org_webrtc_RtpParameters_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_RtpParameters_clazz(env),
          method_id, transactionId.obj(), rtcp.obj(), encodings.obj(), codecs.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_getTransactionId = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_RtpParameters_getTransactionId(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_clazz(env),
          "getTransactionId",
          "()Ljava/lang/String;",
          &g_org_webrtc_RtpParameters_getTransactionId);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_getRtcp = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_RtpParameters_getRtcp(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_clazz(env),
          "getRtcp",
          "()Lorg/webrtc/RtpParameters$Rtcp;",
          &g_org_webrtc_RtpParameters_getRtcp);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_getEncodings = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_RtpParameters_getEncodings(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_clazz(env),
          "getEncodings",
          "()Ljava/util/List;",
          &g_org_webrtc_RtpParameters_getEncodings);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpParameters_getCodecs = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_RtpParameters_getCodecs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpParameters_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpParameters_clazz(env),
          "getCodecs",
          "()Ljava/util/List;",
          &g_org_webrtc_RtpParameters_getCodecs);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace jni
}  // namespace  webrtc

#endif  // org_webrtc_RtpParameters_JNI
